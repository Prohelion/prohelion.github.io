{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Home","text":"<p>Welcome to the Prohelion Documentation</p>"},{"location":"Battery_Management_Systems/index.html","title":"Battery Management Systems","text":"<ul> <li> <p> Prohelion BMS D1000 Gen2</p> <p>User Manual for the Prohelion Battery Management System (BMS) D1000 Gen2</p> <p> Getting started</p> </li> <li> <p> Prohelion BMS D1000 Gen1</p> <p>User Manual for the Prohelion Battery Management System (BMS) D1000 Gen1</p> <p> Getting started</p> </li> <li> <p> Prohelion BMS M48 Gen1</p> <p>User Manual for the Prohelion Battery Management System (BMS) M48 Gen1</p> <p> Getting started</p> </li> </ul>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/index.html","title":"Prohelion BMS D1000 Gen1","text":"<p>This document describes the interface, installation, and usage requirements for the Prohelion Battery Management System (BMS) D1000 Gen1.   </p> <p>The BMS provides an easy way to monitor and control an Electric Vehicle battery pack, and can work seamlessly with Prohelion's WaveSculptor motor controllers.  It is a mature design with five previous product generations of real-world experience with various types of cells, form factors, and vehicles. </p> <p></p> Prohelion Battery Management Unit <p>The BMS consists of two components: multiple Cell Management Units (CMU), which measure and control the individual cells in the battery pack; and a single Battery Management Unit (BMU) which interfaces between the CMUs and the vehicle, controls precharge and other safety systems, and provides total pack telemetry.</p> <p></p> Prohelion Cell Management Unit"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/index.html#battery-management-system-bms-functions","title":"Battery Management System (BMS) Functions","text":"<p>The function of the BMS is threefold, in order of priority: </p> <ul> <li>Monitor cell voltages and temperatures, and act on this information to protect the pack against being operated outside acceptable limits </li> <li>Manage the cells, to keep them at equal State Of Charge</li> <li>Report telemetry to the other systems in the vehicle, to allow a graceful reduction in vehicle performance as the battery approaches its limits </li> </ul> <p>The BMS performs these functions by measuring the following parameters: </p> <ul> <li>Individual cell voltages </li> <li>Group cell temperatures </li> <li>CMU temperatures </li> <li>Total pack voltage </li> <li>Total DC bus voltage </li> <li>Total pack current </li> <li>12V supply voltages and currents </li> <li>Contactor status </li> <li>Fan / Pump speeds </li> </ul> <p>To achieve management over the cells and pack, it controls: </p> <ul> <li>Individual cell bypass (shunt) balance resistors </li> <li>Pack contactors, including precharging HV loads </li> <li>Battery pack fan / pump </li> <li>Battery charger charging current setpoint </li> </ul> <p>Individual cell voltages are the most critical measurement taken by the system, and in the Prohelion BMS are measured using two separate, redundant circuits, each with it's own analog circuitry, A/D converter, and reference.   </p> <p>All measurements are cross-checked, and any fault in the system can be identified and reported.  This system not only gives reliable and accurate cell voltage measurements, it gives trusted measurements.   </p> <p>The Prohelion BMS reports if any measurements are not trustworthy, and this information can be acted on by a higher-level system in the vehicle, for instance by notifying the driver that the vehicle requires servicing. </p>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/index.html#terminology","title":"Terminology","text":"<p>Cell: A single physical unit, or permanently connected parallel group of units.  A parallel group functions electrically as a larger capacity single unit</p> <p>Battery: A series-connected group of cells </p>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/index.html#acronyms-and-abbreviations","title":"Acronyms and Abbreviations","text":"Acronym Abbreviation <code>A</code> Ampere <code>Ah</code> Ampere Hour <code>BMS</code> Battery Management System <code>CAN-Bus</code> Controller Area Network - Bus <code>DC</code> Direct Current <code>ESS</code> Energy Storage System <code>HV</code> High Voltage <code>LV</code> Low Voltage <code>SoC</code> State of Charge <code>V</code> Voltage"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Warnings.html","title":"Warnings","text":"<p>A properly designed BMS system will protect a battery pack from being operated outside of acceptable limits.  However, a poorly implemented system may not provide the expected protection \u2013 the Prohelion BMS must be installed in a professional and competent manner to function as designed. </p> <p>Attention should also be paid to the larger system that the vehicle is part of, especially the systems associated with charging and the infrastructure to support it.  As well as using the BMS to protect the pack, additional systems should be provided as backup as part of the charging infrastructure, for instance: fitting of smoke detectors; overcurrent and RCD protection in the AC supply; regular physical checks of charge cabling and connections; regular review of telemetry data for abnormal readings.   </p> <p>This list is not exhaustive, and it is the responsibility of the system designer / installer to conduct their own failure mode analysis and determine what is required. </p> <p>Working Around Batteries is DANGEROUS</p> <p>Not only are lethal high voltages present, but individual cells can also put out thousands of amps when shorted, for example with a stray wire or dropped tool, throwing out arcs and molten metal. </p> <p>Ensure Your Pack Is Correctly Fused</p> <p>The battery pack must be fused in each physical pack section with a fuse rated for at least the full DC pack voltage.  Note that it must be a DC rated fuse. </p> <p>Selection of fuse type and current rating is beyond the scope of this document, as it depends on expected load profile and duration, cable sizing and temperature rating, cable installation methods, and short-circuit rating of the pack, among other factors. </p> <p>Check the legal requirements in your jurisdiction for using licensed technicians for this type of work. </p> <p>Stay Safe</p> <ul> <li>Wear eye protection.  </li> <li>Use insulated tools.  </li> <li>Take extreme caution.</li> <li>Go slow. </li> </ul> <p>Think through every step before doing it. </p>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Appendix/Appendix_A.html","title":"Additional Documentation","text":"<ul> <li> <p>Refer to BMU Wiring Diagram PDF for details of the BMU wiring, HV contactor, and fuse layout. </p> </li> <li> <p>Refer to Cell Management Unit for CMU wiring harness construction guidelines and recommended part numbers. </p> </li> <li> <p>Refer to BMU Communications Protocol for CAN packet format and specifications. </p> </li> <li> <p>Refer to Vishay RH PDF for off-the-shelf Heatsink Encased Wirewound Power Resistors </p> </li> </ul>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Appendix/Appendix_B.html","title":"Recommended Component Sources","text":"Part Manufacturer Manufacturer Part Number Suggested Supplier Supplier Part Number <code>DeviceNet Cable (per Metre)</code> Lapp Cable 2170343 Element 14 161-7915 <code>MicroFit crimps (20-24 AWG)</code> Molex 43030-0007 Element 14 973-3027 <code>12-way MicroFit connector housing (Cell Wiring)</code> Pro Power 05B91510 Element 14 150-434"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Appendix/Appendix_C.html","title":"Guide to Successful Crimping","text":""},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Appendix/Appendix_C.html#molex-microfit-30","title":"Molex MicroFit 3.0","text":"<p>A dedicated MicroFit hand tool such as Molex part number 63819-0000 is the correct tool for the job.  This tool is available from Digikey, part WM9022-ND.  This tool provides far superior results compared to the generic crimp tool and will result in the most reliable and safe installation.</p> <p>At the bare minimum, use a quality hand crimp tool such as Molex part number 0638111000, available at a reasonable price from Digikey, part WM9999-ND.  The tool must be shaped to fold the crimp ears around and down through the centre of the wire conductor bundle \u2013 crimping with pliers or an 'automotive' barrel type crimp tool will not give a satisfactory result.  </p> <p>Refer to the Molex Quality Crimping Handbook</p> <p>Note the pictures in the \u201cTroubleshooting\u201d section for the visual differences between a good and a bad crimp.</p>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Battery_Management_Unit/index.html","title":"Battery Management Unit","text":"<p>The Battery Management Unit is the controlling circuit board in the Battery Management System, it connects to the Cell Management Units to read cells values and is responsible for the overall safe state operation of the Battery Management System.</p> <p></p> Prohelion BMS Master Unit"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Battery_Management_Unit/index.html#form-factor","title":"Form Factor","text":"<p>The BMS Master Unit (BMU) is supplied as a 1.6mm thickness Printed Circuit Board (PCB), conformally coated,  without an enclosure.  It is designed to be installed inside the battery box, in a weather-sealed area, along with the cells themselves.  This means that all connections to the pack remain inside the battery pack enclosure, simplifying fusing and wiring installation requirements.   </p> <p>The BMU should be mounted to a flat surface, using 7x M3 standoffs, of sufficient length to allow the appropriate clearance distance between the components on the PCB and the mounting surface.  Use of an insulation material layer may allow a lower-profile mounting.  This distance will be determined by the maximum operating voltage of the pack, required isolation voltage rating, and regulatory creepage and clearance distances.   </p> <p>All connections to the BMU are along one edge, simplifying wire routing inside your battery enclosure.  Wiring should be appropriately strain relieved to withstand the vibration typically found in an automotive environment \u2013 do not support the weight of the wiring loom solely from the connectors on the BMU. </p>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Battery_Management_Unit/index.html#dimensions","title":"Dimensions","text":"<p>The BMU PCB and mounting holes are shown below. Dimensions in mm.</p> <p></p> BMU PCB mounting holes"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Battery_Management_Unit/index.html#connectors-overview","title":"Connectors Overview","text":"<p>The Following Illustration shows the connections on the BMU</p> <p></p> BMU Connectors <p>Refer to the relevant sections of this document for more details on the pinout and wiring for each connector </p>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Battery_Management_Unit/index.html#isolation","title":"Isolation","text":"<p>The HV Sense connection is isolated from the remainder of the BMU with an isolation barrier rated for 1000V DC.  This allows the HV battery pack to be fully floating from the vehicle chassis, as is required by most EV construction standards (eg NCOP14 in Australia). </p> <p>The remainder of the BMU operates relative to the GND supplied along the CAN bus connection, and this must be tied to the vehicle chassis at some point in the system. </p>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Battery_Management_Unit/index.html#indicators","title":"Indicators","text":"<p>The output status of the three contactor drives, fan outputs, and CMU CAN bus power are all indicated with green LEDs at the edge of the BMU adjacent to the relevant connector.    </p> <p>Other indications and faults can be observed using the Windows PC software via the CAN-Ethernet bridge, or by any other device on the CAN bus that is programmed to receive status messages from the BMS. </p>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Battery_Management_Unit/Connectors/Contactors.html","title":"Contactors","text":"<p>The BMU provides three outputs for driving HV contactors with 12V coils.  At a minimum Contactors 1 &amp; 2 are required for pack safety, although this option still presents a shock hazard (via the precharge resistor) in a single-fault situation to the rest of the system.  A professional design will use all three contactors.   </p> <p>The contactors are energised in sequence (1, 3, 2) during precharge, and de-energised when shutting down the system both under user command and due to a fault being detected by the BMS.  The BMU operates the contactors to protect the cells above all other priorities. </p> <p>Each contactor output connector also has pins for feedback from contactors with auxiliary sense contacts.  These can be used by the BMU to detect failed contactors, both failed open or welded shut.  Do not connect these pins to anything other than auxiliary contact output terminals \u2013 they are not rated for anything more than the 12V supplied by the BMU. </p> <p>Contactors without integrated electronics must have a diode fitted across their coil terminals to limit flyback voltage at turn-off.   </p>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Battery_Management_Unit/Connectors/Contactors.html#contactor-selection","title":"Contactor Selection","text":"<p>The three contactors used to break the HV DC connections must be appropriately rated for the currents and voltages seen during both normal use and during fault situations.  Typical parts used in automotive sized packs are the Tyco EV200 or the Gigavac GX11 or GX12 series.  Selection of these parts is beyond the scope of this document. </p>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Battery_Management_Unit/Connectors/Contactors.html#contactor-12v-supply-connector","title":"Contactor 12V Supply Connector","text":"<p>The connector used for the Contactor 12V supply input is a 2-way 4.2mm pitch Molex MiniFit Jr connector.  The pinout is shown below, as viewed from the wire side \u2013 as you would look at it while inserting crimps. </p> <p></p> BMU Connectors <p></p> Contactor 12V Input Connector <p>This connection should be wired to the vehicle 12V DC supply via the emergency stop switch (if fitted), the G-force impact switch, an optional HV disable switch, and a fuse.  It requires a low impedance connection to the vehicle battery, since most contactors draw a large current inrush during turn-on, and a poor connection will result in contactor chattering and/or precharge fault trips.   </p> <p>This connection draws no current when the BMS is in the off state, and does not have to be routed via the ignition key.  Connecting it to a permanent source of power (rather than via the ignition key) allows the BMS to operate the contactors without the ignition key switched on, for example during charging. </p>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Battery_Management_Unit/Connectors/Contactors.html#contactor-output-connectors","title":"Contactor Output Connectors","text":"<p>The connectors used for the Contactor drive outputs are a 4-way 4.2mm pitch Molex MiniFit Jr connector.  The pinout is shown below, as viewed from the wire side \u2013 as you would look at it while inserting crimps. The colours shown match those used by the Gigavac GX11 and GX12 family of contactors. </p> <p></p> BMU Connectors <p></p> Contactor Output Connector"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Battery_Management_Unit/Connectors/Fan_Pump_Control.html","title":"Fan / Pump Control","text":"<p>The BMU provides two 12V switched outputs to drive pack fans and pumps.  These are provided on a standard 3-pin KK connector as used in PCs and other IT equipment.  Both outputs are switched together, ie both on or both off. </p> <p>The 12V to power these outputs is sourced from the contactor supply input connection. Refer to the datasheet for current and voltage ratings for these outputs. </p> <p>Both connections provide a speed sensor input pin, and this is measured by the BMU and reported as an rpm number for each connection on the CAN bus telemetry.  It assumes a 2 pulse per revolution sensor output, as is commonly used for most PC cooling fans. </p> <p>The BMS firmware switches both outputs on when the BMS is in Run mode (once precharge has completed and the system is fully operational). </p>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Battery_Management_Unit/Connectors/Fan_Pump_Control.html#fan-pump-connectors","title":"Fan / Pump Connectors","text":"<p>The connector used for the pump/fan outputs is a 3-way 2.54mm pitch Molex KK connector.  The pinout is shown below, as viewed from the wire side \u2013 as you would look at it while inserting crimps.   </p> <p></p> BMU Connectors <p></p> Fan / Pump Connector <p>The pinout follows the standard used for PC cooling fans and pumps, as found on any computer motherboard or peripheral.  Please note that the wire colours used on fans and pumps varies with each manufacturer. </p>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Battery_Management_Unit/Connectors/High_Voltage_Sense.html","title":"High Voltage Sense","text":"<p>The HV Sense connector allows the BMU to measure the total pack voltage (pack side of the contactors), total DC bus voltage (vehicle side of the contactors), and total pack current flow.  This information is used to control precharge and pack safety, and to calculate pack Amp-Hours (Ah) usage and SOC. </p> <p>The BMU provides a mechanism for measuring pack current using a resistive shunt.  This is preferred over hall-effect based sensors as it provides much lower drift, allowing more accurate State of Charge (SOC) integration calculation.   </p> <p>The HV Sense connector and associated electronics are isolated from the remainder of the BMU.  Take care when routing wiring around this connector to maintain good isolation between it and the rest of the vehicle system. </p> <p>Wire the Vehicle HV+ and Battery HV+ sense wires to their respective sides of Contactor 2 in the positive rail.  Wire the Battery HV\u2013 and Shunt sense wires to their respective sides of the current shunt in the negative rail.  Refer to the BMS wiring diagram in the Appendix for more details.   </p> <p>Please note that this sense wiring must be rated for the full pack voltage, although it is low current so a small gauge wire can be used.  Check the relevant wiring standards regarding wire rating and colours, for example NCOP14 (in Australia) specifies Orange wire for all battery pack and other HV system wiring. </p> <p>The Battery HV\u2013 and Shunt sense wires should be twisted together to minimise noise pickup between the BMU and the shunt.  It is suggested to have these wires no longer than 300-400mm. </p>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Battery_Management_Unit/Connectors/High_Voltage_Sense.html#high-voltage-sense-connector","title":"High Voltage Sense Connector","text":"<p>The connector used for the HV Sense is a 10-way 4.2mm pitch Molex MiniFit Jr connector.  The pinout is shown below, as viewed from the wire side \u2013 as you would look at it while inserting crimps.  The colours shown match those recommended in most EV wiring standards for HV DC wiring. </p> <p></p> BMU Connectors <p></p> High Voltage Sense Connector Sense Location <code>Vehicle HV+ Sense</code> Vehicle side of Contactor 2 <code>Battery HV+ Sense</code> Battery side of Contactor 2 <code>Battery HV- Sense</code> Battery side of 25mV Shunt <code>Shunt A</code> Vehicle side of 25mV Shunt <code>Shunt B</code> Battery side of 25mV Shunt"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Battery_Management_Unit/Connectors/High_Voltage_Sense.html#hv-sense-fusing","title":"HV Sense Fusing","text":"<p>All HV Sense connections should be fused with an appropriately rated fuse for the type of wire used for the sense connection.  This fuse should be low current (since the sense wiring uses small wires) and rated for the full DC pack voltage.  The fuse should be located towards the supply end of the sense wiring. See Fusing. </p>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Battery_Management_Unit/Connectors/High_Voltage_Sense.html#shunt-selection","title":"Shunt Selection","text":"<p>The BMU Shunt Sense input has a full-scale range of \u00b125mV, relative to the Battery HV\u2013 Sense input.  This allows the use of a standard 50mV shunt running at half its rated current to minimise heat buildup and thermal drift effects, since it will be installed inside the battery pack.   </p> <p>Choose a full-scale range slightly over the expected maximum battery current.  As an example, a Prohelion WaveSculptor200 motor controller driving an induction motor may have an expected maximum power consumption of 90kW.  At a 400V battery voltage, this is 225A.  Choose a full scale of 250A to allow some headroom on the measurement.  Since we wish to use a standard 50mV shunt at half rating, you would therefore select a 500A/50mV shunt. </p> <p>The value of the shunt can be set in the user-interface software. </p>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Battery_Management_Unit/Connectors/Relay_Output.html","title":"Relay Output","text":"<p>The BMU provides a voltage-free relay output to use for signalling devices in the vehicle that are not capable of receiving CAN bus data.  This can be used, for example, to control the 'enable' input of a DC/DC converter or drive a relay or HV contactor.   A coil suppression diode must be used if driving this type of load. </p> <p>The relay is active when the BMS is in Run mode.   </p> <p>The connector also provides 12V and GND pins, which are sourced from the 12V contactor supply power.  These can be conveniently used in conjunction with the relay to switch 12V out to a load that requires power, for instance to drive another relay, fan or contactor. </p>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Battery_Management_Unit/Connectors/Relay_Output.html#relay-output-connector","title":"Relay Output Connector","text":"<p>The connector used for the Relay output is a 6-way 4.2mm pitch Molex MiniFit Jr connector.  The pinout is shown below, as viewed from the wire side \u2013 as you would look at it while inserting crimps.   </p> <p></p> BMU Connectors <p></p> 6 way, 4.2mm pitch Molex Minifit Jr Connector <p>The +12V and Ground pins in this connector are wired (on the BMU PCB) to the Contactor 12V supply connector, and can be jumpered across to the relay pins to provide 12V output on relay active or inactive, switch loads to ground, etc, depending on the jumper arrangement. </p> <p>The Relay pins in this connector are wired directly to a small relay on the BMU PCB.</p>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Cell_Management_Unit/index.html","title":"Cell Management Unit","text":"<p>The Cell Management Unit connects to the battery cells and reads voltage and temperature information, which it relays via CAN Bus back to the Battery Management Unit.</p> <p></p> Prohelion Cell Management Unit"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Cell_Management_Unit/index.html#form-factor","title":"Form Factor","text":"<p>The Cell Management Unit (CMU) is supplied as a 1.6mm thickness Printed Circuit Board (PCB), conformally coated, without an enclosure.  It is designed to be installed inside the battery box, in a weather-sealed area, along with the cells themselves.  This means that all connections to the cells remain inside the battery pack enclosure, simplifying fusing and wiring installation requirements.   </p>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Cell_Management_Unit/index.html#installation","title":"Installation","text":"<p>The CMU should be mounted to a flat surface, using at least four M3 fasteners, with the supplied piece of insulation material between the CMU and the surface.  The CMU will operate at a much lower temperature when balancing if the mounting surface is a thermally conductive material such as aluminium or steel, and it is strongly recommended to install the CMUs on a surface such as this.  CMUs should not be stacked together, as they will overheat. </p> <p>For a professional installation, press-fit M3 studs (eg PEM FHS-M3-10) can be installed in the wall of the box prior to fitting the CMUs.  The insulating sheet and CMU are then installed over the studs, and retained in place with Nyloc nuts. </p> <p>Wiring should be appropriately strain relieved to withstand the vibration typically found in an automotive environment \u2013 do not support the weight of the wiring loom solely from the connectors on the CMU. </p>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Cell_Management_Unit/index.html#dimensions","title":"Dimensions","text":"Prohelion CMU Dimensions <p>The following illustration shows the connections and indicators on the CMU:</p> <p></p> Prohelion CMU Connectors"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Cell_Management_Unit/index.html#isolation","title":"Isolation","text":"<p>The CMU is isolated from the CMU CAN bus, and therefore from the vehicle chassis and other CMUs, with an isolation barrier rated for 1000V DC.  This allows the HV battery pack to be fully floating from the vehicle chassis, as is required by most EV construction standards (eg NCOP14 in Australia).</p> <p>This isolation barrier rating is only valid if the correct insulation material is installed between the CMU and the surface it is mounted on. </p> <p>As the CMU CAN bus operates relative to the vehicle chassis, the CMU CAN ribbon cable should be kept isolated from the cells and cell sense wiring with a rating of at least the full voltage of the battery pack. </p>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Cell_Management_Unit/index.html#voltage-rating","title":"Voltage Rating","text":"<p>The CMU voltage sense inputs are rated for a maximum of 5V per cell.  Therefore, there must not be any breaks in the main battery string (from contactors, fuses, or service links) among the set of up to eight cells that are measured by a CMU, as a high voltage may be seen across this break when it is open, and destroy the CMU.  Any breaks must be located between CMUs. </p>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Cell_Management_Unit/index.html#indicators","title":"Indicators","text":"<p>The green LED on the CMU flashes to indicate that the CMU has power (via the CMU CAN bus) and the microcontroller is operating. </p> <p>The red LED illuminates when any of the eight cells are balancing.  This LED illuminating is not a fault condition. </p>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Cell_Management_Unit/index.html#cmu-can-bus","title":"CMU CAN Bus","text":"<p>The CMUs and BMU communicate via CAN bus at a fixed 125kbit/s rate, running over standard 1.27mm pitch 10-way IDC ribbon cable.  The BMU supplies 12V power to the CMUs along this cable. </p> <p>As a CAN bus, this cable requires termination of the CAN-H and CAN-L signals together at both ends of the network.  Use the supplied CMU CAN termination boards to do this. </p> <p>Use a single length of cable to join all CMUs, the BMU, and both termination resistors together.  This can easily be achieved by crimping on a standard 10-way IDC crimp as the cable passes each device.   </p> <p>Pin 1 on each device is indicated by an arrow and the numeral '1' on the PCB, and/or an arrow moulded in the connector. </p> <p>Make sure that the ribbon is oriented correctly on all devices:  Pin 1 should join to Pin 1 on every other device, and should also be the polarity indication on the ribbon cable, usually a red stripe. </p> <p>Info</p> <p>The CMU CAN bus cable is electrically connected to vehicle ground at the BMU, and therefore must be kept physically separated from any battery or other HV connections to at least the maximum voltage rating of the pack. </p>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Cell_Management_Unit/Trusted_Cell_Voltages.html","title":"Trusted Cell Voltages","text":"<p>The CMUs measure their cell voltages using two separate front-end circuits, A/D converters, and voltage references.  One channel records with a high resolution 24-bit converter at a slow 2 Hz rate.  The other channel uses a mid resolution 12-bit converter running at several kHz.  These are cross-checked against each other to verify that the CMU is functioning correctly and that the cell voltage measurement can be trusted. </p> <p>Measurements reported on the CAN bus telemetry come from the high resolution channel.   </p> <p>Measurements where the two channels do not agree are flagged as untrusted.  If any cells report an untrusted measurement, the BMU will report a TRUST error on the CAN bus.  This is not treated as a fatal error, and will not result in a pack shutdown. </p> <p>The threshold where a trust error is generated is set in the BMU config, and is currently factory set to 100mV. </p> <p>Please note that due to the different response rates of the two A/D converters, it is possible to get a trust error briefly during sharp voltage transients on the cells, for instance during rapid acceleration or regen braking events.  Whatever higher-level vehicle system is handling BMS telemetry and user interface should be programmed to ignore trust errors that are present for less than some period (eg 500ms) of time. </p>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Cell_Management_Unit/Connectors/CAN_Bus.html","title":"CMU CAN Bus Connector","text":"Prohelion CMU Connectors <p>The CMUs and BMU communicate via CAN bus at a fixed 125kbit/s rate, running over standard 1.27mm pitch 10-way IDC ribbon cable.  The BMU supplies 12V power to the CMUs along this cable. </p> <p>As a CAN bus, this cable requires termination of the CAN-H and CAN-L signals together at both ends of the network.  Use the supplied CMU CAN termination boards to do this. </p> <p>Use a single length of cable to join all CMUs, the BMU, and both termination resistors together.  This can easily be achieved by crimping on a standard 10-way IDC crimp as the cable passes each device.   </p> <p>Pin 1 on each device is indicated by an arrow and the numeral '1' on the PCB, and/or an arrow moulded in the connector. </p> <p>Make sure that the ribbon is oriented correctly on all devices:  Pin 1 should join to Pin 1 on every other device, and should also be the polarity indication on the ribbon cable, usually a red stripe. </p> <p>Info</p> <p>The CMU CAN bus cable is electrically connected to vehicle ground at the BMU, and therefore must be kept physically separated from any battery or other HV connections to at least the maximum voltage rating of the pack. </p>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Cell_Management_Unit/Connectors/Cell_Voltage_And_Temp.html","title":"Cell Voltage &amp; Temperature Sense Connector","text":"Prohelion CMU Connectors <p>The connector used for the Cell Voltage Sense is a 12-way single-row 3mm pitch Molex MicroFit connector.  The pinout is shown below, as viewed from the wire side \u2013 as you would look at it while inserting crimps.  The colours shown match those used in the recommended cable. </p> <p></p> Prohelion CMU Cell Voltage and Temp Sensor <p>Please refer to the associated Assembly Procedure document for detailed procedures on making the cell sense wiring harness. </p> <p>The recommended cell temperature sensor to use is a Murata 10k NTC bead type thermistor (NXFT15XH103FA2B100) with 100mm leads. The thermistor should be attached to a part of the cell that is a good representation of the internal temperature, such as a cell terminal (Care MUST be taken that the sensor is appropriately insulated from the terminal). </p>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Cell_Management_Unit/Wiring_Harness/index.html","title":"CMU Cell Sense Wiring Assembly Procedure","text":"<p>This document describes how to make the cell voltage sense wiring harness for the Prohelion 8-cell Cell Management Unit (CMU).  The examples shown are for 60Ah prismatic type LiFePO4 cells, although the procedure will be similar for other shapes and sizes of cell.  </p> <p>Please read through the entire assembly procedure, as well as the BMS User's Manual before commencing work.</p> <p>Working Around Batteries in Dangerous</p> <p>Not only are lethal high voltages present, but individual cells can also put out thousands of amps when shorted, for example with a stray wire or dropped tool, throwing out arcs and molten metal.</p> <ul> <li>Check the legal requirements in your jurisdiction for using licensed technicians for this type of work.</li> <li>Wear eye protection! Use insulated tools! Take extreme caution!</li> <li>Go slow. think through every step before doing it.</li> </ul> <p>The 8-cell CMU has the connections for the cell voltage and temperature sensing at one end of the circuit board.  The CAN bus ribbon cable connector is at the other end of the board.  </p> <p>The CMU is shown below:</p> <p></p> Prohelion CMU <p>The cell sense connector is a 12-way 3mm Molex Microfit connector, with locking ramp.  8 pins are used for cell voltage sensing, one pin for cell ground, and two for a temperature sensing thermistor, leaving one pin unused.  </p> <p>The mating housing is Molex part number 43645-1200, and the 20-24 AWG crimps part number is 43030-0007. One housing and 11 crimps are required per CMU.  </p> <p>The pinout is shown below, as viewed from the wire side \u2013 as you would look at it while inserting crimps.  The colours shown match those used in the recommended cable.</p> <p></p> Prohelion CMU Connectors <p>The CMU senses anywhere from one to eight cells.  Cell 0 must always be the first cell connected with Cell 0\u2013 connected to its negative terminal.  If one cell is being monitored, it should be connected to Cell 0; if two are monitored, they should be connected to Cell 0 and Cell 1, and so on.  </p> <p>The temperature sensor must be electrically isolated from the cells, and would normally be positioned to monitor the temperature of Cell 0.  Gluing the thermistor to the cell or cell terminal is usually the most convenient option.</p> <p>Schematically, the connections are shown in the following diagram, which shows one full 8-cell CMU (CMU 1), and one CMU monitoring four cells (CMU 2).  Note the connection order to the CMU, this is done to simplify the wiring layout in later steps.</p> <p></p> CMU Thermistors"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Cell_Management_Unit/Wiring_Harness/index.html#suitable-cables-for-wiring-harness","title":"Suitable Cables For Wiring Harness","text":"<p>The cell voltage sense harness should be wired with cable rugged enough to tolerate some abrasion due to vibration in the battery pack, with a voltage rating of several hundred volts (in case it touches a cell further along the series string) and with a resistance such that the balance current won't cause significant changes in the cell voltage reading.  It should be small enough diameter to fit into the microfit housing and crimps, but not too small to crimp into the ring terminals that connect to the cell.  </p> <p>Prohelion has identified a suitable cable as part from Pro Power, part number 05B91510.  This is the cable used in the pictures for the next section of this document.</p> <p>The ring terminals used to connect to the cell should be suitable for the cable chosen.  Doubling the stripped cable over may bring it up to a suitable size for a wider selection of terminals.</p>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Cell_Management_Unit/Wiring_Harness/Assembly_Procedure.html","title":"Assembly Procedure","text":""},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Cell_Management_Unit/Wiring_Harness/Assembly_Procedure.html#assembly-jig","title":"Assembly Jig","text":"<p>Making an assembly jig with bolts at the same spacing as the battery terminals is a good idea, saving the danger of working around high power cells.</p>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Cell_Management_Unit/Wiring_Harness/Assembly_Procedure.html#cut-to-length","title":"Cut to Length","text":"<p>Work out where you want the CMU to be located.  It should be fastened to the wall of the battery box to aid in heatsinking, with the supplied insulation material, as outlined in the BMS User's Manual</p> <p>The appropriate length of cable has been placed on the assembly jig and cut to length in the following photo:</p> <p></p> Cut to length"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Cell_Management_Unit/Wiring_Harness/Assembly_Procedure.html#mark-for-trimming","title":"Mark For Trimming","text":"<p>The reason for choosing the pinout of the voltage sense connector on the CMU is to make the wiring harness simpler and neater.  Each wire branches out from the edge of the ribbon, with the ribbon being trimmed down narrower as it approaches Cell 7.  The following picture shows the cut points for trimming marked onto the cable.  </p> <p>The Brown wire is not used, and can be removed completely and used for the thermistor wiring.  The Red wire branches out to Cell 0+, and the Black to Cell 0\u2013.  The White wire to Cell 1+, Orange to Cell 2+, and so on.  Each cut will be one wire deeper into the ribbon.</p> <p></p> Trimming Marks"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Cell_Management_Unit/Wiring_Harness/Assembly_Procedure.html#trim","title":"Trim","text":"<p>Cut in on the marks, and then from the marks to the end of the ribbon.  The cut pieces can then be removed, as shown below:</p> <p></p> Trimming"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Cell_Management_Unit/Wiring_Harness/Assembly_Procedure.html#split-branches","title":"Split Branches","text":"<p>Cut back along from each mark by one cell length, and split the resulting stub off in the direction of each cell, as shown below:</p> <p></p> Split Branches"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Cell_Management_Unit/Wiring_Harness/Assembly_Procedure.html#separate-cmu-end","title":"Separate CMU End","text":"<p>Cut the cable back between strands by 10mm or so at the CMU end, to allow fitting the microfit connector.</p> <p></p> Separate CMU End"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Cell_Management_Unit/Wiring_Harness/Assembly_Procedure.html#strip-branches","title":"Strip Branches","text":"<p>Strip around 10mm from the end of each branch, to allow folding back on itself and therefore obtaining a better crimp (double copper into crimp).</p> <p></p> Strip Branches <p>Fold back the stripped length, as shown below:</p> <p></p> Fold Back Stripped Length <p>Use the proper crimp tool to crimp on the ring terminals for the cell connections.</p>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Cell_Management_Unit/Wiring_Harness/Assembly_Procedure.html#fit-microfit-crimps","title":"Fit Microfit Crimps","text":"<p>Strip back the CMU end of the cable by 2 \u2013 2.5mm and use the correct tool to crimp on the molex crimps.  Pay careful attention to which way is 'up' when orienting the crimps and the housing.  The following photo shows the correct relationship. Refer to Appendix B for component sources and Appendix C for crimping instructions.</p> <p></p> Fit Microfit Crimps"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Cell_Management_Unit/Wiring_Harness/Assembly_Procedure.html#add-thermistor-wiring","title":"Add Thermistor Wiring","text":"<p>Use one of the offcuts from the previous steps to make a two-wire cable to the thermistor, and crimp it into the microfit connector in the appropriate location.</p>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Cell_Management_Unit/Wiring_Harness/Assembly_Procedure.html#check-harness","title":"Check Harness","text":"<p>Use a multimeter to check resistance between adjacent pins in the microfit connector.  There should be no connection between any terminals.  </p>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Cell_Management_Unit/Wiring_Harness/Assembly_Procedure.html#fit-to-battery-pack","title":"Fit to Battery Pack","text":"<p>Fit the harness to your battery pack.  The ring terminals should be above the main high-current busbars, so that they do not have traction pack currents flowing through them.  Use spring or belleville washers so that the connections to the cells remain tight, even with vibration and thermal expansion.  </p> <p>Consider using a contact grease or jointing compound, as described in the Prohelion WaveSculptor200 User Manual high-current wiring Appendix.</p>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Communications_Protocol/index.html","title":"BMS Communications Protocol","text":"<p>This document describes the communications protocol used between the Battery Management Unit (BMU) and the controller (such as a vehicle control system) in the Prohelion Battery Management System (BMS) D1000 Gen1.  </p> <p>Internal communications between the BMS BMU and BMS CMUs are available from Prohelion Support but should not be needed for a typical end-user.  If you require this protocol information, please log a support request via the Prohelion Support System.</p> <p>The BMS CMUs communicate with each other and with the BMU using a CAN bus that is separate from the main system CAN bus.</p> <p>The BMU collates and summarises data from the CMUs, including minimum and maximum cell voltages and temperatures, and interfaces to the vehicle on a second CAN bus.  This is the communications link detailed in this document.</p> <p>As a general overview, after power is applied to the system, the CMUs report their (factory programmed) serial numbers to the BMU.  The BMU allocates a CAN ID and number of cells to monitor for each CMU and builds a table of CMUs that can be used for fault detection (failed CMUs) and other diagnostics.  </p> <p>Once running, each CMU reports its serial number, status, temperature and up to eight cell voltages at approximately 1Hz.  Support for high-speed minimum/maximum voltage updates (~100Hz) is currently being added and is not detailed in this document.</p> <p>The CMUs use two redundant measurement channels to take cell voltage readings and cross-check their supply voltage and A/D references for faults.  One channel uses a high-accuracy (24-bit) slow speed (Hz) converter, and the other channel uses a high-speed (kHz) mid-accuracy (12-bit) converter.  Each CMU also measures one external 10k NTC temperature sensor and its own microcontroller die temperature.</p> <p>The BMU measures additional data itself: total pack voltage on either side of the pre-charge contactor, total pack current from a shunt, pack isolation from the vehicle, the status of the pre-charge control, and the presence of the 12V supply voltage for the contactors.  </p> <p>This data, along with the minimum and maximum cell voltage and temperature, is reported by the BMU onto the main system CAN bus.  </p> <p>The BMU can also echo the individual cell voltage and temperature data to the main system CAN bus, if configured to do so.</p>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Communications_Protocol/CAN_Bus_Network.html","title":"CAN Bus Network","text":"<p>The CAN bus is structured as a linear network, with short stubs branching from 'T' connectors on the main bus backbone to each device.  The CAN bus data lines must be terminated at each end of the main bus with 120 ohm resistors between the CAN-H and CAN-L signals. </p> <p>In the range of Prohelion EV products, including EV Driver Controls and BMU, the CAN connections are implemented with an 'in' and an 'out' connector, therefore placing the 'T' on the device, resulting in a very short fixed-length stub on the circuit board of each device.  This is ideal from a signal integrity and network performance point of view. </p> <p></p> CAN Network Topology <p>The BMU uses the CAN bus network to receive operating and configuration commands and transmit telemetry, as well as a source of low-voltage DC power to operate the electronics. </p>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Communications_Protocol/CAN_Bus_Network.html#can-wiring","title":"CAN Wiring","text":"<p>The CAN data lines (CAN-H and CAN-L) must be implemented with twisted-pair wire for proper data integrity.  The wire should have a characteristic impedance of 120 ohms.   </p> <p>Power should also be provided along the CAN cable, ideally with another twisted pair to minimise noise pickup.  An overall shield can also be advantageous.   </p> <p>The optimal choice of cable is 7mm Devicenet CANbus 'thin' cable, with 24AWG (data) + 22AWG (power) twisted pairs and a braided shield.  Using this cable will result in a robust installation, with high immunity to noise, low voltage drop in the power cable, and reliable CAN communications.  Using alternative cabling will usually result in problems during operation. </p>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Communications_Protocol/CAN_Bus_Network.html#can-bus-connectors","title":"CAN Bus Connectors","text":"<p>The connector used on the BMU and other Prohelion devices for the CAN connection is a 6-way 3mm pitch Molex MicroFit connector.  The pinout is shown below, as viewed from the wire side \u2013 as you would look at it while inserting crimps.  The colours shown match those in the standard DeviceNet CAN cabling pairs. </p> <p></p> DeviceNet CAN Cabling Pairs"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Communications_Protocol/CAN_Bus_Network.html#can-shielding","title":"CAN Shielding","text":"<p>If the recommended braided shield is used in the cable, then terminate it to the SHIELD pin (lower-left corner on the connector) on both CAN IN and CAN OUT connectors on each device.   </p> <p>On one device only in the network, instead of using the SHIELD pin, terminate the shield to the SHIELD GROUND pin (upper-left corner on the connector) on both CAN IN and CAN OUT connectors, to ground the shield for the entire network at this single point.  The usual place to do this is where power is fed into the network, typically at Prohelion's EV Driver Controls product. </p>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Communications_Protocol/CAN_Bus_Network.html#can-termination","title":"CAN Termination","text":"<p>To implement the required 120 Ohm termination resistor at each end of the CAN bus, plug a connector into the unused CAN connector on the last device at each end of the network with a resistor crimped into the appropriate locations. </p>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Communications_Protocol/CAN_Bus_Network.html#communication","title":"Communication","text":"<p>The CAN standard does not specify high-level message protocols. Prohelion devices use a custom protocol, outlined in the communication specification document for each device. </p> <p>By default, each device operates at 500 kbits/second and comes programmed from the factory with a CAN base address that will allow it to work in unison with other Prohelion devices. The CAN bit rate and base address can be set with the Windows BMS configuration software. </p>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Communications_Protocol/CAN_Bus_Network.html#power-supply","title":"Power Supply","text":"<p>The BMS electronics operate from 12V supplied on the CAN bus connector, which is switched on by the Prohelion EV Driver Controls when it is in accessories or run key switch positions.   </p> <p>A second high-current 12V supply connection is present for contactor and fan operating power, refer to the precharge section of this document for more details.  The CAN Ground and Contactor Supply Ground must be both tied to the vehicle chassis at some point in the system. </p> <p>The allowable voltage range for both supplies is 10-15V. </p>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Communications_Protocol/CAN_ID_Allocations_And_Format.html","title":"CAN ID Allocations","text":"<p>By default, the BMS BMU ships with a CAN base ID set to 0x600.  This can be adjusted by the end user.  Assuming this base ID, the following CAN IDs are used on the vehicle bus by the BMS BMU:</p> CAN ID (hex) Description <code>0x600</code> BMU heartbeat &amp; serial number <code>0x601 - 0x6EF</code> CMU Status, temperature, and voltage telemetry, if set to relay to vehicle <code>0x6F0</code> Reserved for factory configuration &amp; calibration commands <code>0x6F1 - 0x6F3</code> Reserved for future configuration system update <code>0x6F4</code> Pack SoC <code>0x6F5</code> Balance SoC <code>0x6F6</code> Charger Control information <code>0x6F7</code> Pre-charge status, 12V status <code>0x6F8</code> Minimum / Maximum cell voltage <code>0x6F9</code> Minimum / Maximum cell temperature <code>0x6FA</code> Battery pack voltage &amp; current <code>0x6FB</code> Battery pack status <code>0x6FC</code> Fan &amp; 12V supply status <code>0x6FD</code> Extended battery pack status <code>0x6FE - 0x6FF</code> Reserved, currently unused <code>0x7F0 - 0x7F4</code> Reserved for bootloader triggering and data transfer (these IDs do not move with a change in BMU CAN Base ID)"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Communications_Protocol/CAN_ID_Allocations_And_Format.html#data-format","title":"Data Format","text":"<p>The 8-byte data on the CAN bus is formatted using a 'union' overlay structure in the BMS CMU microcontroller firmware.  </p> <p>Note: this depends on the byte ordering and word size of the CPU and is not portable across architectures \u2013 however the byte order is correct for both the MSP430 microcontroller in the CMUs and BMU and the x86 CPU in a PC.</p> <p>The structure is defined on the (16-bit) MSP430 as follows:</p> <pre><code>typedef union _group_64 {\n    float data_fp[2];\n    unsigned char data_u8[8];\n    char data_8[8];\n    unsigned int data_u16[4];\n    int data_16[4];\n    unsigned long data_u32[2];\n    long data_32[2];\n} group_64;\n</code></pre> <p>Data values data_u8[0] through to data_u8[7] are the bytes transmitted on the CAN bus.</p>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Communications_Protocol/DBC.html","title":"Prohelion D1000 Gen 1 DBC","text":"<p>The following DBC file can be used to decode the CAN Packets transmitted by this device.</p> <pre><code>VERSION \"\"\n\n\nNS_ : \n    NS_DESC_\n    CM_\n    BA_DEF_\n    BA_\n    VAL_\n    CAT_DEF_\n    CAT_\n    FILTER\n    BA_DEF_DEF_\n    EV_DATA_\n    ENVVAR_DATA_\n    SGTYPE_\n    SGTYPE_VAL_\n    BA_DEF_SGTYPE_\n    BA_SGTYPE_\n    SIG_TYPE_REF_\n    VAL_TABLE_\n    SIG_GROUP_\n    SIG_VALTYPE_\n    SIGTYPE_VALTYPE_\n    BO_TX_BU_\n    BA_DEF_REL_\n    BA_REL_\n    BA_DEF_DEF_REL_\n    BU_SG_REL_\n    BU_EV_REL_\n    BU_BO_REL_\n    SG_MUL_VAL_\n\nBS_:\n\nBU_: ProhelionBMU\n\n\nBO_ 1536 HeartbeatSerialNumber: 8 ProhelionBMU\n SG_ SerialNumber : 32|32@1- (1,0) [0|0] \"\" Vector__XXX\n SG_ DeviceId : 0|32@1+ (1,0) [0|0] \"\" Vector__XXX\n\nBO_ 1789 ExtendedPackStatus: 8 ProhelionBMU\n SG_ StatusCmuExtraCell : 12|1@1+ (1,0) [0|1] \"On / Off\" Vector__XXX\n SG_ StatusContactorStuck : 11|1@1+ (1,0) [0|1] \"On / Off\" Vector__XXX\n SG_ Status12vSupplyLow : 10|1@1+ (1,0) [0|1] \"On / Off\" Vector__XXX\n SG_ StatusSOCMeasurementInvalid : 9|1@1+ (1,0) [0|1] \"On / Off\" Vector__XXX\n SG_ StatusPackIsolationTestFail : 8|1@1+ (1,0) [0|1] \"On / Off\" Vector__XXX\n SG_ StatusCmuCanBusPower : 7|1@1+ (1,0) [0|1] \"On / Off\" Vector__XXX\n SG_ StatusBMUSetupMode : 6|1@1+ (1,0) [0|1] \"On / Off\" Vector__XXX\n SG_ StatusVehicleCommsTimeout : 5|1@1+ (1,0) [0|1] \"On / Off\" Vector__XXX\n SG_ StatusCmuCommsTimeout : 4|1@1+ (1,0) [0|1] \"On / Off\" Vector__XXX\n SG_ StatusMeasurementUntrusted : 3|1@1+ (1,0) [0|1] \"On / Off\" Vector__XXX\n SG_ StatusCellOverTemp : 2|1@1+ (1,0) [0|1] \"On / Off\" Vector__XXX\n SG_ StatusCellUnderVolt : 1|1@1+ (1,0) [0|1] \"On / Off\" Vector__XXX\n SG_ StatusCellOverVolt : 0|1@1+ (1,0) [0|1] \"On / Off\" Vector__XXX\n SG_ Unused16 : 48|16@1+ (1,0) [0|0] \"\" Vector__XXX\n SG_ BmuModelId : 40|8@1+ (1,0) [0|0] \"\" Vector__XXX\n SG_ BmuHardwareVersion : 32|8@1+ (1,0) [0|0] \"\" Vector__XXX\n\nBO_ 1788 FanStatus: 8 ProhelionBMU\n SG_ CmuCurrent : 48|16@1+ (1,0) [0|0] \"mA\" Vector__XXX\n SG_ FanAndContactorsCurrent : 32|16@1+ (1,0) [0|0] \"mA\" Vector__XXX\n SG_ FanSpeed1 : 16|16@1+ (1,0) [0|0] \"rpm\" Vector__XXX\n SG_ FanSpeed0 : 0|16@1+ (1,0) [0|0] \"rpm\" Vector__XXX\n\nBO_ 1787 BatteryPackStatus: 8 ProhelionBMU\n SG_ StatusCmuCanBusPower : 39|1@1+ (1,0) [0|1] \"On / Off\" Vector__XXX\n SG_ StatusBMUSetupMode : 38|1@1+ (1,0) [0|1] \"On / Off\" Vector__XXX\n SG_ StatusVehicleCommsTimeout : 37|1@1+ (1,0) [0|1] \"On / Off\" Vector__XXX\n SG_ StatusCmuCommsTimeout : 36|1@1+ (1,0) [0|1] \"On / Off\" Vector__XXX\n SG_ StatusMeasurementUntrusted : 35|1@1+ (1,0) [0|1] \"On / Off\" Vector__XXX\n SG_ StatusCellOverTemp : 34|1@1+ (1,0) [0|1] \"On / Off\" Vector__XXX\n SG_ StatusCellUnderVolt : 33|1@1+ (1,0) [0|1] \"On / Off\" Vector__XXX\n SG_ StatusCellOverVolt : 32|1@1+ (1,0) [0|1] \"On / Off\" Vector__XXX\n SG_ BmsBmuFirmwareBuildNo : 48|16@1+ (1,0) [0|0] \"\" Vector__XXX\n SG_ BmsCmuCount : 40|8@1+ (1,0) [0|0] \"\" Vector__XXX\n SG_ VoltageThresholdFalling : 16|16@1+ (1,0) [0|0] \"mV\" Vector__XXX\n SG_ VoltageThresholdRising : 0|16@1+ (1,0) [0|0] \"mV\" Vector__XXX\n\nBO_ 1786 PackVoltageCurrent: 8 ProhelionBMU\n SG_ Current : 32|32@1- (1,0) [0|0] \"mA\" Vector__XXX\n SG_ Voltage : 0|32@1+ (1,0) [0|0] \"mV\" Vector__XXX\n\nBO_ 1785 MinMaxCellTemp: 8 ProhelionBMU\n SG_ Unused8_2 : 56|8@1+ (1,0) [0|0] \"\" Vector__XXX\n SG_ Unused8 : 40|8@1+ (1,0) [0|0] \"\" Vector__XXX\n SG_ MaxCellTempCMU : 48|8@1+ (1,0) [0|0] \"\" Vector__XXX\n SG_ MinCellTempCMU : 32|8@1+ (1,0) [0|0] \"\" Vector__XXX\n SG_ MaxCellTemp : 16|16@1+ (0.1,0) [0|0] \"C\" Vector__XXX\n SG_ MinCellTemp : 0|16@1+ (0.1,0) [0|0] \"C\" Vector__XXX\n\nBO_ 1784 MinMaxCellVoltage: 8 ProhelionBMU\n SG_ MaximumCellVoltageCellNo : 56|8@1+ (1,0) [0|0] \"\" Vector__XXX\n SG_ MaximumCellVoltageCMU : 48|8@1+ (1,0) [0|0] \"\" Vector__XXX\n SG_ MinimumCellVoltageCellNo : 40|8@1+ (1,0) [0|0] \"\" Vector__XXX\n SG_ MinimumCellVoltageCMU : 32|8@1+ (1,0) [0|0] \"\" Vector__XXX\n SG_ MaximumCellVoltage : 16|16@1+ (1,0) [0|0] \"mV\" Vector__XXX\n SG_ MinimumCellVoltage : 0|16@1+ (1,0) [0|0] \"mV\" Vector__XXX\n\nBO_ 1783 PrechargeStatus: 8 ProhelionBMU\n SG_ Unused16 : 40|16@1+ (1,0) [0|0] \"\" Vector__XXX\n SG_ PrechargeTimerCounter : 56|8@1+ (1,0) [0|0] \"\" Vector__XXX\n SG_ PrechargeTimerElapsed : 32|8@1+ (1,0) [0|0] \"\" Vector__XXX\n SG_ Contactor12VSupply_v4_BMU : 16|16@1+ (1,0) [0|0] \"\" Vector__XXX\n SG_ PrechargeState : 8|8@1+ (1,0) [0|0] \"\" Vector__XXX\n SG_ PrechargeContactorDriverStatus : 0|8@1+ (1,0) [0|0] \"\" Vector__XXX\n\nBO_ 1782 ChargerControlInformation: 8 ProhelionBMU\n SG_ TotalPackCapacity : 48|16@1- (1,0) [0|0] \"Ah\" Vector__XXX\n SG_ DischargingCellVoltageError : 32|16@1- (1,0) [0|0] \"mV\" Vector__XXX\n SG_ CellTemperatureMargin : 16|16@1- (0.1,0) [0|0] \"C\" Vector__XXX\n SG_ ChargingCellVoltageError : 0|16@1- (1,0) [0|0] \"mV\" Vector__XXX\n\nBO_ 1781 BalanceStateOfCharge: 8 ProhelionBMU\n SG_ BalanceSOCPercent : 32|32@1- (1,0) [0|0] \"%\" Vector__XXX\n SG_ BalanceSOCAh : 0|32@1- (1,0) [0|0] \"Ah\" Vector__XXX\n\nBO_ 1780 PackStateOfCharge: 8 ProhelionBMU\n SG_ SOCPercent : 32|32@1- (1,0) [0|0] \"%\" Vector__XXX\n SG_ SOCAh : 0|32@1- (1,0) [0|0] \"Ah\" Vector__XXX\n\n\nBA_DEF_ BO_  \"GenMsgCycleTime\" INT 2 50000;\nBA_DEF_ BU_  \"GenNodAutoGenSnd\" ENUM  \"No\",\"Yes\";\nBA_DEF_ BU_  \"GenNodAutoGenDsp\" ENUM  \"No\",\"Yes\";\nBA_DEF_  \"GenEnvVarEndingDsp\" STRING ;\nBA_DEF_  \"GenEnvVarEndingSnd\" STRING ;\nBA_DEF_  \"GenEnvVarPrefix\" STRING ;\nBA_DEF_DEF_  \"GenMsgCycleTime\" 100;\nBA_DEF_DEF_  \"GenNodAutoGenSnd\" \"Yes\";\nBA_DEF_DEF_  \"GenNodAutoGenDsp\" \"Yes\";\nBA_DEF_DEF_  \"GenEnvVarEndingDsp\" \"Dsp\";\nBA_DEF_DEF_  \"GenEnvVarEndingSnd\" \"Snd\";\nBA_DEF_DEF_  \"GenEnvVarPrefix\" \"Env\";\nSIG_VALTYPE_ 1781 BalanceSOCPercent : 1;\nSIG_VALTYPE_ 1781 BalanceSOCAh : 1;\nSIG_VALTYPE_ 1780 SOCPercent : 1;\nSIG_VALTYPE_ 1780 SOCAh : 1;\n</code></pre>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Communications_Protocol/Incoming_CAN_Packets.html","title":"Incoming CAN Packets","text":"<p>The BMU is expecting regular (&gt;5Hz) CAN packets from Prohelion's EV Driver Controls or another control system, with the current state of the switches. Note that even for ground mounted or non-vehicle use of the BMU the concept of a Driver Control is still used as the foundation of how to engage the BMU. Specifically, the BMU is looking for the current state of the IGNITION RUN and IGNITION START switches as per a motor vehicle, to use in controlling the pre-charge state machine.  </p> <p>The base ID of the EVDC can be set in the BMS configuration software, with the switch position packet being sent at +5 above the base ID.  By default, the EVDC base ID is 0x500, making the switch position ID at 0x505.</p>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Communications_Protocol/Incoming_CAN_Packets.html#ev-driver-controls-switch-position","title":"EV Driver Controls Switch Position","text":"<p>The BMU is controlled by commands that come from either an Electric Vehicle Driver Control or an external control system that sends the EVDC packet via CAN bus.</p> <p>EVDC packet contains Boolean flags that indicate the switch positions of the Electric Vehicle Driver Control unit. This set of flags is intended to replicate the set of key positions from an automotive ignition key barrel. </p> <p></p> Driver Control Switch Positions CAN ID: 0x505 - Interval 10Hz <code>data_u16[0]</code> 0x0000 = Off/Safe 0x0010 = Accessories  0x0020 = Ignition Run  0x0040 = Ignition Start <code>data_u16[1]</code> Unused by BMU <code>data_u16[2]</code> Unused by the BMU <code>data_u16[3]</code> Unused by the BMU"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Communications_Protocol/Incoming_CAN_Packets.html#engaging-the-bmu-using-can","title":"Engaging the BMU using CAN","text":"<p>The BMU requires regular packets from the controller (&gt;5Hz) and will engage based on instructions provided in the Driver Control Switch Position from the table above where the values are supplied on the 0x505 (by default) packet in the data_u16[0] position.</p> <p>The following table outlines the sequence of switch flags that must be sent to engage the BMU.</p> Signal: Behaviour: <code>0x0000 = Off</code> Off/Safe:  If no errors are present, this will move the BMU to the IDLE state. In IDLE state no contactors will be engaged and the BMU is ready to commence the pre-charge process. <code>0x0010 = Accessories (0x10)</code> Accessories:  This flag is unused by the BMU but is used by other Prohelion products. <code>0x0070 = Accessories (0x10) + Ignition run (0x20) + Ignition Start (0x40)</code> Start (Momentary):  If no errors are present, the BMU will commence the pre-charge sequence. The pre-charge sequence will engage the negative and pre-charge contactors until the load is charged to the pre-charge voltage threshold. Once successful the BMU will enter the RUN state. If the load does not charge up to the recharge voltage threshold, then the BMU will move to ERROR state. <code>0x0030 = Accessories (0x10) + Ignition run (0x20)</code> Run:  Once the BMU has entered the RUN state, the Ignition Start (0x40) flag should be removed. This is an additional safety precaution to prevent the BMU from commencing the pre-charge process after an unexpected power cycle or reboot.This set of flags should be sent for the entire duration that the main contactors should be engaged. If the system is required to disengage the main contactors, then then all flags should be cleared. <p>Alternatively, Prohelion\u2019s Profinity software solution can be used to engage the pack via the Battery Controller panel.  When using Profinity it transitions through these states to engage your pack.</p>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Communications_Protocol/Incoming_CAN_Packets.html#bmu-engagement-state-diagram","title":"BMU Engagement State Diagram","text":"<p>The following diagram shows how the BMU transitions though the various states on the way to either being successfully engaged or not, using the CAN messages outlined above.</p> <p></p> BMU Engagement State Diagram"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Communications_Protocol/Transmitted_CAN_Packets.html","title":"Transmitted CAN Packets","text":"<p>The following packets are transmitted by the BMU on to the CAN Bus Network.</p>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Communications_Protocol/Transmitted_CAN_Packets.html#bmu-heartbeat-and-serial-numbers","title":"BMU Heartbeat and Serial Numbers","text":"<p>This packet is transmitted by the BMU and allows it to be located and identified on the CAN bus.  It contains an identifying string, and the serial number of the BMU device.</p> CAN ID: 0x600 - Interval 1 hz <code>data_u32[0]</code> v5 and later: Device ID: 0x00001000 v4 and earlier:  ASCII ID string: 'T', 'O', '6', '7' <code>data_u32[1]</code> Device serial number as programmed at the factory"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Communications_Protocol/Transmitted_CAN_Packets.html#cmu-status-temperature-and-voltage-telemetry","title":"CMU Status, Temperature and Voltage Telemetry","text":"<p>These packets are transmitted by the CMUs and contain the telemetry values from the cells.  The BMU will relay these packets through to the CAN bus if configured to do so \u2013 this is enabled by default.</p> <p>Each CMU transmits a group of three packets, with the ID of the first packet being granted by the BMU during the ID request/grant phase at start-up.  </p> <p>CMU 1 will be assigned an ID of 0x601, and will therefore transmit telemetry on 0x601, 0x602, and 0x603.  CMU 2 will be assigned an ID of 0x604, CMU 3 will be assigned to 0x607, and so on.</p> <p>Reported cell voltages also indicate measurement status.  Measurements with a high confidence (both redundant measurement channels agree closely) will be reported as a reading in mV.  Readings where the redundant channels disagree ('trust' error) will be reported as negative mV, with the reported number coming from the high-accuracy / slow-speed converter channel.  </p> <p>Note that with the current CMU firmware, during very rapid voltage changes (high charge/discharge current pulses), the channels may report as a trust error for a few update cycles due to the sampling timing for the two measurement channels not being simultaneous.</p> <p>Readings with all cell voltages reported as negative indicate that either the 3.3V power supply voltage or one of the A/D reference voltages is out of specification.</p> <p>A CMU reporting any of these conditions (-ve mV) will potentially be reporting erroneous readings.  A cell reporting a -ve mV reading will not balance that cell, to avoid balancing at a potentially incorrect voltage.  Any cell reporting as a -ve mV reading should be flagged in the higher-level system and dealt with appropriately.  It should not necessarily trigger an immediate system shutdown but should probably be latched and indicated to the user to seek servicing promptly.</p> <p>Readings from cells above the number defined by the BMU to each CMU during start-up are sent as -32768mV (maximum negative) to indicate a 'cell not present / not monitored'.  A cell that is read by the CMU as having voltage present, when that cell has been configured as 'not present', will report as -32767mV to indicate a possible 'extra cell' fault.  These cells should not be included in any min / max / average cell voltage calculations.          </p> CAN ID: 0x601, 0x604, 0x607 etc. - Interval approx. 1Hz* <code>data_u32[0]</code> CMU serial number (allocated at factory) <code>data_16[2]</code> PCB temperature (1/10th\u00b0C) <code>data_16[3]</code> Cell temperature (1/10th\u00b0C) <p><sup>* CMU timebases are not synchronised and will drift relative to each other, and to actual time </sup></p> CAN ID: 0x602, 0x605, 0x608 etc. - Interval Approx 1Hz <code>data_16[0]</code> Cell 0 voltage (mV). +ve = OK, -ve = Channel mismatch <code>data_16[1]</code> Cell 1 voltage (mV). +ve = OK, -ve = Channel mismatch <code>data_16[2]</code> Cell 2 voltage (mV). +ve = OK, -ve = Channel mismatch <code>data_16[3]</code> Cell 3 voltage (mV). +ve = OK, -ve = Channel mismatch CAN ID: CAN ID: 0x603, 0x606, 0x609 etc. - Interval: Approx. 1Hz <code>data_16[0]</code> Cell 4 voltage (mV). +ve = OK, -ve = Channel mismatch <code>data_16[1]</code> Cell 5 voltage (mV). +ve = OK, -ve = Channel mismatch <code>data_16[2]</code> Cell 6 voltage (mV). +ve = OK, -ve = Channel mismatch <code>data_16[3]</code> Cell 7 voltage (mV). +ve = OK, -ve = Channel mismatch"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Communications_Protocol/Transmitted_CAN_Packets.html#pack-state-of-charge-soc","title":"Pack State of Charge (SOC)","text":"<p>This packet is transmitted by the BMU to show the current state of charge during normal pack operation.</p> CAN ID: 0x6F4 - Interval 1Hz <code>data_fp[0]</code> SoC (Amp-Hours (Ah)). Shows Ah consumed from pack. 0 = Full, and counts upwards towards the user-set pack capacity number as Ah are used. Resets to 0 when max cell reaches balance threshold <code>data_fp[1]</code> Shows the SoCas a Percentage (%). 100% = full, 0% = empty"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Communications_Protocol/Transmitted_CAN_Packets.html#pack-balance-state-of-charge-soc","title":"Pack Balance State of Charge (SOC)","text":"<p>This packet is transmitted by the BMU to show the current state of cell mismatch during balancing at top of charge.</p> CAN ID: 0x6F5 - Interval: 1Hz <code>data_fp[0]</code> Balance SoC (Ah). Shows Ah supplied to the pack since the first cell began balancing. This number will continue to count up until all cells in the pack are balancing, therefore showing the Ah mismatch that has been corrected during this balancing session <code>data_fp[1]</code> Shows the balancing SoCa s a percentage (%), in other words the percentage mismatch between cells this session."},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Communications_Protocol/Transmitted_CAN_Packets.html#charger-control-information","title":"Charger Control Information","text":"<p>This packet is transmitted by the BMU to allow an external charger to control itself based in detailed cell information from the BMS, without having to know about the various user-configured cell setup parameters.</p> CAN ID: 0x6F6 - Interval: 10Hz <code>data_16[0]</code> Charging cell voltage error (mV). This value is the user-configured \u201cBalance Threshold\u201d voltage minus the maximum cell voltage.  The charger should run a charge current control loop to try and bring this value to 0mV.  An Integral type control loop is suggested. <code>data_16[1]</code> Cell temperature margin (1/10th\u00b0C). This value is the maximum cell temperature minus the user-configured \u201cMaximum Cell Temperature\u201d limit.  The charger should reduce charge current such that this value will never reach 0, as the BMS will disconnect the pack if the maximum cell temperature is exceeded.  A Proportional type control loop is suggested. <code>data_16[2]</code> Discharging cell voltage error (mV). This value is the user-configured \u201cZero SoC Threshold\u201d voltage minus the minimum cell voltage.  This value can be used by devices that are discharging the battery (eg. motor controllers in vehicles) to gradually limit their consumption as the minimum cell approaches being fully discharged. <code>data_u16[3]</code> Total pack capacity (Ah). This value can be used by the charger / discharger to calculate control loop gain constants for the installation.  It is simply the user-set configuration value rounded to the nearest Ah"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Communications_Protocol/Transmitted_CAN_Packets.html#pre-charge-status","title":"Pre-Charge Status","text":"<p>This packet is transmitted by the BMU to indicate the current state of the pre-charge system.</p> CAN ID: 0x6F7 - Interval: 1Hz, and on each pre-charge state change <code>data_u8[0]</code> Pre-charge contactor driver status: 0x01 = Error status of contactor 1 driver (0 = OK, 1 = error )  0x02 = Error status of contactor 2 driver0x04 = Output status of contactor 1 driver (0 = Off, 1 = On)0x08 = Output status of contactor 2 driver0x10 = 12V contactor supply voltage OK (0 = Fault, 1 = OK)0x20 = Error status of contactor 3 driver0x40 = Output status of contactor 3 driver0x80 = Unused <code>data_u8[1]</code> Pre-charge state (in order of normal appearance when starting): 0 = Error1 = Idle5 = Enable Pack2 = Measure3 = Pre-charge4 = Run <code>data_u16[1]</code> 12V contactor supply voltage, mV (only on v4 or earlier BMU) for v5 or later BMU, refer to binary bit 0x10 in data_u8[0] <code>data_u16[2]</code> Unused, reports as 0x0000 <code>data_u8[6]</code> 0x01 = Pre-charge timer elapsed. (Do not care if timeout disabled) 0x00 = Pre-charge timer not elapsed <code>data_u8[7]</code> Pre-charge timer counter (10ms per count)"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Communications_Protocol/Transmitted_CAN_Packets.html#minimum-maximum-cell-voltage","title":"Minimum / Maximum Cell Voltage","text":"<p>This packet is transmitted by the BMU to show the highest and lowest voltage cells in the pack.</p> CAN ID: 0x6F8 - Interval: 10Hz <code>data_u16[0]</code> Minimum cell voltage (mV) <code>data_u16[1]</code> Maximum cell voltage (mV) <code>data_u8[4]</code> CMU number that has the minimum cell voltage <code>data_u8[5]</code> Cell number in CMU that is the minimum cell voltage <code>data_u8[6]</code> CMU number that has the maximum cell voltage <code>data_u8[7]</code> Cell number in CMU that is the maximum cell voltage"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Communications_Protocol/Transmitted_CAN_Packets.html#maximum-minimum-cell-temperature","title":"Maximum / Minimum Cell Temperature","text":"<p>This packet is transmitted by the BMU to show the highest and lowest temperature cells in the pack.</p> CAN ID: 0x6F9 - Interval: 1Hz <code>data_u16[0]</code> Minimum cell temperature (1/10th\u00b0C) <code>data_u16[1]</code> Maximum cell temperature ( 1/10th \u00b0C) <code>data_u8[4]</code> CMU number that has the minimum cell temperature <code>data_u8[5]</code> Unused, reads as 0x00 <code>data_u8[6]</code> CMU number that has the maximum cell temperature <code>data_u8[7]</code> Unused, reads as 0x00"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Communications_Protocol/Transmitted_CAN_Packets.html#battery-pack-voltage-current","title":"Battery Pack Voltage / Current","text":"<p>This packet is transmitted by the BMU to show the total pack voltage and current.</p> CAN ID: 0x6FA - Interval: 10Hz <code>data_u32[0]</code> Battery Voltage (mV) <code>data_32[1]</code> Battery Current (mA)"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Communications_Protocol/Transmitted_CAN_Packets.html#battery-pack-status","title":"Battery Pack Status","text":"<p>This packet is transmitted by the BMU to show the status of the overall pack.</p> CAN ID: 0x6FB - Interval: 1Hz <code>data_u16[0]</code> Balance voltage threshold \u2013 rising (balance resistor turns on) <code>data_u16[1]</code> Balance voltage threshold \u2013 falling (balance resistor turns off) <code>data_u8[4]</code> Status Flags 0x01 = Cell Over Voltage0x02 = Cell Under Voltage0x04 = Cell Over Temperature0x08 = Measurement Untrusted (redundant channel mismatch)0x10 = CMU Communications Timeout (lost CMU)0x20 = Vehicle Communications Timeout (lost EVDC)0x40 = BMU is in Setup mode0x80 = CMU CAN bus power status Present for backwards compatibility with older softwareFor newer software, please view the flags in the extended battery pack status ID packet <code>data_u8[5]</code> BMS CMU count <code>data_u16[3]</code> BMS BMU Firmware Build Number"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Communications_Protocol/Transmitted_CAN_Packets.html#battery-pack-fan-status","title":"Battery Pack Fan Status","text":"<p>This packet is transmitted by the BMU to show fan speeds and 12V power consumption.</p> CAN ID: 0x6FC - Interval: 1Hz <code>data_u16[0]</code> Fan speed 0 (rpm) <code>data_u16[1]</code> Fan Speed 1 (rpm) <code>data_u16[2]</code> 12V current consumption of fans + contactors (mA) <code>data_u16[3]</code> 12V current consumption of CMUs (mA)"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Communications_Protocol/Transmitted_CAN_Packets.html#extended-battery-pack-status","title":"Extended Battery Pack Status","text":"<p>This packet is transmitted by the BMU to show extended pack status data.</p> CAN ID: 0x6FD - Interval: 1Hz <code>data_u32[0]</code> Status Flags: 0x00000001 = Cell Over Voltage0x00000002 = Cell Under Voltage0x00000004 = Cell Over Temperature0x00000008 = Measurement Untrusted (channel mismatch)0x00000010 = CMU Communications Timeout (lost CMU)0x00000020 = Vehicle Communications Timeout (lost EVDC)0x00000040 = BMU is in Setup mode0x00000080 = CMU CAN bus power status0x00000100 = Pack Isolation test failure0x00000200 = SoCmeasurement is not valid0x00000400 = CAN 12V supply is low  - about to shut down0x00000800 = A contactor is stuck / not engaged0x00001000 = A CMU has detected an extra cell present <code>data_u8[4]</code> BMU Hardware version <code>data_u8[5]</code> BMU Model ID <code>data_u16[3]</code> Unused"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Communications_Protocol/Transmitted_CAN_Packets.html#reserved-ids","title":"Reserved IDs","text":"<p>Do not transmit data on reserved IDs, as this may trigger configuration or boot load events and mode changes.</p>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Operation/BMS_State_Machine.html","title":"BMS State Machine","text":"<p>The BMS can be in any one of six states, depending on operating conditions, commands, and errors.  The states are reported on the CAN bus, and shown in the BMS Viewer software.  The states are, in the most commonly seen sequence: </p> <ul> <li>Error </li> <li>Idle </li> <li>Enable </li> <li>Measure </li> <li>Precharge </li> <li>Run </li> </ul> <p>States transition from one to another based on various thresholds and timers, and on user commands via the CAN bus.  Prohelion provides out of the box, battery management control in its software suite Profinity, hardware support for engaging the pack in the EV Driver Controls and detailed information on how to engage the pack from custom code in the BMS Documentation.</p>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Operation/BMS_State_Machine.html#bmu-engagement-state-diagram","title":"BMU Engagement State Diagram","text":"<p>The following diagram shows how the BMU transitions though the various states on the way to either being successfully engaged or not, using the CAN messages outlined above.</p> <p></p> BMS Engagement State Diagram"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Operation/BMS_State_Machine.html#error","title":"Error","text":"<p>The BMS is in the Error state if any of the following conditions are true: </p> <ul> <li>The 12V contactor supply is not present or is undervoltage </li> <li>Any cell Over Voltage </li> <li>Any cell Under Voltage </li> <li>Any cell Over Temperature </li> <li>Any CMU communications packet is overdue (CMU timeout) </li> <li>Packets from the EV driver controls are overdue (vehicle timeout)</li> <li>Missing CMU or cell </li> <li>Extra CMU or cell </li> <li>Contactor feedback mismatch to the commanded state of the contactor </li> </ul> <p>In the Error state, all contactors are switched off to isolate the pack.  The relay and fan outputs are also switched off. </p> <p>If all errors are removed, then the BMS will transition to the Idle state if the ignition key is switched to the accessories position and the fuel door is closed.  It requires this active user intervention to move to Idle, and will otherwise remain in the Error state. </p>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Operation/BMS_State_Machine.html#idle","title":"Idle","text":"<p>In the Idle state, the BMS waits for a command from the EV driver controls.  All contactors are switched off.  The relay output and fans are also off. </p> <p>If the ignition key is switched from the run position to the start position, or the fuel door is opened, then the BMS transitions to the Enable state and begins a precharge sequence. </p>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Operation/BMS_State_Machine.html#enable","title":"Enable","text":"<p>Contactor 1 is switched on, to connect the Pack- connection to the vehicle.  After a short time to allow the inrush current from the contactor switching to subside on the 12V supply, the BMS transitions to the Measure state. </p>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Operation/BMS_State_Machine.html#measure","title":"Measure","text":"<p>Contactor 3 is also switched on, to connect the Pack+ connection to the vehicle via the precharge resistor.  The vehicle will begin precharging.   </p> <p>After a short time to allow the total pack voltage measurement to stabilise, and the 12V current inrush from the contactor switching to subside, the BMS transitions to the Precharge state. </p>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Operation/BMS_State_Machine.html#precharge","title":"Precharge","text":"<p>The load will now be precharging.  The BMS begins a timeout (error) counter (2000ms by default), to avoid a fault situation overheating the precharge resistor, and also begins comparing the total pack voltage and DC bus voltage measurements.   </p> <p>When they match within a the precharge voltage threshold (20V by default), precharge is regarded as complete and the BMS transitions to the Run state. </p>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Operation/BMS_State_Machine.html#run","title":"Run","text":"<p>Contactor 2 is also switched on, to directly connect the Pack+ connection to the load.  The relay and fan outputs are switched on.   </p> <p>If the ignition key is switched away from the run position (back to accessories) or the fuel door is closed, then the BMS transitions to the Idle state. </p>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Operation/Charging.html","title":"Charger Control","text":"<p>To charge and balance the pack correctly the BMS must be able to control the charging current in a continuous manner.  Therefore, a charger that is able to be controlled remotely is required.  Battery management systems and chargers that use on/off control will result in slow and/or poor balancing of cells.   </p> <p>Charging the pack requires an external component, either a charge control loop controlled by software such as Profinity or via a control loop implemented in third party charge control units or in your code.</p>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Operation/Charging.html#high-level-charging-logic","title":"High Level Charging Logic","text":"<p>The BMU runs a PID control loop based on maximum individual cell voltage, with the aim of raising it up to the Balance Threshold voltage.  It will issue current setpoint commands to the charger to achieve this goal. </p> <p>This control strategy results in the minimum possible charge time, as the charger will be ramped up to maximum current rapidly, and stay there until the maximum cell reaches the target voltage at the end of the 'constant current' portion of the charge cycle.  At this point, charge current will be gradually ramped down, at whatever rate is necessary to keep the maximum cell at the target and adsorbing as quickly as possible \u2013 the 'constant voltage' portion of the charge cycle.  Therefore, it does not matter at what rate the cell is adsorbing charge, the control loop will keep it at the optimal amount at all times. </p> <p>As the maximum cell reaches 100% SOC, the charging current will have been gradually reduced down until it matches the balance current of ~250mA.  At this point, the maximum cell will be at the target voltage, held at that point by the balance resistor, and lower cells in the pack will be rising at the rate governed by the 250mA charge.   </p> <p>When the minimum cell reaches the target voltage, then all cells are in balance, and the pack is at 100% SOC.  This time difference between maximum and minimum cells reaching the target voltage is usually only a few minutes for a well-balanced battery pack.  Therefore, the power wasted in the balance resistors during this time is a trivial percentage of the total charge energy. </p> <p>Note that the very first balance may take considerable time if the cells are grossly out of balance.  Worst-case time is the Ah capacity of the cells divided by the 250mA balance rate divided by the out-of-balance percentage, eg 90Ah / 0.25A / 20% = 72 hours. </p> <p>Info</p> <p>For more information on charging generally and example code for implementing charging logic on third party devices, please see the Prohelion Knowledge Base, which can be accessed via the support portal, search for <code>charging</code>.</p>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Operation/Operating_Thresholds.html","title":"Operating Thresholds","text":"<p>There are six user-settable thresholds that control the operation of the BMS.  These should be set based on the maximum acceptable limits for the cells used in the battery pack, along with reference to the charge/discharge curves for selecting the balancing points.   </p> <p>These operating points can be programmed into the BMU over the CAN bus using the BMS Setup software and a CAN Adapter.  Settings that are required at the CMUs are passed to them from the BMU when the system starts. </p> <p>The SoCvs Voltage curve for a typical Lithium chemistry cell is shown below, along with the location of the various thresholds. </p> <p></p> State of Charge vs Voltage Curve"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Operation/Operating_Thresholds.html#over-voltage-threshold","title":"Over Voltage Threshold","text":"<p>This voltage should be set to the maximum acceptable voltage for the cell.  If it is ever exceeded, then the BMS will move to the Error state and open the contactors immediately to protect the pack. </p>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Operation/Operating_Thresholds.html#balance-threshold","title":"Balance Threshold","text":"<p>This voltage is the target setpoint for the charging control algorithm, and will be the voltage that the cells are charged to in normal operation.  It should be chosen to be part-way up the 'knee' in the voltage charge curve, so that the cells can be easily seen to be at different SoCand therefore balanced accurately.   </p> <p>Choosing this number to be higher (closer towards the Over Voltage Threshold) will give a slightly increased usable capacity of the pack, but will make it more likely that sudden charging (such as that experienced with regen braking), will push a cell above the Over Voltage Threshold and shut down the system without warning.  Pushing the usual charge voltage to the maximum rating of the cell may also reduce cell cycle life \u2013 refer to the battery cell datasheet for specific information on this aspect, as it is highly dependant on cell chemistry and manufacturing techniques. </p> <p>When any cell exceeds this voltage, the cell balance (shunt) resistor for that cell is switched on, and begins to discharge that cell at approximately 250mA.  The shunt resistor remains switched on until the cell falls below the Balance Threshold by the Balance Threshold Hysteresis value. </p>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Operation/Operating_Thresholds.html#balance-threshold-hysteresis","title":"Balance Threshold Hysteresis","text":"<p>This voltage determines the hysteresis used to control the balance resistors.   </p> <p>If using CMUs made after January 2013, it should be set to around 5mV, as the firmware in the newer CMUs turns off the shunt resistors while taking voltage measurements to eliminate errors caused by the resistance of the sense wiring.   </p> <p>If using older CMUs, it should be set to around 50mV for a typical pack, to allow for the voltage drop in the sense wiring, connections, and cell impedance when 250mA of balance current is flowing.  This will be installation dependent. </p> <p>Setting it too low will cause oscillations in the balance resistor switching and possibly erroneous voltage measurement reporting. </p> <p>Setting it too high will give a wide band of voltage that various cells are balanced to, giving a less than optimally balanced pack and slightly reduced pack capacity. </p>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Operation/Operating_Thresholds.html#zero-socthreshold","title":"Zero SoCThreshold","text":"<p>This voltage should be set to the point where the cells are considered fully discharged during normal operation.  It will be along the lower 'knee' in the charge curve.  When a cell goes below this threshold, the BMU reports SoCas 0%.  It is also the target minimum voltage used by motor controllers and other devices to not exceed during operation. </p>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Operation/Operating_Thresholds.html#under-voltage-threshold","title":"Under Voltage Threshold","text":"<p>This voltage should be set to the minimum acceptable voltage for the cell.  If any cell voltage falls below this point, then the BMS will move to the Error state and open the contactors immediately to protect the pack. </p>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Operation/Operating_Thresholds.html#over-temperature-threshold","title":"Over Temperature Threshold","text":"<p>This temperature should be set to the maximum acceptable operating temperature for the cell.  If it is ever exceeded, then the BMS will move to the Error state and open the contactors immediately to protect the pack. </p>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Operation/Precharge.html","title":"Precharge","text":"<p>Loads such as motor controllers (inverters), DC/DC converters, and other high-voltage, high-power electronics contain capacitors across the DC bus.  If these are suddenly connected to the battery pack by closing a contactor or switch, then there will be a very large inrush current (thousands of Amps) followed by a voltage surge due to the battery and cabling inductance.  This inrush current will damage the devices and weld contacts together, and the voltage surge can also cause components to fail. </p> <p>Precharging the capacitors in the various devices solves these problems.  This can be done by first connecting the loads to the battery through a resistor, so that the current into the capacitors is limited to a few amps.  The voltage on the capacitors will then rise in a controlled manner, and when it is close to the battery voltage the main contactor can be closed to directly connect everything together. </p>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Operation/Precharge.html#action","title":"Action","text":"<p>The BMU initiates a precharge sequence when commanded to do so from the EV Driver Controls.  There are two conditions that begin precharge: the ignition key moving to the start position from the run position; and the fuel door being opened for charging.   </p> <p>Either closing the fuel door, or moving the key to no longer be in Ignition run position will shut down the system and open the contactors to make the system safe. </p> <p>The BMU can also be set to run in \u201cStandalone Operation\u201d mode, where it will precharge as soon as it measures an acceptable voltage on the 12V contactor power input.  This mode would normally be used in remote area power installations and similar applications, not in vehicles. </p>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Operation/Precharge.html#sequence","title":"Sequence","text":"<p>The precharge sequence is as follows: </p> <ol> <li>Contactor 1 energises to connect Pack- to the vehicle </li> <li>Contactor 3 energises to connect Pack+ to the precharge resistor, and allow the BMU to take pack voltage measurements.  </li> <li>The capacitors in the devices in the vehicle precharge through the precharge resistor that is in parallel with Contactor 2 </li> <li>When the pack voltage and the DC bus voltage are within tolerance then Contactor 2 is energised to complete the high-current circuit </li> <li>The BMU is now in \u201cRun\u201d mode, and does the following: <ul> <li>reports this fact on the CAN bus </li> <li>activates the status relay output (which can be used to enable the DC/DC converter) </li> <li>turns on the pack fan outputs </li> </ul> </li> </ol>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Operation/Precharge.html#precharge-resistor-selection","title":"Precharge Resistor Selection","text":"<p>Selection of the external precharge resistor is critical for correct and long-term reliable operation of the precharge circuit.  A judgement must be made by the designer of the vehicle power system to the tradeoff between resistor size, cost and weight, and expected precharge time.  A slower time can use a smaller, cheaper resistor, but taking too long to precharge will be annoying to the end user of the vehicle.  An aluminium-cased wirewound resistor is the most commonly chosen type of resistor. </p> <p>As an example, the calculations for a typical Electric Vehicle system are shown as follows: </p> <ul> <li>System battery voltage maximum = 450V </li> <li>Motor controller (Prohelion WaveSculptor 200) capacitance = 800\u00b5F</li> <li>Chosen precharge current = 1A </li> </ul> <p>Therefore, the minimum resistance (fastest precharge) will be 450V / 1A = 450 Ohms.  Choose 470 Ohms as the next highest common value.  Peak power dissipation in the resistor is therefore 450V<sup>2</sup>/470R = __430W. __ </p> <p>The expected precharge time is given by the time constant TAU = R (Ohms) * C (Farads), where;</p> <ul> <li>The voltage on the capacitor should change by 63% of the difference each TAU time interval</li> <li>Precharge should be within 95% of the initial value within 4 TAU, and to 99% within 5 TAU intervals, as an exponential decay</li> </ul> <p>For the example system, TAU = 376ms, so the expected precharge time of 4 TAU = 1.5 seconds.</p> <p>Choosing a &gt;500W resistor is unnecessary, as this rating is only needed for a short amount of time during normal operation.</p> <p>However, the resistor cannot be too small, as if a fault situation occurs, such as a short circuit in the motor controller, then this power will be dissipated continuously for the entire expected precharge time, until the precharge controller realises that precharging has not occurred properly and goes into an error state.  For safety, the resistor in the example system should be chosen to tolerate a one-off event, starting at the expected maximum ambient temperature, of 430W for 1.5 seconds. </p> <p>Searching through available off-the-shelf options from Digikey, the RH series from Vishay is chosen as a likely candidate.  According to the datasheet (see also, Appendix) for short time overloads, a power rating of 12x the nominal power is acceptable for a 2 second duration.  Using a 50W resistor, this equates to an overload rating of 600W, starting at an ambient of 25\u00b0C.   </p> <p>Therefore, this 50W resistor is acceptable for the external resistor in this application based on maximum fault power. </p> <p>During normal operation, the capacitors contain a charge of 0.36C, giving an energy storage of 81 Joules.  Note that this is a lethal amount of energy.  During an RC precharge type event, the same amount of energy that is eventually stored in the capacitor is also dissipated in the resistor.   </p> <p>If not mounted on any additional thermal mass, and assuming that 20g of the resistor's total mass is aluminium (specific heat = 0.897 J/g \u00b0C), 81 Joules will give a temperature rise of \u2206T = Q / mc = 4.5\u00b0C, also well within limits.  During a fault situation, where 430W is being dissipated in the resistor, the same thermal calculation shows a temperature rise of 48\u00b0C above the starting temperature.  This also is within limits. </p> <p>The maximum acceptable operating voltage for the 50W resistor is 1285V, so our maximum of 450V is also within limits. </p> <p>Therefore, a 470 ohm, 50W, RH series wirewound aluminium resistor __ would be a suitable choice of external resistor for this application of precharging __800uF to 450V in 1.5 seconds.  Other devices on the HV bus such as DC/DC converters and battery chargers will add significant extra capacitance, and must be factored into these calculations. </p> <p>Timeout Values</p> <p>Note that the BMS must be programmed with the correct timeout value, so as it knows what the expected precharge time is.  If this is not done, then the precharge controller will either expect precharge to have finished when it has not, resulting in an error state, or it will expect precharge to take much longer than it really does, resulting in a potential overload and a fire in the external resistor if there is a system fault. </p>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Operation/Precharge.html#caveats","title":"Caveats","text":"<p>Be aware that loads that draw current during precharge will cause the precharge sequence to fail and/or the precharge resistor to overheat.  This is because the current drawn by the load will slow or possibly prevent the output voltage from rising, meaning precharge never completes in the expected time.   </p> <p>The typical load that causes this problem is the DC/DC converter used to charge the 12V auxiliary battery. </p> <p>This problem can be avoided by using the relay output on the BMU to control an \u201cenable\u201d input on the problematic loads once precharge has completed and the BMU is in \u201cRun\u201d mode.  By default, this relay activates in this manner. </p>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Reporting/State_Of_Charge_Reporting.html","title":"State of Charge Reporting","text":"<p>The BMS reports State of Charge (SOC) based on integrating the pack current (coulomb counting).   </p> <p>The BMU takes readings of the shunt current using a high-accuracy front-end circuit and 24-bit A/D converter.  It integrates these readings to accumulate an Ah consumption for the pack.   The Ah accumulation is used in conjunction with the user-settable pack capacity value to calculate a SoCin percent.  Both Ah and percent are reported on the CAN bus. </p> <p>The SoCis calculated in Amp-Hours (Ah), based on the user-set scale value for the 25mV shunt.  The Ah is then also calculated to a percentage, based on the user-set value for total pack capacity.   </p> <p>A second telemetry value is also reported, the Balance SOC.  This value begins counting when the first cell reaches the balance threshold during charging, and continues to count until the last cell has reached the balance threshold.  This gives an accurate value for the amount of imbalance in the battery pack that was corrected during this charging session.  Logging this value in a higher-level system controller and looking for changes over time will give an indication of potential problems with the pack. </p>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Reporting/State_Of_Charge_Reporting.html#what-defines-a-full-pack","title":"What Defines a Full Pack?","text":"<p>The SoCreading is reset to 'full' when the first bypass shunt has activated during a charge cycle.  At this point the \u201cBalance SOC\u201d telemetry value begins incrementing, halting when all bypass shunts are active.  This \u201cBalance SOC\u201d telemetry value therefore shows the amount of imbalance between cells that has been corrected during the current charging session. </p>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Reporting/State_Of_Charge_Reporting.html#what-defines-an-empty-pack","title":"What Defines an Empty Pack?","text":"<p>Ah are set to zero when the first cell reaches the balance threshold while charging for the first time.   It then counts up to indicate Ah drawn from the pack.  It will count back down towards zero when the pack is recharged. </p>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Reporting/Telemetry_Viewing_Software.html","title":"Telemetry Viewing Software","text":"<p>The Prohelion Battery Management System should be monitored using Prohelion Profinity.</p> <p></p> BMS Viewing Software <p>The top section shows data from the BMU, while the lower section shows CMU data - one row per CMU</p>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Reporting/Telemetry_Viewing_Software.html#bmu-data","title":"BMU Data","text":"<p>The top row of BMU data presents the following information (left to right): </p> <ul> <li>Minimum voltage cell in the pack, and its voltage.  The example shows Node (CMU) 8, Cell 6 is minimum, at 3293mV </li> <li>Maximum voltage cell in the pack, and its voltage.  The example shows Node (CMU) 12, Cell 4 is maximum, at 3316mV </li> <li>Minimum temperature cell in the pack, and it's temperature </li> <li>Maximum temperature cell in the pack, and it's temperature </li> <li>Total pack voltage </li> <li>Total pack current </li> <li>Balance threshold voltage </li> <li>Balance threshold minimum voltage (balance voltage \u2013 hysteresis) </li> <li>CMU count in system </li> </ul> <p>The next row shows Precharge status information on the left: </p> <ul> <li>Current state (Idle, Precharge, Run, etc) </li> <li>Contactor 12V supply voltage presence (mV on v4 or older BMUs) </li> </ul> <p>The bottom row in the BMU section shows the various status flags: </p> <ul> <li>CMU Power supply OK </li> <li>Any cell OverVoltage </li> <li>Any cell UnderVoltage </li> <li>Any cell OverTemperature </li> <li>Any cell untrusted </li> <li>CMU and vehicle timeout errors </li> </ul> <p>The right-hand side shows </p> <ul> <li>Fan speed for both fans </li> <li>SoC and Balance SoC in Ah </li> <li>SoC and Balance SoC in % </li> </ul>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen1/Reporting/Telemetry_Viewing_Software.html#cmu-data","title":"CMU Data","text":"<p>The lower section of the program shows telemetry data from the CMUs, one row per CMU.  The information shown is: </p> <ul> <li>CMU Serial number </li> <li>CMU circuit board (PCB) temperature </li> <li>CMU external (cell) temperature </li> <li>1\u20138 cell voltage measurements </li> </ul> <p>The data is highlighted in various ways to quickly understand the system status </p> <ul> <li>CMU serial number alternates between a white and light blue background each time a packet is received from that CMU </li> <li>Trust errors for a cell voltage have a yellow background </li> <li>Cells outside the min and max voltage limits have a red background </li> <li>Cells currently balancing have a blue background </li> <li>The minimum and maximum cells have bold text </li> <li>Cells not present (where the CMU has been programmed to monitor less than 8 cells) have no text, and a mid-gray background </li> </ul>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/index.html","title":"Prohelion BMS D1000 Gen2","text":"<p>The Prohelion BMS D1000 Gen2 is a cutting-edge, distributed Battery Management System designed for high-voltage applications. It provides comprehensive monitoring and protection for battery packs up to 1000V, accommodating up to 448 individual cells with precise voltage management through its advanced architecture. The system leverages a Battery Management Unit (BMU), a Battery Junction Unit (BJU) and multiple Cell Monitoring Units (CMUs), to ensure optimal performance, safety, and longevity of your energy storage solutions. Whether for industrial, automotive, or energy applications, the Prohelion BMS D1000 Gen2 solution offers unparalleled reliability and scalability.</p>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/index.html#specifications","title":"Specifications","text":"Parameter Value BMS Supply Voltage 12 V / 24 V  (two variants) BMS Supply Current 80 mA (excluding contactors) Maximum Battery Voltage 1000 V Maximum Battery Current 1000 A Number of Contactor Outputs 5 Number of Low-Side Switch Outputs 3 Number of Cell Management Units 1-32  (configurable) Number of Cell Voltage Measurements 4-448 (configurable) Number of Temperature Measurements 0-128 (configurable) Measurement Accuracy 1mV Accuracy (3.6V, +25\u00b0C) Balancing Current 650 mA @ 100% duty-cycle Environmental Sensors Temperature, Humidity, VoC, NOx"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/index.html#distributed-architecture","title":"Distributed Architecture","text":"Figure 1:  Prohelion BMS D1000 Gen2 <p>The Prohelion BMS D1000 Gen2 is built around a distributed approach, where: - The Prohelion D1000 Gen2 Battery Management Unit (BMU) acts as the central hub, overseeing communication and coordination across the entire system. The BMU interfaces with the CMUs, collecting data on cell voltages, temperatures, and overall pack health, while also controlling contractors and other safety mechanisms to protect against overvoltage, undervoltage, and thermal issues. - The Prohelion D1000 Gen2 Cell Monitoring Units (CMUs) monitor up to 14 individual cell voltages and 4 temperature sensors each. The system can accommodate up to 32 CMUs, enabling the monitoring of up to 448 individual cells and 128 temperature sensors.  - The Battery Junction Unit (BJU) is tasked with monitoring the overall pack current and voltages.</p> <p>This modular setup allows for scalability, enabling the system to manage up to 448 cells across a battery pack. The distributed nature of the system reduces wiring complexity and enhances fault tolerance, making it highly reliable for high-voltage applications.</p>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/index.html#features","title":"Features","text":""},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/index.html#cell-voltage-monitoring","title":"Cell Voltage Monitoring","text":"<p>Continuous monitoring of individual cell voltages to ensure all cells are within safe operating limits, preventing over-voltage and under-voltage conditions.</p>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/index.html#temperature-monitoring","title":"Temperature Monitoring","text":"<p>Monitoring of cell and pack temperatures to prevent overheating. This feature helps in detecting thermal issues and managing thermal runaway.</p>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/index.html#current-monitoring","title":"Current Monitoring","text":"<p>Monitoring of charge and discharge currents to protect the battery from overcurrent conditions, which can lead to excessive heat and potential damage.</p>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/index.html#cell-balancing","title":"Cell Balancing","text":"<p>Ensures uniform charge levels across all cells, improving the overall lifespan and performance of the battery pack by preventing imbalance during charging and discharging.</p>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/index.html#over-charge-and-over-discharge-protection","title":"Over-charge and Over-Discharge Protection","text":"<p>Automatically disconnects the battery from the charger or load to prevent over-charging or over-discharging, which can damage the battery.</p>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/index.html#state-estimations","title":"State Estimations","text":"<ul> <li>State of Charge (SOC) - Estimation of the remaining charge in the battery.</li> <li>State of Health (SOH) - Estimation of the batteries capacity to hold a charge relative to its original capacity.</li> <li>State of Power (SOP) - Estimation of the available power for charging or discharging at any given time.</li> </ul>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/index.html#environmental-sensors","title":"Environmental Sensors","text":"<p>The BMS is equipped with a suite of environmental sensors to monitor the operating conditions and ensure optimal performance and safety.</p> <ul> <li>Pressure Sensor - Monitors the internal pressure of the battery pack to detect potential issues such as gas build-up or leaks. The system triggers alerts if pressure readings fall outside the safe range.</li> <li>Humidity Sensor - Tracks the humidity levels within the battery enclosure. High humidity can indicate potential ingress of moisture, which could lead to corrosion or electrical short circuits. Alerts are generated if humidity levels exceed or drop below predefined thresholds.</li> <li>VOC Sensor - Detects Volatile Organic Compounds (VOCs) that could indicate the presence of harmful or flammable gases within the battery pack. The BMS raises alarms if VOC levels reach dangerous levels, ensuring timely intervention.</li> <li>NOx Sensor - Measures nitrogen oxide levels, which could be indicative of overheating or other chemical reactions occurring within the battery. The system provides alerts if NOx levels exceed safe limits.</li> <li>Onboard Temperature Sensors - Continuously monitors the temperature at key locations within the BMS. These sensors help prevent thermal runaway by ensuring that temperatures remain within safe operating limits. Alerts are triggered if temperatures rise too high or fall too low.</li> </ul>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/index.html#contactor-control","title":"Contactor Control","text":"<ul> <li>Precharge Circuit Management - Controls the contactors to safely connect the battery to the load or charger by gradually increasing the voltage to prevent inrush currents. This feature protects both the battery and the connected systems from potential damage caused by sudden power surges.</li> <li>Main Contactor Control - Manages the connection and disconnection of the battery pack to the system, ensuring safe operation. The BMS continuously monitors system conditions and can automatically disconnect the main contactor in case of faults, preventing potential hazards.</li> <li>Charge Contactor Control - Manages the connection of the battery pack to the charger during the charging process. It ensures that the contactor only closes when safe conditions are met, such as correct voltage alignment and no faults detected. Additionally, it controls the timing of the contactor closure to optimize charging efficiency and protect the battery from overcharging or excessive heat buildup.</li> </ul>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/index.html#low-side-switches","title":"Low-Side Switches","text":"<p>The BMS is equipped with three 12V/24V low-side switches designed to control external devices or subsystems, providing flexibility and enhanced control within the battery management system.</p> <ul> <li>Control Logic Integration - The switches can be directly controlled by the BMS's logic, enabling automated responses to various conditions, such as temperature thresholds, state of charge, or fault conditions. This integration enhances the overall system's responsiveness and reliability.</li> <li>Diagnostic Feedback - The BMS provides diagnostic feedback for each low-side switch, allowing for real-time monitoring of their status. This feature helps in detecting any potential issues, such as open or short circuits, and ensures that corrective actions can be taken promptly.</li> </ul>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/index.html#fault-detection-and-diagnostics","title":"Fault Detection and Diagnostics","text":"<ul> <li>Fault Detection - Real-time detection of issues such as short circuits, insulation faults, sensor failures, and communication errors.</li> <li>Diagnostics - Detailed reporting and logging of faults to aid in troubleshooting and maintenance.</li> </ul>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/index.html#high-voltage-interlock-hvil","title":"High-Voltage Interlock (HVIL)","text":"<p>A safety mechanism that ensures the high-voltage system is disconnected or rendered safe in case of tampering, servicing, or emergencies.</p>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/index.html#isolation-monitoring-optional","title":"Isolation Monitoring (Optional)","text":"<p>Continuous monitoring of the isolation resistance between the high-voltage system and the vehicle chassis, ensuring no leakage paths that could pose safety risks. Isolation Monitoring is an optional feature that is enabled by including an Isolation Monitoring Device that is additional to the BMS.  </p>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/index.html#communication-interface","title":"Communication Interface","text":"<ul> <li>CAN Bus - For real-time data exchange with the vehicle's central control system or other external devices.</li> <li>USB Diagnostics and Configuration Interface - Allows for system diagnostics, firmware updates, and configuration changes.</li> </ul>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/index.html#built-in-firmware-self-test","title":"Built-in Firmware Self-Test","text":"<p>Built-in self-test feature (as defined by to IEC 60730-1), which is crucial for ensuring the safe operation of electronic control systems, particularly in environments where safety is paramount.</p> <ul> <li>Firmware Integrity Check - Periodically verifies the integrity of the firmware by performing checksums and other verification methods. This ensures that the firmware has not been corrupted or tampered with, maintaining reliable operation.</li> <li>Memory Testing - Conducts continuous testing of both volatile and non-volatile memory to detect and correct errors, ensuring that data critical to BMS operation is stored and retrieved accurately.</li> <li>CPU Monitoring - Monitors the performance and operation of the CPU, ensuring it is functioning correctly and detecting any abnormal behavior that could indicate potential issues.</li> <li>Peripheral Diagnostics - Regularly checks the status and functionality of essential peripherals, such as ADCs, communication interfaces, and contactor drivers, ensuring that they operate within specified parameters.</li> <li>Watchdog Timer - Implements a watchdog timer that resets the system in the event of a firmware hang or malfunction, providing an additional layer of protection against software-related failures.</li> </ul>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/index.html#firmware-update-capability","title":"Firmware Update Capability","text":"<p>Remote or local capability to update BMS firmware, allowing for improvements, bug fixes, and new feature deployment.</p>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/index.html#security-features","title":"Security Features","text":"<ul> <li>Secure Bootloader - Ensures that only authenticated and encrypted firmware binaries are loaded onto the BMS, preventing unauthorized or malicious firmware updates.</li> <li>Firmware Integrity Checks - Continuously verifies the integrity of the firmware during operation to detect and respond to any corruption or tampering.</li> <li>Access Control - Implements user authentication and role-based access to the BMS configuration and diagnostics interfaces, ensuring that only authorized personnel can make changes or access critical information.</li> </ul>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Safety_Warnings.html","title":"Warnings","text":"<p>A properly designed BMS system will protect a battery pack from being operated outside of acceptable limits.  However, a poorly implemented system may not provide the expected protection \u2013 the Prohelion BMS must be installed in a professional and competent manner to function as designed. </p> <p>Attention should also be paid to the larger system that the vehicle is part of, especially the systems associated with charging and the infrastructure to support it.  As well as using the BMS to protect the pack, additional systems should be provided as backup as part of the charging infrastructure, for instance: fitting of smoke detectors; overcurrent and RCD protection in the AC supply; regular physical checks of charge cabling and connections; regular review of telemetry data for abnormal readings.   </p> <p>This list is not exhaustive, and it is the responsibility of the system designer / installer to conduct their own failure mode analysis and determine what is required. </p> <p>Working Around Batteries is DANGEROUS</p> <p>Not only are lethal high voltages present, but individual cells can also put out thousands of amps when shorted, for example with a stray wire or dropped tool, throwing out arcs and molten metal. </p> <p>Ensure Your Pack Is Correctly Fused</p> <p>The battery pack must be fused in each physical pack section with a fuse rated for at least the full DC pack voltage.  Note that it must be a DC rated fuse. </p> <p>Selection of fuse type and current rating is beyond the scope of this document, as it depends on expected load profile and duration, cable sizing and temperature rating, cable installation methods, and short-circuit rating of the pack, among other factors. </p> <p>Check the legal requirements in your jurisdiction for using licensed technicians for this type of work. </p> <p>Stay Safe</p> <ul> <li>Wear eye protection.  </li> <li>Use insulated tools.  </li> <li>Take extreme caution.</li> <li>Go slow. </li> </ul> <p>Think through every step before doing it. </p>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Components/Battery_Junction_Unit.html","title":"Prohelion BMS D1000 Gen2 - Battery Junction Unit","text":"<p>This section provides information on the Prohelion D1000 Gen2 Battery Junction Unit (BJU). </p>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Components/Battery_Junction_Unit.html#supported-devices","title":"Supported Devices","text":"<p>The Prohelion D1000 Gen2 Battery Management Unit (BMU) supports the following devices as the Battery Junction Unit (BJU):</p>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Components/Battery_Junction_Unit.html#option-1-isabellenhuette-ivt-s-high-precision-current-measurement-system","title":"Option #1 - Isabellenhuette IVT-S - High Precision Current Measurement System","text":"<p>For more information on the Isabellenhuette IVT-S, see the datasheet: Datasheet-IVT-S-V1.03.pdf </p>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Components/Battery_Junction_Unit.html#expected-usage","title":"Expected Usage","text":"<p>The Prohelion D1000 Gen2 Battery Management Unit (BMU) firmware expects the following IVT-S measurement channel arrangement.  View in context</p> IVT-S Channel Battery Measurement Current Battery Current Voltage 1 (U1) Battery Voltage Voltage 2 (U2) Charger Voltage Voltage 3 (U3) Load Voltage <p>Coming Soon!</p> <p>As other similar devices become available, we will begin to integrate them into the standard firmware release.</p>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Components/Cell_Management_Unit.html","title":"Prohelion BMS D1000 Gen2 - Hardware Components","text":"<p>This section provides information on the Prohelion D1000 Gen2 Cell Management Unit (CMU). </p> <p></p> Figure 1:  Prohelion BMS D1000 Gen2 CMU Cell Sense Connector"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Components/Cell_Management_Unit.html#features","title":"Features","text":"<ul> <li>Up to 14 Cell Voltage Measurements at 1mV Accuracy</li> <li>Up to 4 Temperature Measurements</li> <li>Up to 650 mA Balancing Current per Cell</li> <li>Support ASIL D Requirements for Cell Voltage, Temperature, Communication</li> <li>AECQ-100 Grade 1 Temperature Range</li> <li>Isolated Battery Management Daisy-Chain Protocol</li> </ul>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Components/Cell_Management_Unit.html#specifications","title":"Specifications","text":"Parameter Value Operating Voltage Range 9 V to 65 V Operating Temperature Range -40\u00b0C to +125\u00b0C Ultra-Low-Power Operation Shutdown Mode: 2\u00b5A Number of Cell Voltage Measurements 4-14 (configurable) Number of Temperature Measurements 0-4 (configurable) Measurement Accuracy 1mV Accuracy (3.6V, +25\u00b0C), 2mV Accuracy (+5\u00b0C to +40\u00b0C), 4.5mV Accuracy (-40\u00b0C to +125\u00b0C) Balancing Current 650 mA @ 100% duty-cycle"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Components/Cell_Management_Unit.html#dimensions","title":"Dimensions","text":"Figure 1:  Prohelion BMS D1000 Gen2 CMU"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Components/Cell_Management_Unit.html#connectors-and-pinouts","title":"Connectors and Pinouts","text":"Connector Name Receptacle Part Number Plug Part Number Cell Sense Connector JAE Electronics MX34R32HF4T JAE Electronics MX34032SF1 Upper Communication Port JAE Electronics MX34R08HF4T JAE Electronics MX34008SF4 Lower Communication Port JAE Electronics MX34R08HF4T JAE Electronics MX34008SF4"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Components/Cell_Management_Unit.html#cell-sense-connector-pinout","title":"Cell Sense Connector Pinout","text":"Figure 1:  Prohelion BMS D1000 Gen2 CMU Cell Sense Connector Pin Number Label Pin Number Label 1 Not Connected 17 Not Connected 2 Not Connected 18 Not Connected 3 Top of Stack (see note <sup>1</sup>) 19 Cell 14+ 4 Cell 13+ 20 Cell 12+ 5 Cell 11+ 21 Cell 10+ 6 Cell 9+ 22 Cell 8+ 7 Cell 7+ 23 Cell 6+ 8 Cell 5+ 24 Cell 4+ 9 Cell 3+ 25 Cell 2+ 10 Cell 1+ 26 Cell 1- (GND) (see note <sup>2</sup>) 11 Not Connected 27 Cell 1- (GND) (see note <sup>2</sup>) 12 Not Connected 28 Not Connected 13 Temp 4 - GND (see note <sup>3</sup>) 29 Temp A4 14 Temp 3 - GND (see note <sup>3</sup>) 30 Temp A3 15 Temp 2 - GND (see note <sup>3</sup>) 31 Temp A2 16 Temp 1 - GND (see note <sup>3</sup>) 32 Temp A1"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Components/Cell_Management_Unit.html#upper-communication-port-pinout","title":"Upper Communication Port Pinout","text":"Pin Number Label Pin Number Label 1 TX Upper Positive 5 TX Upper Negative 2 Not Connected 6 Not Connected 3 Not Connected 7 Not Connected 4 RX Upper Negative 8 RX Upper Negative"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Components/Cell_Management_Unit.html#lower-communication-port-pinout","title":"Lower Communication Port Pinout","text":"Pin Number Label Pin Number Label 1 TX Lower Positive 5 TX Lower Negative 2 Not Connected 6 Not Connected 3 Not Connected 7 Not Connected 4 RX Lower Negative 8 RX Lower Negative <ol> <li> <p>Note 1: Top of stack is to be connected to the highest potential cell of the CMU. E.g. If the CMU is only measuring 10 cells, Top of Stack is considered to be the 10th cell (Cell 10+).\u00a0\u21a9</p> </li> <li> <p>Note 2: Pins labelled as \"Cell 1-\" are the ground reference for the CMU. They are not the same as battery ground or any other ground.\u00a0\u21a9\u21a9</p> </li> <li> <p>Note 3: The pins labelled as \"Temp X - GND\" on the temp sense connector is not to be used for anything other than providing a ground reference for the respective thermistor on the same connector. They are not the same as battery ground or any other ground.  A short-circuit between battery ground and the thermistor ground could result in damage.\u00a0\u21a9\u21a9\u21a9\u21a9</p> </li> </ol>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Components/Battery_Management_Unit/Battery_Management_Unit_V1.html","title":"Prohelion BMS D1000 Gen2 - Hardware Components","text":"<p>This section provides information on the Prohelion D1000 Gen2 Battery Management Unit (BMU). </p> <p></p> Figure 1:  Prohelion BMS D1000 Gen2 BMU"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Components/Battery_Management_Unit/Battery_Management_Unit_V1.html#features","title":"Features","text":"<ul> <li>5 contactor outputs</li> <li>3 low-side switches</li> <li>2 non-isolated CAN bus networks (Internal and Charger)</li> <li>1 isolated CAN bus network (External)</li> <li>Pressure and humidity sensor</li> <li>VOC and NOx sensor</li> <li>Temperature sensors</li> </ul>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Components/Battery_Management_Unit/Battery_Management_Unit_V1.html#specifications","title":"Specifications","text":"Parameter Value BMS Supply Voltage 12 V / 24 V  (two variants) BMS Supply Current 80 mA (excluding contactors)"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Components/Battery_Management_Unit/Battery_Management_Unit_V1.html#dimensions","title":"Dimensions","text":"Figure 2:  Prohelion BMS D1000 Gen2 BMU Drawing 1 Figure 3:  Prohelion BMS D1000 Gen2 BMU Drawing 2"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Components/Battery_Management_Unit/Battery_Management_Unit_V1.html#connectors-and-pinouts","title":"Connectors and Pinouts","text":"Connector Name Receptacle Part Number Plug Part Number 12V/24V Input Port Wurth WR-MPC4 649002227222 Wurth WR-MPC4 649002113322 Contactor Ports Wurth WR-MPC4 649004227222 Wurth WR-MPC4 649004113322 Low-Side Switch Ports Wurth WR-WTB 61900319521 Wurth WR-WTB 61900311621 HVIL Port Wurth WR-MPC4 649002227222 Wurth WR-MPC4 649002113322 CAN Ports Wurth WR-MPC3 66200621022 Wurth WR-MPC3 662006113322 CMU Communication Ports JAE Electronics MX34R08HF4T JAE Electronics MX34008SF4"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Components/Battery_Management_Unit/Battery_Management_Unit_V1.html#12v24v-input-port","title":"12V/24V Input Port","text":"Pin Number Label 1 BMS Input Power+  (12V/24V) 2 BMS Ground"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Components/Battery_Management_Unit/Battery_Management_Unit_V1.html#contactor-port-pinout","title":"Contactor Port Pinout","text":"Pin Number Label 1 Contactor Power+ (12V/24V) (switched) 2 Auxiliary Power+ (12V/24V) 3 Contactor Ground 3 Auxiliary Ground (sense)"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Components/Battery_Management_Unit/Battery_Management_Unit_V1.html#low-side-switch-port-pinout","title":"Low-Side Switch Port Pinout","text":"Pin Number Label 1 Ground (switched) 2 Power+ (12V/24V) 3 Auxiliary Ground (sense)"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Components/Battery_Management_Unit/Battery_Management_Unit_V1.html#hvil-port-pinout","title":"HVIL Port Pinout","text":"Pin Number Label 1 HVIL Out 2 HVIL In"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Components/Battery_Management_Unit/Battery_Management_Unit_V1.html#can-communication-port-pinout","title":"CAN Communication Port Pinout","text":"Pin Number Label 1 CAN Power+ (12V/24) 2 CAN Ground 3 CAN Shield 4 CAN High 5 CAN Low 6 CAN Ground"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Components/Battery_Management_Unit/Battery_Management_Unit_V1.html#cmu-communication-port-pinout","title":"CMU Communication Port Pinout","text":"Pin Number Label Pin Number Label 1 TX Positive 5 TX Negative 2 Not Connected 6 Not Connected 3 Not Connected 7 Not Connected 4 RX Negative 8 RX Negative"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Components/Battery_Management_Unit/Battery_Management_Unit_V2.html","title":"Prohelion BMS D1000 Gen2 - Hardware Components","text":"<p>This section provides information on the Prohelion D1000 Gen2 Battery Management Unit (BMU). </p> <p></p> Figure 1:  Prohelion BMS D1000 Gen2 BMU"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Components/Battery_Management_Unit/Battery_Management_Unit_V2.html#features","title":"Features","text":"<ul> <li>5 contactor outputs</li> <li>3 low-side switches</li> <li>2 non-isolated CAN bus networks (Internal and Reserved)</li> <li>1 isolated CAN bus network (External)</li> <li>Pressure and humidity sensor</li> <li>VOC and NOx sensor</li> <li>Temperature sensors</li> </ul>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Components/Battery_Management_Unit/Battery_Management_Unit_V2.html#specifications","title":"Specifications","text":"Parameter Value BMS Supply Voltage 12 V / 24 V  (two variants) BMS Supply Current 80 mA (excluding contactors)"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Components/Battery_Management_Unit/Battery_Management_Unit_V2.html#dimensions","title":"Dimensions","text":"Figure 2:  Prohelion BMS D1000 Gen2 BMU Drawing 1 Figure 3:  Prohelion BMS D1000 Gen2 BMU Drawing 2"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Components/Battery_Management_Unit/Battery_Management_Unit_V2.html#connectors-and-pinouts","title":"Connectors and Pinouts","text":"Connector Name Receptacle Part Number Plug Part Number Power &amp; Contactor Ports JAE Electronics MX34R24HF4T JAE Electronics MX34024SF1 HVIL, Low-Side Switch &amp; BJU Ports JAE Electronics MX34R24HF4T JAE Electronics MX34024SF1 Isolated CAN Port (CAN3) JAE Electronics MX34R12HF4T JAE Electronics MX34012SF1 CMU Bus Upper JAE Electronics MX34R08HF4T JAE Electronics MX34008SF4 CMU Bus Lower JAE Electronics MX34R08HF4T JAE Electronics MX34008SF4"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Components/Battery_Management_Unit/Battery_Management_Unit_V2.html#power-contactor-ports","title":"Power &amp; Contactor Ports","text":"Pin Number Label Pin Number Label 1 BMS Input Power+  (12V/24V) 13 BMS Input Power+  (12V/24V) 2 BMS Input Power- 14 BMS Input Power- 3 BMS Ground 15 Contactor 1 Positive 4 Contactor 1 Auxiliary Negative 16 Contactor 1 Auxiliary Positive 5 BMS Ground 17 Contactor 2 Positive 6 Contactor 2 Auxiliary Negative 18 Contactor 2 Auxiliary Positive 7 BMS Ground 19 Contactor 3 Positive 8 Contactor 3 Auxiliary Negative 20 Contactor 3 Auxiliary Positive 9 BMS Ground 21 Contactor 4 Positive 10 Contactor 4 Auxiliary Negative 22 Contactor 4 Auxiliary Positive 11 BMS Ground 23 Contactor 5 Positive 12 Contactor 5 Auxiliary Negative 24 Contactor 5 Auxiliary Positive"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Components/Battery_Management_Unit/Battery_Management_Unit_V2.html#hvil-low-side-switch-bju-ports","title":"HVIL, Low-Side Switch &amp; BJU Ports","text":"Pin Number Label Pin Number Label 1 HVIL Positive 13 HVIL Input 2 BMS Ground 14 CAN1 Shield 3 CAN1 Low 15 CAN1 High 4 Not Connected 16 BJU Power 5 Low-Side Switch 3 Negative 17 Low-Side Switch 3 Positive 6 Not Connected 18 Low-Side Switch 3 Sense 7 Low-Side Switch 2 Negative 19 Low-Side Switch 2 Positive 8 Not Connected 20 Low-Side Switch 2 Sense 9 Low-Side Switch 1 Negative 21 Low-Side Switch 1 Positive 10 Not Connected 22 Low-Side Switch 1 Sense 11 BMS Ground 23 CAN2 Shield 12 CAN2 Low<sup>1</sup> 24 CAN2 High<sup>1</sup>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Components/Battery_Management_Unit/Battery_Management_Unit_V2.html#isolated-can-port-can3","title":"Isolated CAN Port (CAN3)","text":"Pin Number Label Pin Number Label 1 CAN3 Low 7 CAN3 High 2 CAN3 Ground 8 CAN3 Power 3 Not Connected 9 CAN3 Shield 4 CAN3 Low 10 CAN3 High 5 CAN3 Ground 11 CAN3 Power 6 Not Connected 12 CAN3 Shield"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Components/Battery_Management_Unit/Battery_Management_Unit_V2.html#cmu-bus-port-upper","title":"CMU Bus Port Upper","text":"Pin Number Label Pin Number Label 1 TX Positive 5 TX Negative 2 Not Connected 6 Not Connected 3 Not Connected 7 Not Connected 4 RX Negative 8 RX Negative"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Components/Battery_Management_Unit/Battery_Management_Unit_V2.html#cmu-bus-port-lower","title":"CMU Bus Port Lower","text":"Pin Number Label Pin Number Label 1 TX Positive 5 TX Negative 2 Not Connected 6 Not Connected 3 Not Connected 7 Not Connected 4 RX Negative 8 RX Negative <ol> <li> <p>CAN2 is reserved for future use.\u00a0\u21a9\u21a9</p> </li> </ol>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.1/index.html","title":"Prohelion BMS D1000 Gen2 - Firmware V1.1","text":"<p>This section provides information on the features, state machines, communication interfaces, configuration parameters and other logic that is specific to Firmware Version 1.1.XX. </p>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.1/Configuration_Parameters.html","title":"Prohelion BMS D1000 Gen2 - Configuration Parameters","text":"<p>This section provides information on each of the BMS Configuration Parameters. </p>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.1/Configuration_Parameters.html#device-serial-number","title":"Device Serial Number","text":"Field Value Description The serial number that is unique to each unit Permission Read Only Index 0x32 Scale 1 Type UINT16 Units NA"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.1/Configuration_Parameters.html#device-type-id","title":"Device Type ID","text":"Field Value Description The device type identifier (Prohelion BMS D1000 Gen2) Permission Read Only Index 0x33 Scale 1 Type UINT16 Units NA"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.1/Configuration_Parameters.html#bitrate","title":"Bitrate","text":"Field Value Description The CAN bus bitrate Permission Admin Index 0x34 Scale 1 Type UINT16 Units kb/s"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.1/Configuration_Parameters.html#base-can-id","title":"Base CAN ID","text":"Field Value Description The base CAN ID of the device Permission Admin Index 0x35 Scale 1 Type UINT16 Units NA"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.1/Configuration_Parameters.html#number-of-cmu-nodes","title":"Number of CMU Nodes","text":"Field Value Description The number of CMU nodes Permission User Index 0x36 Scale 1 Type UINT16 Units NA"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.1/Configuration_Parameters.html#number-of-cells-per-node","title":"Number of Cells per Node","text":"Field Value Description The number of cells at each CMU node Permission User Index 0x100 Scale 1 Type UINT16 ARRAY Length 32 Units NA"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.1/Configuration_Parameters.html#number-of-temp-sensors-per-node","title":"Number of Temp Sensors per Node","text":"Field Value Description The number of temp sensors at each CMU node Permission User Index 0x140 Scale 1 Type UINT16 ARRAY Length 32 Units NA"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.1/Configuration_Parameters.html#precharge-resistance","title":"Precharge Resistance","text":"Field Value Description The precharge resistance value Permission User Index 0x39 Scale 1 Type UINT16 Units Ohms"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.1/Configuration_Parameters.html#pack-capacity","title":"Pack Capacity","text":"Field Value Description The pack capacity in watt-hours Permission User Index 0x40 Scale 0.1 Type UINT16 Units Wh"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.1/Configuration_Parameters.html#critical-cell-over-voltage","title":"Critical Cell Over Voltage","text":"Field Value Description The critical cell over-voltage threshold Permission User Index 0x41 Scale 0.001 Type UINT16 Units V"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.1/Configuration_Parameters.html#warning-cell-over-voltage","title":"Warning Cell Over Voltage","text":"Field Value Description The warning cell over-voltage threshold Permission User Index 0x42 Scale 0.001 Type UINT16 Units V"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.1/Configuration_Parameters.html#balancing-voltage-threshold","title":"Balancing Voltage Threshold","text":"Field Value Description The cell balance voltage threshold Permission User Index 0x43 Scale 0.001 Type UINT16 Units V"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.1/Configuration_Parameters.html#warning-cell-under-voltage","title":"Warning Cell Under Voltage","text":"Field Value Description The warning cell under-voltage threshold Permission User Index 0x44 Scale 0.001 Type UINT16 Units V"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.1/Configuration_Parameters.html#critical-cell-under-voltage","title":"Critical Cell Under Voltage","text":"Field Value Description The critical cell under-voltage threshold Permission User Index 0x45 Scale 0.001 Type UINT16 Units V"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.1/Configuration_Parameters.html#maximum-temperature","title":"Maximum Temperature","text":"Field Value Description The maximum cell temperature threshold Permission User Index 0x46 Scale 0.1 Type INT16 Units \u00b0C"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.1/Configuration_Parameters.html#minimum-temperature","title":"Minimum Temperature","text":"Field Value Description The minimum cell temperature threshold Permission User Index 0x47 Scale 0.1 Type INT16 Units \u00b0C"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.1/Configuration_Parameters.html#maximum-charge-current","title":"Maximum Charge Current","text":"Field Value Description The maximum charge current threshold Permission User Index 0x48 Scale 0.001 Type INT16 Units A"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.1/Configuration_Parameters.html#maximum-discharge-current","title":"Maximum Discharge Current","text":"Field Value Description The maximum discharge current threshold Permission User Index 0x49 Scale 0.001 Type INT16 Units A"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.1/Configuration_Parameters.html#maximum-precharge-current","title":"Maximum Precharge Current","text":"Field Value Description The maximum precharge current threshold Permission User Index 0x50 Scale 0.001 Type INT16 Units A"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.1/Configuration_Parameters.html#maximum-voltage-delta","title":"Maximum Voltage Delta","text":"Field Value Description The maximum precharge voltage-delta threshold Permission User Index 0x51 Scale 0.001 Type INT16 Units V"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.1/Configuration_Parameters.html#thermistor-beta-value","title":"Thermistor Beta Value","text":"Field Value Description Beta-value of the thermistors being used on the CMU Nodes Permission User Index 0x52 Scale 1 Type UINT16 Units"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.1/Configuration_Parameters.html#contactor-auxiliary-check-enable","title":"Contactor Auxiliary Check Enable","text":"Field Value Description A bitfield that allows the auxiliary inputs of each contactor to be ignored Permission User Index 0x53 Scale 1 Type UINT16 Units Bitfield"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.1/Configuration_Parameters.html#maximum-allowable-precharge-time","title":"Maximum Allowable Precharge Time","text":"Field Value Description The maximum precharge time threshold Permission User Index 0x54 Scale 0.001 Type UINT16 Units Seconds"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.1/Configuration_Parameters.html#minimum-temperature-of-the-bmu","title":"Minimum Temperature of the BMU","text":"Field Value Description The minimum temperature threshold of the BMU Permission User Index 0x55 Scale 0.1 Type INT16 Units \u00b0C"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.1/Configuration_Parameters.html#maximum-temperature-of-the-bmu","title":"Maximum Temperature of the BMU","text":"Field Value Description The maximum temperature threshold of the BMU Permission User Index 0x56 Scale 0.1 Type INT16 Units \u00b0C"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.1/Messages_and_Signals.html","title":"Prohelion BMS D1000 Gen2 - DBC Messages and Signals","text":"<p>This section provides information on the CAN bus messages and signals used in the Prohelion BMS D1000 Gen2. Each message is identified by its unique ID, and the structure, including signals, is described.</p> <p>Default BASE ID</p> <p>The following Message IDs assume a default CAN Bus BASE ID of <code>0x600</code>. The BASE ID of each device is configurable via the device configuration. If the BASE ID has been configured differently on the device, make sure to account for the shift in the Message IDs. The Message ID offsets from the BASE ID will remain the same regardless of the device configuration. </p>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.1/Messages_and_Signals.html#overview","title":"Overview","text":"Message ID Name 0x600 Device Heartbeat 0x601 Device Firmware Info 0x606 BMS State Info 0x607 BMS Current Data 0x608 BMS Voltage Data 0x609 BMS Auxiliary Data 0x60A BMS SOC Data 0x60B BMS SOH Data 0x60C BMS Counter Data 0x60D Node Info 0x60E Node Cell Info 0x60F Node Temp Info"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.1/Messages_and_Signals.html#device-information","title":"Device Information","text":""},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.1/Messages_and_Signals.html#device-heartbeat","title":"Device Heartbeat","text":"Field Value Message ID <code>0x600</code> (1536) Description Device heartbeat information."},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.1/Messages_and_Signals.html#signals","title":"Signals","text":"Signal Name Start Bit Length Factor Offset Min Value Max Value Unit Description DeviceType 0 32 bits 1 0 N/A N/A N/A Type of device in the system DeviceSerial 32 32 bits 1 0 N/A N/A N/A Unique serial number of the device"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.1/Messages_and_Signals.html#device-firmware-info","title":"Device Firmware Info","text":"Field Value Message ID <code>0x601</code> (1537) Description Firmware version information."},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.1/Messages_and_Signals.html#signals_1","title":"Signals","text":"Signal Name Start Bit Length Factor Offset Min Value Max Value Unit Description FirmwareMajorVersion 0 8 bits 1 0 N/A N/A N/A Major version of firmware FirmwareMinorVersion 8 8 bits 1 0 N/A N/A N/A Minor version of firmware FirmwarePatchVersion 16 16 bits 1 0 N/A N/A N/A Patch version of firmware"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.1/Messages_and_Signals.html#bms-information","title":"BMS Information","text":""},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.1/Messages_and_Signals.html#bms-state-info","title":"BMS State Info","text":"Field Value Message ID <code>0x606</code> (1542) Description Information on BMS states, failures, and faults."},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.1/Messages_and_Signals.html#signals_2","title":"Signals","text":"Signal Name Start Bit Length Factor Offset Min Value Max Value Unit Description BMSState 0 16 bit 1 0 N/A N/A N/A BMS State BMSPrechargeFault 16 8 bit 1 0 N/A N/A N/A Precharge Fault Reason Bitfield BMSContactorFault 24 8 bits 1 0 N/A N/A N/A Contactor Fault ID Bitfield BMSReason 32 32 bit 1 0 N/A N/A N/A BMS Safe-State Reason"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.1/Messages_and_Signals.html#bms-state-bitfield-table","title":"BMS State Bitfield Table","text":"Bit Position Hex Value State Code Description 0 0x01 INITIALISE Initialisation state 1 0x02 CALIBRATE Calibration state 2 0x04 IDLE Idle state 3 0x08 CONNECT Connect state 4 0x10 PRECHARGE Precharge state 5 0x20 ENABLED Enabled state 6 0x40 CHARGE Charging state 7 0x80 SAFE Safe state"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.1/Messages_and_Signals.html#bms-precharge-fault-reason-bitfield-table","title":"BMS Precharge Fault Reason Bitfield Table","text":"Bit Position Hex Value Reason Code Description 0 0x01 TIMEOUT Timeout issue 1 0x02 OVER_CURRENT_MAX Overcurrent maximum detected 2 0x04 OVER_CURRENT_PCHG Overcurrent during precharge 3 0x08 NEG_CURRENT Negative current detected 4 0x10 STABLE_CURRENT Stable current issue 5 0x20 OVER_VOLTAGE Overvoltage detected 6 0x40 STABLE_VOLTAGE Stable voltage issue"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.1/Messages_and_Signals.html#bms-contactor-id-fault-bitfield-table","title":"BMS Contactor ID Fault Bitfield Table","text":"Bit Position Hex Value Contactor Code Description 0 0x01 CONTACTOR1 Contactor 1 fault 1 0x02 CONTACTOR2 Contactor 2 fault 2 0x04 CONTACTOR3 Contactor 3 fault 3 0x08 CONTACTOR4 Contactor 4 fault 4 0x10 CONTACTOR5 Contactor 5 fault"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.1/Messages_and_Signals.html#bms-reason-safe-state-reason-bitfield-table","title":"BMS Reason Safe-State Reason Bitfield Table","text":"Bit Position Hex Value Reason Code Description 0 0x00000001 SELFTEST_FAIL Self-test failure 1 0x00000002 WATCHDOG_FAIL Watchdog failure 2 0x00000004 CONTACTOR_FAIL Contactor failure 3 0x00000008 HVIL HVIL issue 4 0x00000010 BATT_VOLTAGE Battery voltage issue 5 0x00000020 PACK_VOLTAGE Pack voltage issue 6 0x00000040 LOAD_VOLTAGE Load voltage issue 7 0x00000080 FUSE_VOLTAGE Fuse voltage issue 8 0x00000100 OVER_CURRENT Overcurrent detected 9 0x00000200 NODE_COUNT Node count issue 10 0x00000400 CELL_COUNT Cell count issue 11 0x00000800 TEMP_COUNT Temperature count issue 12 0x00001000 BJU_TIMEOUT BJU timeout 13 0x00002000 PACK_TIMEOUT Pack timeout 14 0x00004000 CONTROL_TIMEOUT Control timeout 15 0x00008000 SENSOR_TIMEOUT Sensor timeout 16 0x00010000 OVER_VOLT Cell over-voltage detected 17 0x00020000 UNDER_VOLT Cell under-voltage detected 18 0x00040000 OVER_TEMP Cell over-temperature detected 19 0x00080000 UNDER_TEMP Cell under-temperature detected 20 0x00100000 PRESSURE Pressure issue 21 0x00200000 HUMIDITY Humidity issue 22 0x00400000 VOC VOC (Volatile Organic Compounds) issue 23 0x00800000 NOX NOx (Nitrogen Oxides) issue"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.1/Messages_and_Signals.html#bms-current-data","title":"BMS Current Data","text":"Field Value Message ID <code>0x607</code> (1543) Description Current measurement data."},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.1/Messages_and_Signals.html#signals_3","title":"Signals","text":"Signal Name Start Bit Length Factor Offset Min Value Max Value Unit Description InstantaneousCurrent 0 32 bits -0.001 0 N/A N/A A Instantaneous current measurement FilteredCurrent 32 32 bits -0.001 0 N/A N/A A Filtered current measurement"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.1/Messages_and_Signals.html#bms-voltage-data","title":"BMS Voltage Data","text":"Field Value Message ID <code>0x608</code> (1544) Description Voltage measurement data."},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.1/Messages_and_Signals.html#signals_4","title":"Signals","text":"Signal Name Start Bit Length Factor Offset Min Value Max Value Unit Description BatteryVoltage 0 32 bits 0.001 0 N/A N/A V Battery voltage measurement LoadVoltage 32 32 bits 0.001 0 N/A N/A V Load voltage measurement"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.1/Messages_and_Signals.html#bms-auxiliary-data","title":"BMS Auxiliary Data","text":"Field Value Message ID <code>0x609</code> (1545) Description Auxiliary data."},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.1/Messages_and_Signals.html#signals_5","title":"Signals","text":"Signal Name Start Bit Length Factor Offset Min Value Max Value Unit Description AuxiliaryVoltage 0 32 bits 0.001 0 N/A N/A V Auxiliary voltage measurement Power 32 32 bits 0.001 0 N/A N/A V Power measurement"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.1/Messages_and_Signals.html#bms-soc-data","title":"BMS SOC Data","text":"Field Value Message ID <code>0x60A</code> (1547) Description Counter data."},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.1/Messages_and_Signals.html#signals_6","title":"Signals","text":"Signal Name Start Bit Length Factor Offset Min Value Max Value Unit Description BatterySoC 0 16 bits 0.1 0 0 1000 % Battery SOC Percentage"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.1/Messages_and_Signals.html#bms-soh-data","title":"BMS SOH Data","text":"Field Value Message ID <code>0x60B</code> (1547) Description Counter data."},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.1/Messages_and_Signals.html#signals_7","title":"Signals","text":"Signal Name Start Bit Length Factor Offset Min Value Max Value Unit Description BatterySoH 0 16 bits 0.1 0 0 1000 % Battery SOH Percentage"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.1/Messages_and_Signals.html#bms-counter-data","title":"BMS Counter Data","text":"Field Value Message ID <code>0x60C</code> (1548) Description Counter data."},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.1/Messages_and_Signals.html#signals_8","title":"Signals","text":"Signal Name Start Bit Length Factor Offset Min Value Max Value Unit Description CurrentCounter 0 32 bits 0.001 0 N/A N/A As Current counter measurement EnergyCounter 32 32 bits 0.001 0 N/A N/A Wh Energy counter measurement"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.1/Messages_and_Signals.html#node-info","title":"Node Info","text":"Field Value Message ID <code>0x60D</code> (1549) Description Node information."},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.1/Messages_and_Signals.html#signals_9","title":"Signals","text":"Signal Name Start Bit Length Factor Offset Min Value Max Value Unit Description TotalPackVoltage 0 32 bits 0.001 0 N/A N/A V Total pack voltage measurement PackBalanceThreshold 32 16 bits 0.001 0 N/A N/A V Pack balance threshold measurement TotalCellsBalancing 48 16 bits 1 0 N/A N/A - Total cells balancing status"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.1/Messages_and_Signals.html#node-cell-info","title":"Node Cell Info","text":"Field Value Message ID <code>0x60E</code> (1550) Description Cell information."},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.1/Messages_and_Signals.html#signals_10","title":"Signals","text":"Signal Name Start Bit Length Factor Offset Min Value Max Value Unit Description MaxCellVoltage 0 16 bits 0.001 0 N/A N/A V Maximum cell voltage measurement MaxCellVoltageNodeID 16 8 bits 1 0 N/A N/A - Node ID for max cell voltage MaxCellVoltageCellID 24 8 bits 1 0 N/A N/A - Cell ID for max cell voltage MinCellVoltage 32 16 bits 0.001 0 N/A N/A V Minimum cell voltage measurement MinCellVoltageNodeID 48 8 bits 1 0 N/A N/A - Node ID for min cell voltage MinCellVoltageCellID 56 8 bits 1 0 N/A N/A - Cell ID for min cell voltage"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.1/Messages_and_Signals.html#node-temp-info","title":"Node Temp Info","text":"Field Value Message ID <code>0x60F</code> (1551) Description Temperature information."},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.1/Messages_and_Signals.html#signals_11","title":"Signals","text":"Signal Name Start Bit Length Factor Offset Min Value Max Value Unit Description MaxTemperature 0 16 bits -0.1 0 N/A N/A C Maximum temperature measurement MaxTemperatureNodeID 16 8 bits 1 0 N/A N/A - Node ID for max temperature MaxTemperatureSensorID 24 8 bits 1 0 N/A N/A - Sensor ID for max temperature MinTemperature 32 16 bits -0.1 0 N/A N/A C Minimum temperature measurement MinTemperatureNodeID 48 8 bits 1 0 N/A N/A - Node ID for min temperature MinTemperatureSensorID 56 8 bits 1 0 N/A N/A - Sensor ID for min temperature"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.1/State_Machine.html","title":"Prohelion BMS D1000 Gen2 - BMS State Machine","text":"<p>This section provides information on the BMS State Machine. The BMS State Machine is responsible for engaging and disengaging the battery contactors (main and charge outputs). The BMS State Machine continuously monitors the status all of sensors and external devices to ensure the battery stays within it's safe area of operation.</p>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.1/State_Machine.html#state-machine-diagram","title":"State Machine Diagram","text":"<pre><code>stateDiagram-v2\n  [*] --&gt; INITIALISE\n  INITIALISE --&gt; CALIBRATE\n  CALIBRATE --&gt; SAFE\n  SAFE --&gt; ACTIVE: Errors Cleared\n  ACTIVE --&gt; SAFE\n  state ACTIVE {\n        [*] --&gt; IDLE: IDLE Command\n        IDLE --&gt; CONNECT: CONNECT Command\n        IDLE --&gt; CONDITION: CONDITION Command\n        CONDITION --&gt; IDLE: IDLE Command\n        CONNECT --&gt; PRECHARGE: ENABLE Command\n        PRECHARGE --&gt; ENABLED: Precharge Passed\n        ENABLED --&gt; CHARGE: CHARGE Command\n        CHARGE --&gt; ENABLED: ENABLE Command\n        ENABLED --&gt; IDLE: IDLE Command\n    }\n</code></pre>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.1/State_Machine.html#state-descriptions","title":"State Descriptions","text":"STATE Contactors Engaged Balancing Enabled Description INITIALISE NONE NO Initialises all the peripherals and external devices CALIBRATE NONE NO Performs self-calibration and start self-tests SAFE NONE NO Ensure the system is in a safe state by disabling all contactor outputs IDLE NONE NO Signals that the system is ready to be enabled CONNECT 1 NO Engages the main negative contactor and connects the battery negative to the load negative, allowing the BMS to measure the load voltage PRECHARGE 1 &amp; 2 NO Engages the precharge contactor and waits for the load voltage to reach the battery voltage, monitors for precharge faults ENABLED 1 &amp; 3 YES Engages the main positive contactor and monitors for any safety faults CHARGE 1 &amp; 3 &amp; 4 &amp; 5 YES Engages the positive and negative charge contactors, allows a session charging to begin CONDITION NONE YES Allows condition of cells without enabling contactors"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.2/index.html","title":"Prohelion BMS D1000 Gen2 - Firmware V1.2","text":"<p>This section provides information on the features, state machines, communication interfaces, configuration parameters and other logic that is specific to Firmware Version 1.2.XX. </p>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.2/Configuration_Parameters.html","title":"Prohelion BMS D1000 Gen2 - Configuration Parameters","text":"<p>This section provides information on each of the BMS configuration parameters.</p>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.2/Configuration_Parameters.html#serialnumber","title":"serialNumber","text":"Field Value Description Unique serial number for this unit Permission Admin Index 0x32 Scale 1 Type UINT16 Default 0"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.2/Configuration_Parameters.html#deviceid","title":"deviceID","text":"Field Value Description Unique identifier for this device type Permission Admin Index 0x33 Scale 1 Type UINT16 Max 4472 Min 4476 Values <ul><li>4472: D1000 Gen2 12V rev 1</li><li>4476: D1000 Gen2 24V rev 1</li></ul>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.2/Configuration_Parameters.html#bitrate","title":"bitrate","text":"Field Value Description CAN bitrate that the device communicates with Permission Admin Index 0x34 Scale 1 Type UINT16 Units Enum Max 1000 Min 125 Values <ul><li>125: 125 kb/s</li><li>250: 250 kb/s</li><li>500: 500 kb/s</li><li>1000: 1000 kb/s</li></ul> Default 500"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.2/Configuration_Parameters.html#nodeid","title":"nodeID","text":"Field Value Description Base address for the CAN communication Permission Admin Index 0x35 Scale 1 Type UINT16 Max 0x700 Min 0x000 Default 0x600"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.2/Configuration_Parameters.html#numcmunodes","title":"numCMUNodes","text":"Field Value Description Number of CMU nodes in the system Permission User Index 0x36 Scale 1 Type UINT16 Max 32 Min 1 Default 1"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.2/Configuration_Parameters.html#chargingmethod","title":"chargingMethod","text":"Field Value Description Method used for recharging the battery Permission User Index 0x37 Scale 1 Type UINT16 Units Enum Max 0 Min 2 Values <ul><li>0: None</li><li>1: EVSE</li><li>2: External</li></ul> Default 0"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.2/Configuration_Parameters.html#prechargeresistance","title":"prechargeResistance","text":"Field Value Description Resistance of the precharge resistor Permission User Index 0x39 Scale 0.1 Type UINT16 Units Ohms Max 32000 Min 1 Default 330"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.2/Configuration_Parameters.html#packcapacity","title":"packCapacity","text":"Field Value Description Total Ah of the battery Permission User Index 0x40 Scale 0.1 Type UINT16 Units Ah Max 32000 Min 1 Default 1000"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.2/Configuration_Parameters.html#critcellovervoltage","title":"critCellOverVoltage","text":"Field Value Description Voltage for a single cell at which the BMS will force a disconnect of the battery Permission User Index 0x41 Scale 0.001 Type UINT16 Units V Max 32000 Min 1 Default 4200"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.2/Configuration_Parameters.html#warningcellovervoltage","title":"warningCellOverVoltage","text":"Field Value Description Voltage for a single cell at which the BMS will disable further charging Permission User Index 0x42 Scale 0.001 Type UINT16 Units V Max 32000 Min 1 Default 4150"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.2/Configuration_Parameters.html#cellbalancingvoltage","title":"cellBalancingVoltage","text":"Field Value Description Voltage for a single cell at which the BMS will trigger balancing Permission User Index 0x43 Scale 0.001 Type UINT16 Units V Max 32000 Min 1 Default 4100"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.2/Configuration_Parameters.html#warningcellundervoltage","title":"warningCellUnderVoltage","text":"Field Value Description Voltage for a single cell at which the BMS will disable further discharging Permission User Index 0x44 Scale 0.001 Type UINT16 Units V Max 32000 Min 1 Default 2600"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.2/Configuration_Parameters.html#critcellundervoltage","title":"critCellUnderVoltage","text":"Field Value Description Voltage for a single cell at which the BMS will force a disconnect of the battery Permission User Index 0x45 Scale 0.001 Type UINT16 Units V Max 32000 Min 1 Default 2500"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.2/Configuration_Parameters.html#maxcelltemperature","title":"maxCellTemperature","text":"Field Value Description Temperature upper limit at which the BMS will disconnect the battery Permission User Index 0x46 Scale 0.1 Type INT16 Units \u00b0C Max 2000 Min -2000 Default 600"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.2/Configuration_Parameters.html#mincelltemperature","title":"minCellTemperature","text":"Field Value Description Temperature lower limit at which the BMS will disconnect the battery Permission User Index 0x47 Scale 0.1 Type INT16 Units \u00b0C Max 2000 Min -2000 Default -200"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.2/Configuration_Parameters.html#maxchargecurrent","title":"maxChargeCurrent","text":"Field Value Description Maximum allowed current that the pack will charge at without disconnecting Permission User Index 0x48 Scale 0.1 Type INT16 Units A Max 32000 Min 1 Default 1000"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.2/Configuration_Parameters.html#maxdischargecurrent","title":"maxDischargeCurrent","text":"Field Value Description Maximum allowed current that the pack will discharge at without disconnecting Permission User Index 0x49 Scale 0.1 Type INT16 Units A Max 32000 Min 1 Default 1000"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.2/Configuration_Parameters.html#maxprechargecurrent","title":"maxPrechargeCurrent","text":"Field Value Description Maximum allowed current that the pack will precharge at without failing Permission User Index 0x50 Scale 0.001 Type INT16 Units A Max 32000 Min 0 Default 3000"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.2/Configuration_Parameters.html#maxprechargevoltagedelta","title":"maxPrechargeVoltageDelta","text":"Field Value Description Maximum allowed voltage delta between load voltage and pack voltage before succeeding precharge Permission User Index 0x51 Scale 0.001 Type INT16 Units V Max 32000 Min 0 Default 1000"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.2/Configuration_Parameters.html#thermistorbetavalue","title":"thermistorBetaValue","text":"Field Value Description Thermistor Beta Value for temperature calculations Permission User Index 0x52 Scale 1 Type UINT16 Max 64000 Min 0 Default 3380"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.2/Configuration_Parameters.html#prechargetimeout","title":"prechargeTimeout","text":"Field Value Description Maximum allowable wait time before failing precharge Permission User Index 0x54 Scale 0.001 Type UINT16 Units Seconds Max 64000 Min 0 Default 25000"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.2/Configuration_Parameters.html#bmutemperaturemin","title":"bmuTemperatureMin","text":"Field Value Description Minimum temperature of the BMS Permission User Index 0x55 Scale 0.1 Type INT16 Units \u00b0C Max 32000 Min -32000 Default 600"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.2/Configuration_Parameters.html#bmutemperaturemax","title":"bmuTemperatureMax","text":"Field Value Description Maximum temperature of the BMS Permission User Index 0x56 Scale 0.1 Type INT16 Units \u00b0C Max 32000 Min -32000 Default -200"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.2/Configuration_Parameters.html#bmupressuremin","title":"bmuPressureMin","text":"Field Value Description Minimum pressure of the BMS Permission User Index 0x57 Scale 0.1 Type INT16 Units kPa Max 32000 Min 0 Default 0"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.2/Configuration_Parameters.html#bmupressuremax","title":"bmuPressureMax","text":"Field Value Description Maximum pressure of the BMS Permission User Index 0x58 Scale 0.1 Type INT16 Units kPa Max 32000 Min 0 Default 1200"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.2/Configuration_Parameters.html#bmuhumiditymin","title":"bmuHumidityMin","text":"Field Value Description Minimum humidity of the BMS Permission User Index 0x59 Scale 0.1 Type INT16 Units RH % Max 32000 Min 0 Default 0"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.2/Configuration_Parameters.html#bmuhumiditymax","title":"bmuHumidityMax","text":"Field Value Description Maximum humidity of the BMS Permission User Index 0x5A Scale 0.1 Type INT16 Units RH % Max 32000 Min 0 Default 900"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.2/Configuration_Parameters.html#cellinternalresistance","title":"cellInternalResistance","text":"Field Value Description Nominal internal resistance of the cell Permission User Index 0x5B Scale 0.001 Type UINT16 Units Ohms Max 64000 Min 0 Default 31"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.2/Configuration_Parameters.html#cellnominalcapacity","title":"cellNominalCapacity","text":"Field Value Description Nominal capacity of a singular cell Permission User Index 0x5C Scale 0.001 Type UINT32 Units Ah Max 64000000 Min 1 Default 5000"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.2/Configuration_Parameters.html#contactorconfigauxenable","title":"contactorConfigAuxEnable","text":"Field Value Description Contactor Auxiliary Check Enable Permission User Index 0x60 Scale 1 Type UINT32 Units Bitfield Max 0x11111 Min 0x00000 Default 0x11111"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.2/Configuration_Parameters.html#contactorconfigtypes","title":"contactorConfigTypes","text":"Field Value Description Contactor Type Configuration (NO/NO or NO/NC) Permission User Index 0x61 Scale 1 Type UINT32 Units Bitfield Max 0x11111 Min 0x00000 Default 0x00000"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.2/Configuration_Parameters.html#nodenumcells","title":"nodeNumCells","text":"Field Value Description Number of Cells per node Permission User Index 0x100 Scale 1 Type UINT16 ARRAY Max 14 Min 1 Default 10"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.2/Configuration_Parameters.html#nodenumtemp","title":"nodeNumTemp","text":"Field Value Description Number of Temp sensors per node Permission User Index 0x140 Scale 1 Type UINT16 ARRAY Max 4 Min 0 Default 4"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.2/Configuration_Parameters.html#cellsoclookuptablelength","title":"cellSocLookupTableLength","text":"Field Value Description Length of the SoC/OCV lookup table Permission User Index 0x5D Scale 1 Type UINT16 Max 101 Min 2 Default 101"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.2/Configuration_Parameters.html#cellsoclookuptable","title":"cellSocLookupTable","text":"Field Value Description Single cell voltages associated with its index as state of charge Permission User Index 0x160 Scale 0.001 Type INT16 ARRAY Units V Max 100000 Min 0 Default 2500, 2715, 2826, 2904, 2958, 3005, 3044, 3083, 3105, 3133, 3180, 3222, 3250, 3281, 3309, 3338, 3363, 3385, 3399, 3412, 3424, 3434, 3445, 3453, 3463, 3473, 3483, 3494, 3504, 3514, 3524, 3534, 3543, 3551, 3559, 3567, 3575, 3582, 3589, 3598, 3604, 3612, 3620, 3627, 3635, 3643, 3652, 3660, 3669, 3679, 3688, 3699, 3709, 3720, 3731, 3741, 3750, 3760, 3769, 3781, 3790, 3800, 3808, 3818, 3828, 3836, 3844, 3854, 3861, 3869, 3877, 3885, 3893, 3901, 3910, 3921, 3931, 3944, 3957, 3971, 3985, 3998, 4010, 4020, 4033, 4043, 4051, 4056, 4061, 4065, 4069, 4073, 4077, 4082, 4087, 4092, 4100, 4111, 4126, 4152, 4200"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.2/Messages_and_Signals.html","title":"ProhelionBmsD1000Gen2 - DBC Messages and Signals","text":""},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.2/Messages_and_Signals.html#messages-and-signals","title":"Messages and Signals","text":"<p>This section provides information on the CAN bus messages and signals used in the ProhelionBmsD1000Gen2. Each message is identified by its unique ID, and the structure, including signals, is described.</p> <p>Note! \"Default BASE ID\" The following Message IDs assume a default CAN Bus BASE ID of <code>0x600</code>. The BASE ID of each device is configurable via the device configuration. If the BASE ID has been configured differently on the device, make sure to account for the shift in the Message IDs. The Message ID offsets from the BASE ID will remain the same regardless of the device configuration.</p>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.2/Messages_and_Signals.html#contents","title":"Contents","text":"Message ID Name 0x600 Device Heartbeat 0x601 Device Firmware Info 0x606 BMS Info 0x607 BMS Current Data 0x608 BMS Voltage Data 0x609 BMS Auxiliary Data 0x60a BMS SoC Data 0x60c BMS SoP Data 0x60d Node Info 0x60e Node Cell Info 0x60f Node Temp Info 0x610 Node\ud835\udca9Voltage Info 0x611 Node\ud835\udca9Cell Voltages 1 0x612 Node\ud835\udca9Cell Voltages 2 0x613 Node\ud835\udca9Cell Voltages 3 0x614 Node\ud835\udca9Cell Voltages 4 0x615 Node\ud835\udca9Cell Temps 0x616 Node\ud835\udca9Stats 0x617 Node\ud835\udca9Diagnostics 0x6f0 Contactor Diagnostics 0x6f1 Device Watchdog Info 0x6f2 Device Selftest Info 0x6f3 Node Diagnostics 0x6f4 Node Stats 0x6f5 Node Cell Stats 0x6f6 Node Temp Stats 0x6f7 Node Status Registers 0x6f8 Sensor Data 1 0x6f9 Sensor Data 2"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.2/Messages_and_Signals.html#deviceheartbeat","title":"DeviceHeartbeat","text":"<ul> <li>ID: 0x600 (1536)</li> <li>Length: 8</li> <li>Senders: ProhelionBmsD1000Gen2</li> <li>Comment: Device heartbeat information</li> </ul> Name Comment\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Unit Start Bit Length Signed Scale Offset Min Max Byte Order DeviceType Type of device in the system 0 32 False 1 0 N/A N/A little_endian DeviceSerial Unique serial number of the device 32 32 False 1 0 N/A N/A little_endian"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.2/Messages_and_Signals.html#devicefirmwareinfo","title":"DeviceFirmwareInfo","text":"<ul> <li>ID: 0x601 (1537)</li> <li>Length: 8</li> <li>Senders: ProhelionBmsD1000Gen2</li> <li>Comment: Firmware version information</li> </ul> Name Comment\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Unit Start Bit Length Signed Scale Offset Min Max Byte Order FirmwareMajorVersion Major version of firmware 0 8 False 1 0 N/A N/A little_endian FirmwareMinorVersion Minor version of firmware 8 8 False 1 0 N/A N/A little_endian FirmwarePatchVersion Patch version of firmware 16 16 False 1 0 N/A N/A little_endian FirmwareBuildNumber Commit hash of firmware 32 32 False 1 0 N/A N/A little_endian"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.2/Messages_and_Signals.html#bmsinfo","title":"BMSInfo","text":"<ul> <li>ID: 0x606 (1542)</li> <li>Length: 8</li> <li>Senders: ProhelionBmsD1000Gen2</li> <li>Comment: Information on BMS states, failures, and faults</li> </ul> Name Comment\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Unit Start Bit Length Signed Scale Offset Min Max Byte Order BMSStateINIT Initialisation state. Immediately enters this state on startup and proceeds to CALIBRATE once the conditions are met 0 1 False 1 0 N/A N/A little_endian BMSStateCALIBRATE Calibration state. Ensures contactors are open before moving to the SAFE state. 1 1 False 1 0 N/A N/A little_endian BMSStateIDLE Idle state. System is healthy and awaiting a command to enable or charge. 2 1 False 1 0 N/A N/A little_endian BMSStateCONNECT Connect state. A request has been made to close the load contactors. The negative contactor to the load has been closed to enable load voltage checks. 3 1 False 1 0 N/A N/A little_endian BMSStatePRECHARGE Precharge state. The precharge contactor is closed. 4 1 False 1 0 N/A N/A little_endian BMSStateENABLED Enabled state. Contactors to the load are now closed following a successful PRECHARGE state. This state will persist until commanded otherwise, or a fault occurs. 5 1 False 1 0 N/A N/A little_endian BMSStateCHARGE_INIT Charge initialise state. Initialises the charge session, including EVCC for EVSE charging if configured. Waits for Charge Enable Command to proceed 6 1 False 1 0 N/A N/A little_endian BMSStateCHARGE_CONNECT Charge connect state. Closes the negative charge contactor and checks that battery and charger voltages match before proceeding 7 1 False 1 0 N/A N/A little_endian BMSStateCHARGE_ENABLED Charge enabled state. Closes the positive charge contactor, allowing the charger to deliver current to the battery 8 1 False 1 0 N/A N/A little_endian BMSStateCHARGE_STOPPING Charge stopping state. Waits for current flow to reduce before opening the contactors and performing welding detection 9 1 False 1 0 N/A N/A little_endian BMSStateDISCONNECT Safe disconnect state. This state is a transitional state to allow current flow to stop prior to opening the contactors in the SAFE state. This state occurs if an error has occurred while contactors are closed 10 1 False 1 0 N/A N/A little_endian BMSStateSAFE Safe state. An error has occurred or we have progressed from the CALIBRATE state. The SAFE state ensures the battery is disconnected from the load and will transition to IDLE state after all errors have cleared. Latching errors will require a reset before the BMS will leave SAFE state 11 1 False 1 0 N/A N/A little_endian BMSPrechargeFailTIMEOUT Timeout issue. State has timed out waiting for successful completion of the precharge process 16 1 False 1 0 N/A N/A little_endian BMSPrechargeFailOVERCURRENTMAX Over-current maximum detected 17 1 False 1 0 N/A N/A little_endian BMSPrechargeFailOVERCURRENTPCHG Over-current during precharge. Current flow during precharge is abnormally high. Check configuration 18 1 False 1 0 N/A N/A little_endian BMSPrechargeFailNEGCURRENT Negative current detected. Current is flowing into the pack instead of into the load 19 1 False 1 0 N/A N/A little_endian BMSPrechargeFailSTABLECURRENT Stable current issue. Current flow through the precharge circuit is expected to decrease as the load voltage rises to the battery voltage 20 1 False 1 0 N/A N/A little_endian BMSPrechargeFailOVERVOLTAGE Over-voltage detected. Voltage greater than expected 21 1 False 1 0 N/A N/A little_endian BMSPrechargeFailSTABLEVOLTAGE Stable voltage issue. Load voltage is expected to rise to battery voltage 22 1 False 1 0 N/A N/A little_endian BMSContactorFaultCONTACTOR1 Contactor 1 fault 24 1 False 1 0 N/A N/A little_endian BMSContactorFaultCONTACTOR2 Contactor 2 fault 25 1 False 1 0 N/A N/A little_endian BMSContactorFaultCONTACTOR3 Contactor 3 fault 26 1 False 1 0 N/A N/A little_endian BMSContactorFaultCONTACTOR4 Contactor 4 fault 27 1 False 1 0 N/A N/A little_endian BMSContactorFaultCONTACTOR5 Contactor 5 fault 28 1 False 1 0 N/A N/A little_endian BMSReasonSELFTESTFAIL Self-test failure. Internal memory or peripheral checks are failing indicating a fault may be present in the microprocessor 32 1 False 1 0 N/A N/A little_endian BMSReasonWATCHDOGFAIL Watchdog failure. A module within the firmware is not updating as expected 33 1 False 1 0 N/A N/A little_endian BMSReasonCONTACTORFAIL Contactor failure. Contactor states presented by auxiliary circuits do not match the intended state 34 1 False 1 0 N/A N/A little_endian BMSReasonHVIL HVIL issue. The interlocked loop is measuring high impedance, indicating a connector failure 35 1 False 1 0 N/A N/A little_endian BMSReasonBATTVOLTAGE Battery voltage issue. Battery voltage is out of expected ranges 36 1 False 1 0 N/A N/A little_endian BMSReasonPACKVOLTAGE Pack voltage issue. Pack voltage is not aligned with the sum of the measured cell voltages, indicating a loose cell node connection 37 1 False 1 0 N/A N/A little_endian BMSReasonLOADVOLTAGE Load voltage issue. The load voltage is out of expected ranges 38 1 False 1 0 N/A N/A little_endian BMSReasonCHARGERVOLTAGE Charger voltage issue. The charging equipment voltage is out of expected ranges 39 1 False 1 0 N/A N/A little_endian BMSReasonOVERCURRENT Over-current detected. Software over-current detection indicating current has risen above configured limits 40 1 False 1 0 N/A N/A little_endian BMSReasonNODECOUNT Node count issue. Incorrect number of CMU (Nodes) detected by the BMS 41 1 False 1 0 N/A N/A little_endian BMSReasonCELLCOUNT Cell count issue. Incorrect number of cells detected by the CMU nodes 42 1 False 1 0 N/A N/A little_endian BMSReasonTEMPCOUNT Temperature count issue. Incorrect number of temperature sensors detected by the CMU nodes 43 1 False 1 0 N/A N/A little_endian BMSReasonBJU BJU timeout. BJU has not responded to requests for measurements 44 1 False 1 0 N/A N/A little_endian BMSReasonIO Pack timeout. IO expander is not responding on the I2C bus 45 1 False 1 0 N/A N/A little_endian BMSReasonCONTROLTIMEOUT Control timeout. BMS has not received a control command for a number of seconds. 46 1 False 1 0 N/A N/A little_endian BMSReasonINTERNALCOMMS Internal Comms issue. A device connected to the BMS is not responding 47 1 False 1 0 N/A N/A little_endian BMSReasonOVERVOLT Cell over-voltage detected 48 1 False 1 0 N/A N/A little_endian BMSReasonUNDERVOLT Cell under-voltage detected 49 1 False 1 0 N/A N/A little_endian BMSReasonOVERTEMP Cell over-temperature detected 50 1 False 1 0 N/A N/A little_endian BMSReasonUNDERTEMP Cell under-temperature detected 51 1 False 1 0 N/A N/A little_endian BMSReasonPRESSURE Pressure issue 52 1 False 1 0 N/A N/A little_endian BMSReasonHUMIDITY Humidity issue 53 1 False 1 0 N/A N/A little_endian BMSReasonVOC VOC (Volatile Organic Compounds) issue 54 1 False 1 0 N/A N/A little_endian BMSReasonNOX NOx (Nitrogen Oxides) issue 55 1 False 1 0 N/A N/A little_endian BMSReasonPRECHARGE Precharge failure 56 1 False 1 0 N/A N/A little_endian"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.2/Messages_and_Signals.html#bmscurrentdata","title":"BMSCurrentData","text":"<ul> <li>ID: 0x607 (1543)</li> <li>Length: 8</li> <li>Senders: ProhelionBmsD1000Gen2</li> <li>Comment: Current measurement data.</li> </ul> Name Comment\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Unit Start Bit Length Signed Scale Offset Min Max Byte Order InstantaneousCurrent Instantaneous current measurement A 0 32 True 0.001 0 N/A N/A little_endian FilteredCurrent Filtered current measurement A 32 32 True 0.001 0 N/A N/A little_endian"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.2/Messages_and_Signals.html#bmsvoltagedata","title":"BMSVoltageData","text":"<ul> <li>ID: 0x608 (1544)</li> <li>Length: 8</li> <li>Senders: ProhelionBmsD1000Gen2</li> <li>Comment: Voltage measurement data.</li> </ul> Name Comment\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Unit Start Bit Length Signed Scale Offset Min Max Byte Order BatteryVoltage Battery voltage measurement V 0 32 True 0.001 0 N/A N/A little_endian LoadVoltage Load voltage measurement V 32 32 True 0.001 0 N/A N/A little_endian"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.2/Messages_and_Signals.html#bmsauxiliarydata","title":"BMSAuxiliaryData","text":"<ul> <li>ID: 0x609 (1545)</li> <li>Length: 8</li> <li>Senders: ProhelionBmsD1000Gen2</li> <li>Comment: Auxiliary data.</li> </ul> Name Comment\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Unit Start Bit Length Signed Scale Offset Min Max Byte Order AuxiliaryVoltage Auxiliary voltage measurement V 0 32 True 0.001 0 N/A N/A little_endian Power Power measurement W 32 32 True 0.001 0 N/A N/A little_endian"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.2/Messages_and_Signals.html#bmssocdata","title":"BMSSoCData","text":"<ul> <li>ID: 0x60a (1546)</li> <li>Length: 8</li> <li>Senders: ProhelionBmsD1000Gen2</li> <li>Comment: Battery SoC estimations</li> </ul> Name Comment\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Unit Start Bit Length Signed Scale Offset Min Max Byte Order SoCPercentage Battery SoC Percentage % 0 16 False 0.1 0 N/A N/A little_endian SoCCapacity Battery SoC in Ah Ah 16 16 False 0.1 0 N/A N/A little_endian OCV_mV Estimated Open Circuit Voltage in mV V 32 16 False 0.001 0 N/A N/A little_endian SoHPercentage Estimated SoH Percentage % 48 16 False 0.1 0 N/A N/A little_endian"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.2/Messages_and_Signals.html#bmssopdata","title":"BMSSoPData","text":"<ul> <li>ID: 0x60c (1548)</li> <li>Length: 8</li> <li>Senders: ProhelionBmsD1000Gen2</li> <li>Comment: State of Power Information</li> </ul> Name Comment\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Unit Start Bit Length Signed Scale Offset Min Max Byte Order SoPMaxCurrentDischarge Max Allowable Discharge Current A 0 32 True 0.001 0 N/A N/A little_endian SoPMaxCurrentCharge Max Allowable Charge Current A 32 32 True 0.001 0 N/A N/A little_endian"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.2/Messages_and_Signals.html#nodeinfo","title":"NodeInfo","text":"<ul> <li>ID: 0x60d (1549)</li> <li>Length: 8</li> <li>Senders: ProhelionBmsD1000Gen2</li> <li>Comment: Node information</li> </ul> Name Comment\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Unit Start Bit Length Signed Scale Offset Min Max Byte Order TotalPackVoltage Total pack voltage measurement V 0 32 False 0.001 0 N/A N/A little_endian PackBalanceThreshold Pack balance threshold measurement V 32 16 False 0.001 0 N/A N/A little_endian TotalCellsBalancing Total cells balancing status 48 16 False 1 0 N/A N/A little_endian"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.2/Messages_and_Signals.html#nodecellinfo","title":"NodeCellInfo","text":"<ul> <li>ID: 0x60e (1550)</li> <li>Length: 8</li> <li>Senders: ProhelionBmsD1000Gen2</li> <li>Comment: Cell Voltage Statistics</li> </ul> Name Comment\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Unit Start Bit Length Signed Scale Offset Min Max Byte Order MaxCellVoltage Maximum cell voltage measurement V 0 16 False 0.001 0 N/A N/A little_endian MaxCellVoltageNodeID Node ID for max cell voltage 16 8 False 1 0 N/A N/A little_endian MaxCellVoltageCellID Cell ID for max cell voltage 24 8 False 1 0 N/A N/A little_endian MinCellVoltage Minimum cell voltage measurement V 32 16 False 0.001 0 N/A N/A little_endian MinCellVoltageNodeID Node ID for min cell voltage 48 8 False 1 0 N/A N/A little_endian MinCellVoltageCellID Cell ID for min cell voltage 56 8 False 1 0 N/A N/A little_endian"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.2/Messages_and_Signals.html#nodetempinfo","title":"NodeTempInfo","text":"<ul> <li>ID: 0x60f (1551)</li> <li>Length: 8</li> <li>Senders: ProhelionBmsD1000Gen2</li> <li>Comment: Cell Temperature Statistics</li> </ul> Name Comment\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Unit Start Bit Length Signed Scale Offset Min Max Byte Order MaxTemperature Maximum temperature measurement C 0 16 True 0.1 0 N/A N/A little_endian MaxTemperatureNodeID Node ID for max temperature 16 8 False 1 0 N/A N/A little_endian MaxTemperatureSensorID Sensor ID for max temperature 24 8 False 1 0 N/A N/A little_endian MinTemperature Minimum temperature measurement C 32 16 True 0.1 0 N/A N/A little_endian MinTemperatureNodeID Node ID for min temperature 48 8 False 1 0 N/A N/A little_endian MinTemperatureSensorID Sensor ID for min temperature 56 8 False 1 0 N/A N/A little_endian"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.2/Messages_and_Signals.html#nodenvoltageinfo","title":"Node\ud835\udca9VoltageInfo","text":"<p>Note! For brevity, node messages are described once, where \ud835\udca9 describes the node number (up to a maximum of 32 nodes).</p> <ul> <li>ID: 0x610 + (\ud835\udca9 \u00d7 0x7)</li> <li>Length: 8</li> <li>Senders: ProhelionBmsD1000Gen2</li> <li>Comment: Voltage information of the node</li> </ul> Name Comment\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Unit Start Bit Length Signed Scale Offset Min Max Byte Order Node\ud835\udca9TotalVoltage Sum of the voltage of the cells in the node V 0 32 False 0.001 0 N/A N/A little_endian Node\ud835\udca9HighResistanceCellSense Indication that a cell is reading high resistance 48 16 False 1 0 N/A N/A little_endian"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.2/Messages_and_Signals.html#nodencellvoltages1","title":"Node\ud835\udca9CellVoltages1","text":"<p>Note! For brevity, node messages are described once, where \ud835\udca9 describes the node number (up to a maximum of 32 nodes).</p> <ul> <li>ID: 0x611 + (\ud835\udca9 \u00d7 0x7)</li> <li>Length: 8</li> <li>Senders: ProhelionBmsD1000Gen2</li> <li>Comment: Node cell voltage measurements (1 of 4)</li> </ul> Name Comment\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Unit Start Bit Length Signed Scale Offset Min Max Byte Order Node\ud835\udca9Cell01 Cell 01 measured voltage V 0 16 False 0.001 0 N/A N/A little_endian Node\ud835\udca9Cell02 Cell 02 measured voltage V 16 16 False 0.001 0 N/A N/A little_endian Node\ud835\udca9Cell03 Cell 03 measured voltage V 32 16 False 0.001 0 N/A N/A little_endian Node\ud835\udca9Cell04 Cell 04 measured voltage V 48 16 False 0.001 0 N/A N/A little_endian"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.2/Messages_and_Signals.html#nodencellvoltages2","title":"Node\ud835\udca9CellVoltages2","text":"<p>Note! For brevity, node messages are described once, where \ud835\udca9 describes the node number (up to a maximum of 32 nodes).</p> <ul> <li>ID: 0x612 + (\ud835\udca9 \u00d7 0x7)</li> <li>Length: 8</li> <li>Senders: ProhelionBmsD1000Gen2</li> <li>Comment: Node cell voltage measurements (2 of 4)</li> </ul> Name Comment\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Unit Start Bit Length Signed Scale Offset Min Max Byte Order Node\ud835\udca9Cell05 Cell 05 measured voltage V 0 16 False 0.001 0 N/A N/A little_endian Node\ud835\udca9Cell06 Cell 06 measured voltage V 16 16 False 0.001 0 N/A N/A little_endian Node\ud835\udca9Cell07 Cell 07 measured voltage V 32 16 False 0.001 0 N/A N/A little_endian Node\ud835\udca9Cell08 Cell 08 measured voltage V 48 16 False 0.001 0 N/A N/A little_endian"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.2/Messages_and_Signals.html#nodencellvoltages3","title":"Node\ud835\udca9CellVoltages3","text":"<p>Note! For brevity, node messages are described once, where \ud835\udca9 describes the node number (up to a maximum of 32 nodes).</p> <ul> <li>ID: 0x613 + (\ud835\udca9 \u00d7 0x7)</li> <li>Length: 8</li> <li>Senders: ProhelionBmsD1000Gen2</li> <li>Comment: Node cell voltage measurements (3 of 4)</li> </ul> Name Comment\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Unit Start Bit Length Signed Scale Offset Min Max Byte Order Node\ud835\udca9Cell09 Cell 09 measured voltage V 0 16 False 0.001 0 N/A N/A little_endian Node\ud835\udca9Cell10 Cell 10 measured voltage V 16 16 False 0.001 0 N/A N/A little_endian Node\ud835\udca9Cell11 Cell 11 measured voltage V 32 16 False 0.001 0 N/A N/A little_endian Node\ud835\udca9Cell12 Cell 12 measured voltage V 48 16 False 0.001 0 N/A N/A little_endian"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.2/Messages_and_Signals.html#nodencellvoltages4","title":"Node\ud835\udca9CellVoltages4","text":"<p>Note! For brevity, node messages are described once, where \ud835\udca9 describes the node number (up to a maximum of 32 nodes).</p> <ul> <li>ID: 0x614 + (\ud835\udca9 \u00d7 0x7)</li> <li>Length: 8</li> <li>Senders: ProhelionBmsD1000Gen2</li> <li>Comment: Node cell voltage measurements (4 of 4)</li> </ul> Name Comment\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Unit Start Bit Length Signed Scale Offset Min Max Byte Order Node\ud835\udca9Cell13 Cell 13 measured voltage V 0 16 False 0.001 0 N/A N/A little_endian Node\ud835\udca9Cell14 Cell 14 measured voltage V 16 16 False 0.001 0 N/A N/A little_endian"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.2/Messages_and_Signals.html#nodencelltemps","title":"Node\ud835\udca9CellTemps","text":"<p>Note! For brevity, node messages are described once, where \ud835\udca9 describes the node number (up to a maximum of 32 nodes).</p> <ul> <li>ID: 0x615 + (\ud835\udca9 \u00d7 0x7)</li> <li>Length: 8</li> <li>Senders: ProhelionBmsD1000Gen2</li> <li>Comment: Node thermistor temperature measurements</li> </ul> Name Comment\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Unit Start Bit Length Signed Scale Offset Min Max Byte Order Node\ud835\udca9Temp01 Thermistor 01 temperature measurement C 0 16 True 0.1 0 N/A N/A little_endian Node\ud835\udca9Temp02 Thermistor 02 temperature measurement C 16 16 True 0.1 0 N/A N/A little_endian Node\ud835\udca9Temp03 Thermistor 03 temperature measurement C 32 16 True 0.1 0 N/A N/A little_endian Node\ud835\udca9Temp04 Thermistor 04 temperature measurement C 48 16 True 0.1 0 N/A N/A little_endian"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.2/Messages_and_Signals.html#nodenstats","title":"Node\ud835\udca9Stats","text":"<p>Note! For brevity, node messages are described once, where \ud835\udca9 describes the node number (up to a maximum of 32 nodes).</p> <ul> <li>ID: 0x616 + (\ud835\udca9 \u00d7 0x7)</li> <li>Length: 8</li> <li>Senders: ProhelionBmsD1000Gen2</li> <li>Comment: Node cell statistics</li> </ul> Name Comment\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Unit Start Bit Length Signed Scale Offset Min Max Byte Order Node\ud835\udca9ConnectedCells Number of cells detected on the node 0 8 False 1 0 N/A N/A little_endian Node\ud835\udca9DisconnectedCells Number of cells that are configured but not detected on the node 8 8 False 1 0 N/A N/A little_endian Node\ud835\udca9ConnectedTempSensors Number of connected thermistors on the node 16 8 False 1 0 N/A N/A little_endian Node\ud835\udca9DisconnectedTempSensors Number of thermistors that are configured but not detected on the node 24 8 False 1 0 N/A N/A little_endian Node\ud835\udca9CellBalanceCommandSent Cell balance command has been send to the node 32 16 False 1 0 N/A N/A little_endian Node\ud835\udca9CellBalanceStatus Status of cell balancing on the node 48 16 False 1 0 N/A N/A little_endian"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.2/Messages_and_Signals.html#nodendiagnostics","title":"Node\ud835\udca9Diagnostics","text":"<p>Note! For brevity, node messages are described once, where \ud835\udca9 describes the node number (up to a maximum of 32 nodes).</p> <ul> <li>ID: 0x617 + (\ud835\udca9 \u00d7 0x7)</li> <li>Length: 8</li> <li>Senders: ProhelionBmsD1000Gen2</li> <li>Comment: Node diagnostics</li> </ul> Name Comment\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Unit Start Bit Length Signed Scale Offset Min Max Byte Order Node\ud835\udca9Type Type of the node 0 8 False 1 0 N/A N/A little_endian Node\ud835\udca9Address Address of the node 8 8 False 1 0 N/A N/A little_endian Node\ud835\udca9UARTResult Latest result of UART communications 16 16 False 1 0 N/A N/A little_endian Node\ud835\udca9State State of the node 32 16 False 1 0 N/A N/A little_endian Node\ud835\udca9StateTimer Time node has spent in the current state 48 16 False 1 0 N/A N/A little_endian"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.2/Messages_and_Signals.html#contactordiagnostics","title":"ContactorDiagnostics","text":"<ul> <li>ID: 0x6f0 (1776)</li> <li>Length: 8</li> <li>Senders: ProhelionBmsD1000Gen2</li> <li>Comment: Contactor diagnostics information</li> </ul> Name Comment\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Unit Start Bit Length Signed Scale Offset Min Max Byte Order ContactorDesiredState Intended state of the contactors 0 32 False 1 0 N/A N/A little_endian ContactorActualState Actual state of the contactors 32 32 False 1 0 N/A N/A little_endian"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.2/Messages_and_Signals.html#devicewatchdoginfo","title":"DeviceWatchdogInfo","text":"<ul> <li>ID: 0x6f1 (1777)</li> <li>Length: 8</li> <li>Senders: ProhelionBmsD1000Gen2</li> <li>Comment: Information relating to internal watchdog status</li> </ul> Name Comment\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Unit Start Bit Length Signed Scale Offset Min Max Byte Order SelfTestTaskStatus Self test task running state <ul><li>4: Fail</li><li>2: Fast</li><li>1: Slow</li><li>0: Ok</li></ul> 0 4 False 1 0 N/A N/A little_endian SensorTaskStatus Sensor task running state <ul><li>4: Fail</li><li>2: Fast</li><li>1: Slow</li><li>0: Ok</li></ul> 8 8 False 1 0 N/A N/A little_endian TelemetryTaskStatus Telemetry task running state <ul><li>4: Fail</li><li>2: Fast</li><li>1: Slow</li><li>0: Ok</li></ul> 16 8 False 1 0 N/A N/A little_endian CMUTaskStatus CMU task running state <ul><li>4: Fail</li><li>2: Fast</li><li>1: Slow</li><li>0: Ok</li></ul> 24 8 False 1 0 N/A N/A little_endian BMSTaskStatus BMS task running state <ul><li>4: Fail</li><li>2: Fast</li><li>1: Slow</li><li>0: Ok</li></ul> 32 8 False 1 0 N/A N/A little_endian SoXTaskStatus SoX task running state <ul><li>4: Fail</li><li>2: Fast</li><li>1: Slow</li><li>0: Ok</li></ul> 40 8 False 1 0 N/A N/A little_endian WatchdogReset State of the watchdog peripheral <ul><li>1: Fail</li><li>0: Ok</li></ul> 48 1 False 1 0 N/A N/A little_endian"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.2/Messages_and_Signals.html#deviceselftestinfo","title":"DeviceSelftestInfo","text":"<ul> <li>ID: 0x6f2 (1778)</li> <li>Length: 8</li> <li>Senders: ProhelionBmsD1000Gen2</li> <li>Comment: Result of various internal self testing</li> </ul> Name Comment\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Unit Start Bit Length Signed Scale Offset Min Max Byte Order SelftestResult Reserved 0 64 False 1 0 N/A N/A little_endian"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.2/Messages_and_Signals.html#nodediagnostics","title":"NodeDiagnostics","text":"<ul> <li>ID: 0x6f3 (1779)</li> <li>Length: 8</li> <li>Senders: ProhelionBmsD1000Gen2</li> <li>Comment: CMU controller diagnostic information</li> </ul> Name Comment\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Unit Start Bit Length Signed Scale Offset Min Max Byte Order ControllerType Type of the CMU controller 0 8 False 1 0 N/A N/A little_endian CurrentState State of the CMU controller 8 8 False 1 0 N/A N/A little_endian CurrentStateTimer Time the controller has spent in the current state 16 16 False 1 0 N/A N/A little_endian CommsResult Latest result of the CMU controller &lt;--&gt; CMU communication 32 16 False 1 0 N/A N/A little_endian"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.2/Messages_and_Signals.html#nodestats","title":"NodeStats","text":"<ul> <li>ID: 0x6f4 (1780)</li> <li>Length: 8</li> <li>Senders: ProhelionBmsD1000Gen2</li> <li>Comment: Node statistics information</li> </ul> Name Comment\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Unit Start Bit Length Signed Scale Offset Min Max Byte Order TotalConfiguredNodes Sum of nodes expected in the configuration 0 16 False 1 0 N/A N/A little_endian TotalConnectedNodes Sum of nodes detected by the controller 16 16 False 1 0 N/A N/A little_endian TotalDisconnectedNodes Sum of configured nodes not detected by the controller 32 16 False 1 0 N/A N/A little_endian"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.2/Messages_and_Signals.html#nodecellstats","title":"NodeCellStats","text":"<ul> <li>ID: 0x6f5 (1781)</li> <li>Length: 8</li> <li>Senders: ProhelionBmsD1000Gen2</li> <li>Comment: Cell statistics information</li> </ul> Name Comment\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Unit Start Bit Length Signed Scale Offset Min Max Byte Order TotalConfiguredCells Sum of cells expected in the configuration 0 16 False 1 0 N/A N/A little_endian TotalConnectedCells Sum of cells detected by all nodes 16 16 False 1 0 N/A N/A little_endian TotalDisconnectedCells Sum of configured cells not detected by all nodes 32 16 False 1 0 N/A N/A little_endian"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.2/Messages_and_Signals.html#nodetempstats","title":"NodeTempStats","text":"<ul> <li>ID: 0x6f6 (1782)</li> <li>Length: 8</li> <li>Senders: ProhelionBmsD1000Gen2</li> <li>Comment: Thermistor statistics information</li> </ul> Name Comment\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Unit Start Bit Length Signed Scale Offset Min Max Byte Order TotalConfiguredTempSensors Sum of thermistors expected in the configuration 0 16 False 1 0 N/A N/A little_endian TotalConnectedTempSensors Sum of thermistors detected by all nodes 16 16 False 1 0 N/A N/A little_endian TotalDisconnectedTempSensors Sum of configured thermistors not detected by all nodes 32 16 False 1 0 N/A N/A little_endian"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.2/Messages_and_Signals.html#nodestatusregisters","title":"NodeStatusRegisters","text":"<ul> <li>ID: 0x6f7 (1783)</li> <li>Length: 8</li> <li>Senders: ProhelionBmsD1000Gen2</li> <li>Comment: Node controller status registers</li> </ul> Name Comment\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Unit Start Bit Length Signed Scale Offset Min Max Byte Order RXStatus Node controller RX status register 0 8 False 1 0 N/A N/A little_endian TXStatus Node controller TX status register 8 8 False 1 0 N/A N/A little_endian LSSMByteHWError HW error reported by node controller BOOLEAN 16 1 False 1 0 N/A N/A little_endian LSSMByteAliveCNTError Incorrect alive count reported by node controller BOOLEAN 17 1 False 1 0 N/A N/A little_endian LSSMByteCommandOP Current command OP code BOOLEAN 18 1 False 1 0 N/A N/A little_endian LSSMByteCommMismatchError Communication mismatch error reported BOOLEAN 19 1 False 1 0 N/A N/A little_endian LSSMByteAlertPacketError Packet error reported BOOLEAN 20 1 False 1 0 N/A N/A little_endian LSSMByteCommError Comm error reported BOOLEAN 21 1 False 1 0 N/A N/A little_endian LSSMByteAlertPacketStatusError Packet status error reported BOOLEAN 22 1 False 1 0 N/A N/A little_endian LSSMByteRXReady Node controller ready to receive BOOLEAN 23 1 False 1 0 N/A N/A little_endian GENStatus 24 8 False 1 0 N/A N/A little_endian OPStateStatus 32 8 False 1 0 N/A N/A little_endian BufferStatus 40 8 False 1 0 N/A N/A little_endian WatchdogStatus 48 8 False 1 0 N/A N/A little_endian GPIOStatus 56 8 False 1 0 N/A N/A little_endian"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.2/Messages_and_Signals.html#sensordata1","title":"SensorData1","text":"<ul> <li>ID: 0x6f8 (1784)</li> <li>Length: 8</li> <li>Senders: ProhelionBmsD1000Gen2</li> <li>Comment: Sensor data 1</li> </ul> Name Comment\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Unit Start Bit Length Signed Scale Offset Min Max Byte Order Temperature1 Thermistor 1 measured temperature C 0 16 True 0.1 0 N/A N/A little_endian Temperature2 Thermistor 2 measured temperature C 16 16 True 0.1 0 N/A N/A little_endian Pressure Measured pressure kPa 32 16 True 0.1 0 N/A N/A little_endian Humidity Measured humidity % RH 48 16 True 0.1 0 N/A N/A little_endian"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.2/Messages_and_Signals.html#sensordata2","title":"SensorData2","text":"<ul> <li>ID: 0x6f9 (1785)</li> <li>Length: 8</li> <li>Senders: ProhelionBmsD1000Gen2</li> <li>Comment: Sensor data 2</li> </ul> Name Comment\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Unit Start Bit Length Signed Scale Offset Min Max Byte Order VOC Measured Volatile Organic Compound (VOC) concentration in parts per billion (ppb) ppb 0 16 False 1 0 N/A N/A little_endian NOX Measured Nitrous Oxide (NOx) concentration in parts per billion (ppb) ppb 16 16 False 1 0 N/A N/A little_endian"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.2/State_Machine.html","title":"State Machine","text":"<p>This section provides information on the BMS State Machine. The BMS State Machine is responsible for engaging and disengaging the battery contactors (main and charge outputs). The BMS State Machine continuously monitors the status all of sensors and external devices to ensure the battery stays within it's safe area of operation.  </p>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.2/State_Machine.html#system-wide-state-diagram","title":"System Wide State Diagram","text":"Figure 1:  High-Level state machine"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.2/State_Machine.html#state-descriptions","title":"State Descriptions","text":""},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.2/State_Machine.html#non-charging-states","title":"Non-Charging States","text":"State Description Transitions Requirements INITIALISE Immediately enters this state on startup INIT \u2192 CALIBRATE Cell count correct, thermistor count correct, external CAN enabled, BJU present &amp; internal self-testing passed CALIBRATE Performs self-calibration and starts self-tests CALIBRATE \u2192 SAFE On completion of calibration steps IDLE System is healthy and is ready to be enabled. Continuously monitoring the system and battery health. IDLE \u2192 DISCONNECT On any fault IDLE \u2192 CONNECT BMS command is CONNECT IDLE \u2192 CHARGE_INIT BMS command is CHARGE_CONNECT CONNECT A request has been made to connect the load to the battery. The negative contactor to the load has been closed to enable load voltage checks and connection parameters are established CONNECT \u2192 DISCONNECT On any fault CONNECT \u2192 PRECHARGE BMS command is ENABLE and precharge context is established CONNECT \u2192 IDLE BMS command is not CONNECT or ENABLE PRECHARGE Engages the precharge contactor and waits for the load voltage to reach the battery voltage, monitors for precharge faults PRECHARGE \u2192 DISCONNECT On any fault PRECHARGE \u2192 ENABLED BMS command is ENABLE and precharge conditions are met PRECHARGE \u2192 IDLE BMS command is not ENABLE ENABLED Enabled state. Contactors to the load are now closed following a successful PRECHARGE state. This state will persist until commanded otherwise, or a safety fault occurs ENABLED \u2192 DISCONNECT On any fault ENABLED \u2192 IDLE BMS command is not ENABLE DISCONNECT Disconnect allows for the load or charging device to safely reduce current flow prior to opening the contactors. DISCONNECT \u2192 SAFE Disconnection has completed or timed out (2s) SAFE Ensures the system is in a safe state. It will enter this state if an error has occurred or we have progressed from the CALIBRATE state. Requires a command and no persistent errors to move to IDLE state SAFE \u2192 IDLE BMS command is IDLE and non-latching faults have cleared State Contactors Engaged Balancing Enabled INITIALISE None No CALIBRATE None No IDLE None No CONNECT 1 No PRECHARGE 1 &amp; 2 No ENABLED 1 &amp; 3 Yes DISCONNECT Unchanged No SAFE None No"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.2/State_Machine.html#charging-states","title":"Charging States","text":"Charge method configuration State Description Transitions Requirements EVSE [0x1] CHARGE_INIT Initiates the charge session and waits for the ERS to signal it is ready to perform precharge sequences with the EVSE CHARGE_INIT \u2192 IDLE BMS command is not CHARGE_INIT or CHARGE_ENABLE; ERS system has encountered an error; Timed out waiting for ERS (50s) CHARGE_INIT \u2192 CHARGE_CONNECT ERS is ready for precharge; BMS command is CHARGE_ENABLE CHARGE_INIT \u2192 DISCONNECT On any BMS fault CHARGE_CONNECT ERS precharge sequence in progress, with negative contactor enabled. Progression to CHARGE_ENABLED and closing of contactors follows success CHARGE_CONNECT \u2192 IDLE BMS command is not CHARGE_INIT; Invalid ERS state CHARGE_CONNECT \u2192 CHARGE_ENABLED ERS has completed precharge; BMS command is CHARGE_ENABLE CHARGE_CONNECT \u2192 DISCONNECT On any BMS fault or ERS emergency stop CHARGE_ENABLED ERS charge session persists until the ERS indicates it is stopping or BMS is commanded to stop. CHARGE_ENABLED \u2192 CHARGE_STOPPING ERS state is requesting open contactors; BMS command is not CHARGE_ENABLE CHARGE_ENABLED \u2192 DISCONNECT On any BMS fault or ERS emergency stop CHARGE_STOPPING Opens contactor 5 (HV+). Waits for ERS to progress to FINISHED before progressing to IDLE CHARGE_STOPPING \u2192 IDLE ERS completes welding detection without error and is finished CHARGE_STOPPING \u2192 DISCONNECT On any BMS fault; Timeout (20s) OTHER [0x1] CHARGE_INIT Transitional state that moves immediately to charge connect when the BMS command CHARGE_ENABLE is provided. CHARGE_INIT \u2192 IDLE BMS command is not CHARGE_INIT or ENABLE; Timed out waiting for ERS (50s)*** CHARGE_INIT \u2192 CHARGE_CONNECT BMS command is CHARGE_ENABLE CHARGE_INIT \u2192 DISCONNECT On any BMS fault CHARGE_CONNECT Performs the precharge sequence prior to closing contactors and moving to CHARGE_ENABLED CHARGE_CONNECT \u2192 IDLE BMS command is not CHARGE_INIT; precharge sequence timed out (N seconds)*** CHARGE_CONNECT \u2192 CHARGE_ENABLED Precharge requirements met; BMS command is CHARGE_ENABLE CHARGE_CONNECT \u2192 DISCONNECT On any BMS fault CHARGE_ENABLED Charge session in progress. Waits for the BMS command to change before finishing the session. CHARGE_ENABLED \u2192 CHARGE_STOPPING BMS command is not CHARGE_ENABLE*** CHARGE_ENABLED \u2192 DISCONNECT On any BMS fault CHARGE_STOPPING Charge session is stopping. Waits for current flow to minimise before opening contactors. CHARGE_STOPPING \u2192 IDLE Current flow is less than threshold (5A) CHARGE_STOPPING \u2192 DISCONNECT On any BMS fault; Timeout (20s) Charge method configuration State Contactors Engaged Balancing Enabled EVSE [0x1] CHARGE_INIT None No CHARGE_CONNECT 4 No CHARGE_ENABLED 4 &amp; 5 No CHARGE_STOPPING 4 No OTHER [0x1] CHARGE_INIT None No CHARGE_CONNECT 4 No CHARGE_ENABLED 4 &amp; 5 No CHARGE_STOPPING 4 &amp; 5 No"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.2/resources/State_Machine_Diagrams.html","title":"State Machine Diagrams","text":""},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.2/resources/State_Machine_Diagrams.html#system-wide-state-diagram","title":"System Wide State Diagram","text":"<pre><code>graph\n    classDef empty height:0px,width:0px,stroke:none;\n\n    SAFE(SAFE)\n    IDLE(IDLE)\n    INIT_START@{shape: dbl-circ, label: Boot} --&gt; INITIALISE\n    INITIALISE(INITIALISE)              -- Initialisation complete --&gt; CALIBRATE\n    CALIBRATE(CALIBRATE)                -- Contactors Open --&gt; SAFE\n    SAFE(SAFE)                          -- Faults Cleared &amp; Idle Command --&gt; IDLE\n\n    CHARGE_INIT(CHARGE_INIT)            -- Idle Command             --&gt; IDLE\n    CONNECT(CONNECT)                    -- Idle Command             --&gt; IDLE\n    CHARGE_STOPPING(CHARGE_STOPPING)    -- Contactors Open          --&gt; IDLE\n    PRECHARGE(PRECHARGE)                -- Idle Command             --&gt; IDLE\n    ENABLED(ENABLED)                    -- Idle Command             --&gt; IDLE\n\n    IDLE                                -- Charge Init Command      --&gt; CHARGE_INIT\n    IDLE                                -- Connect Command          --&gt; CONNECT\n\n    CONNECT                             -- Fault                    --&gt;  DISCONNECT\n    PRECHARGE                           -- Fault                    --&gt;  DISCONNECT\n    ENABLED                             -- Fault                    --&gt;  DISCONNECT\n    CHARGE_INIT                         -- Fault                    --&gt;  DISCONNECT\n    CHARGE_CONNECT                      -- Fault                    --&gt;  DISCONNECT\n    CHARGE_ENABLED                      -- Fault                    --&gt;  DISCONNECT\n    CHARGE_STOPPING                     -- Fault                    --&gt;  DISCONNECT\n    DISCONNECT(DISCONNECT)              -- Time Passed              --&gt; SAFE\n\n    CHARGE_INIT(CHARGE_INIT)            -- Charge Enable Command    --&gt; CHARGE_CONNECT\n    CHARGE_CONNECT(CHARGE_CONNECT)      -- Precharge Passes         --&gt; CHARGE_ENABLED\n    CHARGE_CONNECT(CHARGE_CONNECT)      -- Idle Command             --&gt; CHARGE_STOPPING\n    CHARGE_ENABLED(CHARGE_ENABLED)      -- Idle Command             --&gt; CHARGE_STOPPING\n\n\n    CONNECT(CONNECT)                    -- Enable Command           --&gt; PRECHARGE\n    PRECHARGE(PRECHARGE)                -- Precharge Passes         --&gt; ENABLED\n\n</code></pre>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.2/resources/State_Machine_Diagrams.html#initialisation-state-diagram","title":"Initialisation State Diagram","text":"<pre><code>graph\n    subgraph Initialisation\n        INIT_START@{shape: dbl-circ, label: Boot} --&gt; INITIALISE\n        INITIALISE(INITIALISE) -- Initialisation complete --&gt; CALIBRATE\n        CALIBRATE(CALIBRATE) -- Contactors Open --&gt; SAFE\n        SAFE(SAFE) -- Idle Command --&gt; IDLE(IDLE)\n    end</code></pre>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.2/resources/State_Machine_Diagrams.html#discharging-state-diagram","title":"Discharging State Diagram","text":"<pre><code>graph\n    subgraph Discharging\n\n        direction TB\n        IDLE(IDLE) -- Connect Command --&gt; CONNECT\n        CONNECT(CONNECT) -- Enable Command --&gt; PRECHARGE\n        PRECHARGE(PRECHARGE) -- Precharge Passes --&gt; ENABLED\n\n        CONNECT(CONNECT) -- Idle Command --&gt; IDLE\n        PRECHARGE(PRECHARGE) -- Idle Command --&gt; IDLE\n        ENABLED(ENABLED) -- Idle Command --&gt; IDLE\n\n        CONNECT -- Fault --&gt; DISCONNECT\n        PRECHARGE -- Fault --&gt; DISCONNECT\n        ENABLED -- Fault --&gt; DISCONNECT\n        DISCONNECT(DISCONNECT) -- Time Passed --&gt; SAFE\n        SAFE(SAFE) -- Faults Cleared, Idle Command --&gt; IDLE\n    end</code></pre>"},{"location":"Battery_Management_Systems/Prohelion_BMS_D1000_Gen2/Firmware/V1.2/resources/State_Machine_Diagrams.html#charging-state-diagram","title":"Charging State Diagram","text":"<pre><code>graph\n    subgraph Charging\n        direction TB\n        IDLE(IDLE) -- Charge Init Command --&gt; CHARGE_INIT\n        CHARGE_INIT(CHARGE_INIT) -- Charge Enable Command --&gt; CHARGE_CONNECT\n        CHARGE_CONNECT(CHARGE_CONNECT) -- Precharge Passes --&gt; CHARGE_ENABLED\n        CHARGE_ENABLED(CHARGE_ENABLED) -- Idle Command --&gt; CHARGE_STOPPING\n        CHARGE_STOPPING(CHARGE_STOPPING) -- Contactors Open --&gt; IDLE\n\n        CHARGE_INIT(CHARGE_INIT) -- Idle Command --&gt; IDLE\n        CHARGE_CONNECT(CHARGE_CONNECT) -- Idle Command --&gt; CHARGE_STOPPING\n\n        CHARGE_INIT -- Fault --&gt; DISCONNECT\n        CHARGE_CONNECT -- Fault --&gt; DISCONNECT\n        CHARGE_ENABLED -- Fault --&gt; DISCONNECT\n        CHARGE_STOPPING -- Fault --&gt; DISCONNECT\n\n        DISCONNECT(DISCONNECT) -- Time Passed --&gt; SAFE\n        SAFE(SAFE) -- Faults Cleared, Idle Command --&gt; IDLE\n    end</code></pre>"},{"location":"Battery_Management_Systems/Prohelion_BMS_M48_Gen1/index.html","title":"Prohelion BMS M48 Gen1","text":"<p>This document describes the interface, installation, and usage requirements for the Prohelion BMS M48 Gen1 (PHLN-3000-0175). The PHLN-3000-0175 part was designed and developed by Prohelion Pty Ltd.</p> <p>The Prohelion BMS M48 Gen1 provides the ability to easily monitor and control large capacity 48V battery packs up to a 22S cell configuration with up to 8 temperature sensors.  The number of cells and temperatures can be individually controlled to allow ultimate pack configuration flexibility. The BMS provides all necessary error checking and thresholding logic to keep the battery system and the cells within the area of safe operation. This includes Over Current, Over Voltage, Under Voltage, Under Temperature and Over Temperature thresholds.</p> <p>The 48V BMS individually controls Precharge, Charge and Discharge outputs to ensure that any connected loads do not over-charge or over-discharge the battery pack. The 48V BMS also includes the ability to preemptively balance cells (mid-pack balancing) and provides closed-loop state-of-charge (SoC) estimation to ensure the highest performance can be extracted from the battery pack.</p> <p></p> 48V panel 1 <p></p> 48V panel 2 <p></p> 48V panel 3 <p></p> 48V panel 4 <p>Figure 1: Prohelion BMS M48 Gen1 Render</p>"},{"location":"Battery_Management_Systems/Prohelion_BMS_M48_Gen1/index.html#system-diagram","title":"System Diagram","text":"<p>The Prohelion BMS M48 Gen1 has several electrical interfaces and connections to external systems. The figure below shows locations for each of these connections and interfaces.</p> <p></p> Figure 2: Prohelion BMS M48 Gen1 Diagram <p></p> Figure 3: Prohelion Front Panel PCB Diagram"},{"location":"Battery_Management_Systems/Prohelion_BMS_M48_Gen1/index.html#acronyms-and-abbreviations","title":"Acronyms and Abbreviations","text":"Acronym Abbreviation <code>A</code> Ampere <code>Ah</code> Ampere Hour <code>BMS</code> Battery Management System <code>CAN-B</code> Controller Area Network - Bus <code>DC</code> Direct Current <code>ESS</code> Energy Storage System <code>HV</code> High Voltage <code>LV</code> Low Voltage <code>SoC</code> State of Charge <code>V</code> Voltage"},{"location":"Battery_Management_Systems/Prohelion_BMS_M48_Gen1/index.html#safety","title":"Safety","text":"<p>Caution</p> <p>The following safety precautions must be observed during all phases of operation, service and repair of this equipment. Failure to comply with the safety precautions or warnings in this document violates safety standards of design, manufacture and intended use of this equipment and may impair the built-in protections. Prohelion shall not be liable for user\u2019s failure to comply with these requirements</p> <p>Danger - DC Voltage</p> <p>This System controls DC voltages (~48VDC) with the potential to deliver high current (&gt;200A), failure to isolate and test for isolation before installation, service or troubleshooting could result in damage to equipment or personal! </p> <p>Danger - Live Circuits</p> <p>Operating personnel should not remove the unit covers. No internal adjustment or component replacement is allowed by non Prohelion qualified personnel (excluding fuses). Never replace components with the power cable connected. To avoid injuries, always disconnect power, remove external voltage sources, discharge circuits and test for dangerous voltage potentials before touching components.</p>"},{"location":"Battery_Management_Systems/Prohelion_BMS_M48_Gen1/BMS_Functions.html","title":"BMS Functions","text":"<p>The Prohelion 48V BMS provides several high-level functions, in order of priority:</p> <ul> <li>Monitor: all voltages, temperatures and currents and act on the information to protect the battery pack against being operated outside acceptable safety limits.  </li> <li>Control: the load output using the pre-charge, enable-charge, and enable-discharge control circuitry.</li> <li>Manage: the cells to keep them at equal State of Charge (SoC)</li> <li>Report: telemetry to other systems to allow seamless integration with external load control and monitoring solutions.</li> <li>Display: the status and State of Charge and information via the LEDs on the front-panel PCB.</li> </ul> <p>The BMS performs these functions by measuring the following parameters:</p> <ul> <li>22 individual cell voltages </li> <li>8 individual cell temperatures </li> <li>Total battery voltage </li> <li>Total load voltage </li> <li>Total load current</li> </ul> <p>To achieve management over the cells and pack, it controls:</p> <ul> <li>Precharge MOSFETs with external pre-charge resistor.</li> <li>Charge enable MOSFETs.</li> <li>Discharge enable MOSFETs.</li> <li>Individual cell bypass (shunt) balance resistors.</li> </ul>"},{"location":"Battery_Management_Systems/Prohelion_BMS_M48_Gen1/BMS_Functions.html#electrical-specifications","title":"Electrical Specifications","text":"Specification Value <code>Max. Voltage</code> 60V <code>Nominal Power</code> 5kW <code>Max. Continuous Discharge Current</code> 100A <code>Max. Continuous Charge Current</code> 100A <code>Number of Cells Monitored</code> 22 Cells <code>Max. Power Consumption</code> 30mA <code>CAN Communication</code> Yes <code>Supported Chemistries</code> LiFePO4, Li-ion, LTO <code>Dimensions</code> 115x215mm <code>Weight</code> 200g <code>Opperating Temperature Range</code> -20\u00b0C to +80\u00b0C <code>Maximum Balance Current</code> 666mA <code>Cell Voltage Sense Accuracy</code> 0.6mV <code>Number of External Temperature Sensors</code> 8 <code>Fused Cell Sense</code> Yes <code>Reverse Polarity Protection</code> Yes <code>Part Number</code> PHLN-3000-0175"},{"location":"Battery_Management_Systems/Prohelion_BMS_M48_Gen1/CAN_Communication.html","title":"CAN Communication","text":""},{"location":"Battery_Management_Systems/Prohelion_BMS_M48_Gen1/CAN_Communication.html#received-messages","title":"Received Messages","text":"<p>EXAMPLE:</p> CAN ID: ...ID + ... - Frequency ..Hz <code>Signal</code> Bits Type Description"},{"location":"Battery_Management_Systems/Prohelion_BMS_M48_Gen1/CAN_Communication.html#bms-switches-message","title":"BMS Switches Message","text":"CAN ID: Switches ID* - Frequency should be at least 1Hz <code>BMS Switches</code> 64..56 Uint8 The switches which control the BMS during normal operation.  Bits: 0 (0x01)  Flag: Enable the pack <code>Fault Switches</code> 55..48 Uint8 The switches which control the BMS when an error has been triggered.  Bits: 7 (0xF0)  Flag: Clear the latched error events <code>Not Used</code> 47..0 - - <p>Used to control the BMS and engage the pack when not in STANDALONE mode. The DISCONNECTED event will be triggered if the switches message is not received for a period of more than 5 seconds.</p> <p><sup>* Default is 0x500</sup></p>"},{"location":"Battery_Management_Systems/Prohelion_BMS_M48_Gen1/CAN_Communication.html#bms-config-message","title":"BMS Config Message","text":"ID: Base ID + 0x0F0* - Frequency N/A <code>Configuration parameter ID</code> 64..56 Uint8 The ID of the configuration parameter that is being updated. (See the ID column of Configuration parameter table)  If set to 0xFF, this will persist all configuration parameters to non-volatile flash. This is required to \u201csave\u201d the configuration values after being updated. <code>Command</code> 55..48 Uint8 The operation ID of the command that is being performed on the configuration parameter.  Bits: 0..1..0x98  Flag: WRITE .. READ .. SOC_RESET <code>Not Used</code> 47..16 - - <code>Value</code> 15..0 (See the ID column of Configuration parameter table) The value of the configuration parameter. <p>Used to read and update the configuration parameters of the BMS and save them to flash.__ - If a READ command is issued, The BMS will respond with an identical CAN message that contains the currently value that is stored on the BMS - If a WRITE command is issued, then a 2<sup>2</sup> BMS Config message (with the configuration parameter ID of 0xff) will need to be sent for the value to be saved permanently in flash.</p> <p><sup>* default is 0x6F0</sup></p>"},{"location":"Battery_Management_Systems/Prohelion_BMS_M48_Gen1/CAN_Communication.html#soc-reset-message","title":"SoC Reset Message","text":"<p>The BMS has the ability to have the SoCpercentage reset manually if required. This may be useful for testing, demonstration purposes or commissioning of new battery systems.</p> <p>The SoCreset is performed by making use of the SOC_RESET command of the BMS Config Message and setting the value to between 0 and 1000. This value translates to 0% to 100% respectively. </p> <p>For example, sending the following CAN message will set the SoCto 95% and clear the SoCINVALID event. </p> <p></p> Figure 12: BMS SoCConfig Example"},{"location":"Battery_Management_Systems/Prohelion_BMS_M48_Gen1/CAN_Communication.html#transmitted-messages","title":"Transmitted Messages","text":"<p>All CAN messages transmitted by the BMS are described in a DBC single file, also known as CAN Database file. The DBC file format is an industry standard for documenting CAN messages as a set of messages that each contain one or more signals. A signal is a single value such as a voltage of current. </p> <p>The DBC file for the 48V BMS is available upon request. </p> <p>There are several software products that support viewing DBC files and parsing CAN data using DBC file. The two main software products are:</p> <ul> <li>Profinity \u2013 Used for parsing CAN bus data using a DBC file into messages and signals that can be used for monitor and logging of CAN bus systems. </li> <li>Vector CAN DB++ Editor \u2013 Used for editing DBC files. </li> </ul>"},{"location":"Battery_Management_Systems/Prohelion_BMS_M48_Gen1/Connectors.html","title":"Connectors","text":"<p>This section specifies the connector types and connector pinouts for the external connections of the Prohelion 48V BMS.</p>"},{"location":"Battery_Management_Systems/Prohelion_BMS_M48_Gen1/Connectors.html#connector-part-numbers","title":"Connector Part Numbers","text":"<p>The table below lists the part numbers for each connector used by the Prohelion 48V BMS.</p> Connector Name Receptacle Part Number Plug Part Number <code>Data and Front Panel</code> N/A WR-WST REDFIT IDC  SKEDD 490107671412 <code>Cell Voltage and Temperature Sense, Most Positive</code> JAE Electronics MX34R32HF4T (32 pin, dual row) JAE Electronics MX34032SF1 <code>Cell Voltage and Temperature Sense, Most Negative</code> JAE Electronics MX34R32HF4T (32 pin, dual row) JAE Electronics MX34032SF1 <code>Load Negative and Load Positive</code> Wurth Elektronik 7460408 (M5 internal thread) Generic M5 terminal lug <code>Battery Negative and Battery Positive</code> Wurth Elektronik 7460408 (M5 internal thread) Generic M5 terminal lug <code>Precharge Resistor</code> Wurth Elektronik 649002127222 (WR-MPC4 4.20 mm Dual Row 2-Pin) Wurth Elektronik 649002113322"},{"location":"Battery_Management_Systems/Prohelion_BMS_M48_Gen1/Connectors.html#connector-viewing-direction","title":"Connector Viewing Direction","text":"<p>All connector diagrams in this document assume that the end-user is viewing the connector receptacle from the rear. The pin numbering in the connector diagrams is in alignment with the pin numbering specified in the datasheet of each connector type.</p> <p></p> Figure 4: Connector Viewing Direction"},{"location":"Battery_Management_Systems/Prohelion_BMS_M48_Gen1/Connectors.html#high-current-connections","title":"High-Current Connections","text":"<p>There are four high current connections between the BMS, the battery cells and the load:</p> <ul> <li>Battery Negative: Connected to the negative terminal of the most negative cell in the battery.</li> <li>Battery positive: Connected to the positive terminal of the most positive cell in the battery.</li> <li>Load negative: Connected to the negative (ground) terminal of the load.</li> <li>Load positive: Connected to the positive terminal of the load.</li> </ul> <p>The simplified system diagram below shows the arrangement of these high-current connections.</p> <p></p> Figure 5: High Current Connections for Prohelion 48V BMS"},{"location":"Battery_Management_Systems/Prohelion_BMS_M48_Gen1/Connectors.html#front-panel-connector","title":"Front Panel Connector","text":"<p>The Front Panel Connector provides an interface for the CAN bus communication, Status LEDs and BMS power switch that is exposed on the front panel PCB of a battery system. The selection of the front-panel connector is intended to make to wiring and connection of the front panel PCB simple and easy. The 14-way SKEDD connector and associated 14-way IDC ribbon cable ensures that the pin-out between the BMS and the front-panel PCB is not mistakenly swapped around or inserted in the wrong orientation. </p> <p>When crimping the SKEDD connectors onto the IDC ribbon, always ensure that pin-1 of the first connector is connected to pin-1 of the second connector. IDC ribbons typically have the first conductor marked with red to indicate that it is pin-1. The pin number labels apply for both the BMS side and the Front Panel PCB side of the harness.</p> <p></p> Figure 6: Front Panel Connector Pinout Pin Number Label <code>1</code> GND <code>2</code> 3.3V Output <code>3</code> Power Enable In (Batt+ Fused at 1A) <code>4</code> Power Enable Out <code>5</code> NC <code>6</code> SoC20% LED <code>7</code> SoC40% LED <code>8</code> SoC60% LED <code>9</code> SoC80% LED <code>10</code> SoC100% LED <code>11</code> Error LED <code>12</code> Status LED <code>13</code> CAN High <code>14</code> CAN Low"},{"location":"Battery_Management_Systems/Prohelion_BMS_M48_Gen1/Connectors.html#cell-sense-connector-a","title":"Cell Sense Connector A","text":"<p>The Cell Sense Connector A provides an interface for the cell sense connections to the 11 most-negative cells of a 22S battery system (Cells 1-11).</p> <p>The pins labelled as TOPSTACKA (Pin 3) and GNDA (Pin 27) provide the power required to run the cell monitoring chip when the microcontroller is enabled. Ideally, these connections are independent of the cells sense connections (Pins 5 and 27) and are wired as separate electrical conductors directly to the cells. This reduces the impact of voltage drop caused by the power consumption of the cell monitoring chip that would interfere with the voltage sense readings and cell balancing.</p> <p>Only a Murata Electronics NXFT15XH103FA2B100 thermistor should be used for temperature sense. Any other part will have a different B-Constant and result in incorrect temperature readings. </p> <p></p> Figure 7: Cell Sense Connector A Pinout Pin Number Label Pin Number Label <code>1</code> NC <code>17</code> NC <code>2</code> NC <code>18</code> NC <code>3</code> BATT 11+ (TOPSTACKA) (PIN4) <code>19</code> NC <code>4</code> NC <code>20</code> NC <code>5</code> BATT 11+ <code>21</code> BATT 10+ <code>6</code> BATT 9+ <code>22</code> BATT 8+ <code>7</code> BATT 7+ <code>23</code> BATT 6+ <code>8</code> BATT 5+ <code>24</code> BATT 4+ <code>9</code> BATT 3+ <code>25</code> BATT 2+ <code>10</code> BATT 1+ <code>26</code> BATT 1- (GNDA) <code>11</code> NC <code>27</code> BATT 1- (GNDA) <code>12</code> NC <code>28</code> NC <code>13</code> GNDA (Temp A4) (see note) <code>29</code> Temp A4 <code>14</code> GNDA (Temp A3) (see note) <code>30</code> Temp A3 <code>15</code> GNDA (Temp A2) (see note) <code>31</code> Temp A2 <code>16</code> GNDA (Temp A1) (see note) <code>32</code> Temp A1 <p>NOTES: The pins labelled as GNDA (Temp X) on the temp sense connector is not to be used for anything other than providing a ground for the respective thermistor on the same connector. They are not the same as battery ground or any other ground.  A short-circuit between battery ground (or GNDB) and the thermistor ground could result in damage.</p>"},{"location":"Battery_Management_Systems/Prohelion_BMS_M48_Gen1/Connectors.html#cell-sense-connector-b","title":"Cell Sense Connector B","text":"<p>The Cell Sense Connector B provides an interface for the cell sense connections to the 11 most-positive cells of a 22S battery system (Cells 12-22).</p> <p>The pins labelled as TOPSTACKB (Pin 3) and GNDB (Pin 27) provide the power required to run the cell monitoring chip when the microcontroller is enabled. Ideally, these connections are independent of the cells sense connections (Pins 5 and 26) and are wired as separate electrical conductors directly to the cells. This reduces the impact of voltage drop caused by the power consumption of the cell monitoring chip that would interfere with the voltage sense readings and cell balancing. </p> <p>Only a Murata Electronics NXFT15XH103FA2B100 thermistor should be used for temperature sense. Any other part will have a different B-Constant and result in incorrect temperature readings. </p> <p></p> Figure 8: Most positive cell sense Connector pinout Pin Number Label Pin Number Label <code>1</code> NC <code>17</code> NC <code>2</code> NC <code>18</code> NC <code>3</code> BATT 22+ (TOPSTACKB) (PIN4) <code>19</code> NC <code>4</code> NC <code>20</code> NC <code>5</code> BATT 22+ <code>21</code> BATT 21+ <code>6</code> BATT 20+ <code>22</code> BATT 19+ <code>7</code> BATT 18+ <code>23</code> BATT 17+ <code>8</code> BATT 16+ <code>24</code> BATT 15+ <code>9</code> BATT 14+ <code>25</code> BATT 13+ <code>10</code> BATT 12+ <code>26</code> BATT 11+ (GNDB) <code>11</code> NC <code>27</code> BATT 11+ (GNDB) <code>12</code> NC <code>28</code> NC <code>13</code> GNDA (Temp B4) (see note) <code>29</code> Temp B4 <code>14</code> GNDA (Temp B3) (see note) <code>30</code> Temp B3 <code>15</code> GNDA (Temp B2) (see note) <code>31</code> Temp B2 <code>16</code> GNDA (Temp B1) (see note) <code>32</code> Temp B1 <p>NOTES: The pins labelled as GNDB (Temp X) on the temp sense connector is not to be used for anything other than providing a ground for the respective thermistor on the same connector. They are not the same as battery ground or any other ground.  A short-circuit between battery ground (or GNDA) and the thermistor ground could result in damage.</p>"},{"location":"Battery_Management_Systems/Prohelion_BMS_M48_Gen1/Connectors.html#precharge-resistor-connector","title":"Precharge Resistor Connector","text":"<p>The precharge resistor connector allows for external precharge resistor of varying resistance and power ratings to be added to the BMS depending on the intended use-case. The BMS does not include an internal precharge resistor. The most suitable precharge resistor may vary depending on the exact capacitance, bleed resistance and precharge timing requirements of the system. </p> <p></p> Figure 9: Precharge Resistor Connector Pin Number Label <code>1</code> Precharge Resistor terminal A <code>2</code> Precharge Resistor terminal B <p>The generally recommended precharge resistor is a 33-ohm 100W chassis mount resistor, such as the ARCOL HS100 33R F or TE HSC10033RJ. A 33-ohm 100W resistor is an ideal balance between precharge time, safety, and component longevity. It allows the BMS to maintain the maximum precharge current (~1.75A) for the entire precharge timeout without excessively overloading the precharge resistor in the event of a short-circuited load output. The precharge voltage delta and precharge timeout are critical configuration parameters which need to be set according to the selected precharge resistor and the connector load. </p> <p></p> Figure 10: Recommended precharge resistor <p>A smaller precharge resistor (of lesser resistance or power rating) can be used if the failure conditions are properly considered. Do not exceed a maximum precharge current of 5A</p>"},{"location":"Battery_Management_Systems/Prohelion_BMS_M48_Gen1/Connectors.html#can-bus-wiring","title":"CAN Bus Wiring","text":"<p>The Front-Panel PCB provides CAN bus connection via two RJ45 connectors. The RJ45 connectors have the following pin allocations. This allows for the BMS the be compatible with both the Victron Type-A and Type-B cables. </p> <p>See here</p> Pin Number Label <code>1</code> NC <code>2</code> GND <code>3</code> NC <code>4</code> CAN High <code>5</code> CAN Low <code>6</code> GND <code>7</code> NC <code>8</code> NC <p>If the BMS is connected to the same CAN bus as several other BMS units, make sure that there is only two 120-Ohm bus terminating resistor at either end of the bus. The Front-Panel PCB includes a switch which allows a 120-Ohm resistor to be switched between Can high and CAN low. This is a convenient mechanism to include a terminating resistor without the need to add special RJ45 terminators. Before turning on a system, make sure that exactly 60-Ohms can be measured between CAN High and CAN Low. </p> <p>The SAE J1939 standard specifies that the CAN bus network is intended to be a single linear bus which runs between each CAN controller on the vehicle.  The bus is required to have exactly two terminating resistors and a short stub is permitted between each controller and the bus. There are several components in the ESS system that have a single CAN connector with a relatively short stub cable on the end. These components need to be connected to the bus correctly for the system to operate properly. </p> <p>For more information on how to integrate these components, refer to the official SAE J1939 standard documentation </p>"},{"location":"Battery_Management_Systems/Prohelion_BMS_M48_Gen1/Firmware_update_procedure.html","title":"Firmware Update Procedure","text":""},{"location":"Battery_Management_Systems/Prohelion_BMS_M48_Gen1/Firmware_update_procedure.html#setup","title":"Setup:","text":"<p>The following steps detail the process required to correctly setup a BMS to begin the Firmware flashing process:</p> <p>1.  Ensure that the 48V BMS is connected to a working set of battery cells using the sense cables and that the BMS has at least 30V across the Load Negative and Load Positive connections.</p> <p>2.  Plug a 48V BMS cable harness into the Front Panel Connector.</p> <p>3.  Plug a 48V BMS CAN Bus adapter cable into the 48V BMS cable harness.</p> <p>4.  Plug a PEAK-CAN USB Adapter into the 48V BMS CAN Bus adapter cable.</p> <p>5.  Plug the PEAK-CAN USB Adapter into a computer. </p> <p>6.  Plug the PEAK-CAN USB Adapter into the computer. </p> <p>7. Ensure that there is exactly two 120 Ohm terminating resistors on the CAN bus! DO NOT proceed if you have too many or too little two resistors. </p> <p>8.  Ensure that the compute has the latest version of the Profinity software installed on it.</p> <p>9.  Turn the power switch of the 48V BMS cable harness on. </p>"},{"location":"Battery_Management_Systems/Prohelion_BMS_M48_Gen1/Firmware_update_procedure.html#flashing-the-firmware","title":"Flashing the Firmware","text":"<p>The firmware flashing procedure is similar that of other Prohelion MSP430-based devices:</p> <p>1.  Start the Profinity application.</p> <p>2.  Create a new profile (if you haven't already created one)</p> <p>3.  Add a PEAK Systems USB adapter device via the CAN Adapters tool.</p> <p></p> Step 3. <p>4.  Add a Prohelion Virtual CAN Adapter &amp; Hub device via the Add Device tool.     - Leave all settings as the default values.</p> <p></p> Step 4. <p>5.  Add a Prohelion NextGen BMS device via the Add Device tool.     - Leave all settings as default. Set the Base CAN ID to right address if the device firmware has been configured to anything other than the default base CAN ID of 0x600.</p> <p></p> Step 5. <p>6.  Right click on the Prohelion NextGen BMS device in the profile viewer. Select Update Firmware. </p> <p></p> Step 6. <p>7.  Select the 48V BMS device in the firmware loader menu.  Make sure the Device ID is 0x00350100. </p> <p></p> Step 7. <p>8.  Click Browse and locate the user application firmware file (PHLN-3000-0175-XXXX-XX-XX-XXXX.tsf) on your computer. Make sure the firmware Device ID is also 0x00350100.</p> <p></p> Step 8. <p>9.  Click Erase / Program to flash the device. Once completed, there should be a success message in the text box. </p> <p></p> Step 9. <p>10. If the firmware programming failed, check the CAN bus cabling to ensure that there is exactly two 120 Ohm terminating resistors. If there are not exactly two terminating resistors, it will cause communication issues that can lead to the device becoming no longer functional due to corrupted firmware. Also try unplugging any other devices on the CAN bus that is potentially interfering with the firmware update. If it is still failing, try unplugging the PEAK-USB adapter, restarting the computer and re-opening Profinity.    </p>"},{"location":"Battery_Management_Systems/Prohelion_BMS_M48_Gen1/Firmware_update_procedure.html#default-configuration-for-22s-lto","title":"Default Configuration for 22S LTO","text":"Description Value <code>CAN - Bitrate</code> 4 <code>CAN - Base ID</code> 0x600 <code>CAN - Switches ID</code> 0x700 <code>BMS - Modes Config</code> 0x05 <code>Cell - Under Voltage Threshold (V)</code> 1.8V <code>Cell - Critical Under Voltage Threshold (V)</code> 1.5V <code>Cell - Over Voltage Threshold (V)</code> 2.75V <code>Cell - Critical Over Voltage Threshold (v)</code> 2.8V <code>Cell - Balancing Threshold (V)</code> 2.6V <code>Temp - Over Temperature Threshold (\u00b0C)</code> 65.0\u00a0 <code>Temp - Under Temperature Threshold (\u00b0C)</code> -20.0\u00a0 <code>Pack - Precharge Voltage Delta (V)</code> 10.000\u00a0 <code>Pack - Precharge Timeout (s)</code> 20.0\u00a0 <code>Pack - Overcurrent Threshold (A)</code> 100.00 <code>Pack - Capacity (Ah)</code> 90.00\u00a0 <code>Node - Count</code> 2 <code>Node - Parallel Count</code> 1 <code>Node0 - Cell Count</code> 11 <code>Node0 - Temp Count</code> 4 <code>Node1 - Cell Count</code> 11 <code>Node1 - Temp Count</code> 4"},{"location":"Battery_Management_Systems/Prohelion_BMS_M48_Gen1/Generic_Battery_Assembly_procedure.html","title":"Generic Battery Assembly Procedure","text":"<p>The following section aims to provide a generic battery assembly procedure that can be used as a guide for developing working instructions that are specific to the system into which the BMS is being installed.</p> <p>NOTE: This guide does not provide specific advice on wiring types and sizing. Due diligence should be performed by the system integrator to ensure that all wiring adheres to the requirements for the appropriate standards. Different countries have different standards. Therefore, the system integrator needs to check which standards apply to the region in which the battery is sold and installed. For the Australian market, standards such as AS/NZS 3000 and AS/NZS 3008.1.1 may apply. For non-Australian markets, standards such as IEC/EN 60364 may apply. </p> <p>Step 1: Create the cell-sense harness</p> <p>1a. Select a suitable wire type and size for running sense wires to the individual cells. Make sure that the selected wiring has the correct specifications to meet the safety standards that apply to the system. This may include insulation requirements and ensuring adequate strain relief when installed. Make sure the wiring can handle the maximum balance current and any short-circuit conditions that could occur. </p> <p>1b. Select a suitable socket contact for the JAE Electronics MX34 housings of the Cell Sense connectors. The part numbers for suitable socket contacts and the associated crimp tools can be found in the datasheet for the Cell Sense Connectors. </p> <p>1c. Determine a suitable length to cut the cell-sense wires so that they can reach each of the terminals of the cells once the BMS is mounted in place. For a 22S battery, a total of 28 lengths of wires will need to be cut. An additional 16 lengths will need to be cut for the 8 thermistors.  </p> <p>1d. Crimp the JAE Electronics MX34 socket contacts onto one end of each conductor. An appropriate socket contact will need to be used. Make sure that the crimp has been formed properly and adheres to the appropriate guidelines. </p> <p>1e. Starting with Cell Sense Connector A, insert 14 lengths of conductor into a MX34 housing. Make sure that only the pins labelled \u201cBATT\u201d are inserted and all other locations left blank. </p> <p>1f. Label the end of each the conductors using stickers or printed heat shrink with the pin label (e.g., \u201cBATT 8+). This is to ensure that each conductor is connected to the right battery cell and that no components of the BMS are damaged due to incorrect wiring. </p> <p>1g. Crimp appropriate ring terminals onto the other side of each cell-sense wire. If required, the wire can be trimmed to ensure the final installation is neat and tidy. If a battery pack is available, use it to measure the correct length of each wire. If two wires have the same label (e.g., \u201cBATT 11+\u201d or \u201cBATT 1-\u201d), they can share a ring terminal. </p> <p>1h. Follow a similar procedure in the steps 3-6 above to create the wiring for the thermistors.</p> <p>1i. Solder and heat shrink each leg of a thermistor to a wire. If required, the wire can be trimmed to ensure the final installation is neat and tidy. If a battery pack is available, use it to measure the correct length of each wire. Make sure that no part of the thermistor can cause short-circuit to the battery cells. This can be achieved by insulating the thermistor legs using heat shrink. </p> <p>1j. Repeat steps 5-9 for the Cell Sense Connector B. </p> <p>Step 2: Create the front-panel harness</p> <p>2a. Using an appropriate 14-way IDC ribbon cable, cut a length that will allow the front panel PCB to connect to the BMS while installed in the enclosure. Add extra length if needed for maintenance or removing of front panel while diagnosing issues. </p> <p>2b. Slide a 14-way SKEDD connector on one end of the cable, ensuring that the red conductor of the ribbon cable is aligned with pin 1 of the SKEDD connector. Press the back side of the connector down to ensure the ribbon cable and connector have full engaged. </p> <p>2c. Repeat previous step for other end of the ribbon cable. </p> <p>2d. Alternatively, pre-crimped options are available. See here</p> <p>Step 3: Create the precharge resistor harness</p> <p>3a. Select a suitable wire type and size for running wires to the precharge resistor. Given that the battery voltage is a maximum of 60V and the specified precharge resistor is 33 ohms, the maximum current can be determined. Make sure a factor of safety is included when selecting a wire gauge.</p> <p>3b. Cut two lengths of the selected wire and crimp one end using the appropriate crimp for the precharge resistor connector housing. </p> <p>3c. Solder and heatsink the other end of each wire to the terminals of the precharge resistor. </p> <p>Step 4: Wire up the battery cells</p> <p>4a. Place each of the battery cells into their enclosure or mounting structure. </p> <p>4b. Carefully add the busbars to connect the cells. Starting from the bottom (i.e., Cell 1) and working towards the middle of the stack (i.e., Cell 11). Then start from top (i.e., Cell 22) and work towards the middle of the stack (i.e., Cell 12). Leave the middle busbar between Cell 11 and Cell 12 out so that the battery is not full assembled and remains at half the maximum voltage. This ensures that an accidental short between the battery positive and negative does not cause. </p> <p>4c. Using the cell-sense harnesses, place each of the ring terminals onto the terminals of the respective cell terminal. Make extra sure that a ring terminal is not misplaced onto the wrong battery terminal. </p> <p>4d. Using a digital multi-meter, double-check that the voltage at the pins of each cell-sense connector. For example, on Cell Sense Connector A, use Pin 27 (BATT 1-) as the ground reference of the multi-meter. One pin at a time, measure the voltage present at each pin. Starting with BATT 1+ and working toward BATT 11+. Each step should result in a higher voltage measurement. If not, double check the wiring and make sure not ring terminals have been misplaced. IMPORTANT! IF this is not done correctly, it will cause damage to the BMS.</p> <p>4e. Place the temperature sense thermistors in appropriate locations and fix into place using thermal compound or tape.</p> <p>4f. Only place middle busbar between Cell 11 and Cell 12 after the BMS and front-panel has been installed.</p> <p>Step 5: Wire up the BMS to battery</p> <p>5a. Select a suitable wire type and size for running high-current power between the Battery, BMS and external loads. At a minimum these cables need to maintain the full current (i.e., 100A) continuously and includes any thermal considerations of the final installation. The cable should be able to sustain the short-circuit current between the battery positive and negative long enough for the battery fuse to blow. Alternatively, laser-cut busbars can be used in place of the cables, but the same constraints will apply. </p> <p>5b. Select a suitable cable lug sizes for the selected cable size. The different cable lugs sizes will need to be selected for the Battery cell terminals (2-4 lugs), BMS terminals (4-8 lugs),  and Load terminals (2-4 lugs). The lugs going to the BMS should be compatible with the M5 screw terminals on the BMS. The \u201cload\u201d end could be considered as a set of connectors on the battery enclosure which allows for the system to be installed on-site. </p> <p>5c. Cut 4 lengths of the cable, one for battery positive to BMS, one for battery positive to BMS, one for Load positive to BMS, and another for Load negative to BMS. Double-up the number of lengths if the intention is to run two conductors for each connection and reduce the cable size. Make sure they are of appropriate length. Also consider if there are any circuit breakers or switches between the BMS and the load or battery.\u201d </p> <p>5d. Crimp and heat shrink cable lugs onto either end of the cable lengths. Make sure that the right combination of lugs has been used on each cable. For example, a cable running between the Battery and BMS will need a lug that is compatible with the cell terminal on one end and a lug that is compatible with the BMS on the other. </p> <p>5e. First connect the battery negative to the BMS, then connect the battery positive to the BMS. Load negative and positive connections can be connected later once the battery system has passed an initial power-up test.</p> <p>Step 6: Connect the front panel PCB</p> <p>6a. Install the front-panel PCB into the battery enclosure.</p> <p>6b. Ensure that the power switch is in the off position.</p> <p>6c. Connect one end of the front-panel harness to the front-panel PCB by inserting the SKEDD connector into the socket. Make sure you have the orientation of the connector correct. There is only one way that the connector will fit, do not force the connector in. </p> <p>6d. Connect one end of the front-panel harness to the BMS. </p> <p>Step 7: Power up the BMS</p> <p>7a. Using a digital multi-meter, measure the voltage between Cell 11 and Cell 12. With the busbar left uninstalled, there should be minimal voltage. If there is a significant voltage, consider if there is a short-circuit somewhere in the battery or BMS installation. Failing to perform this check may result in the battery being short-circuited in the next step.</p> <p>7b. Carefully install the link between the upper and lower halves of the battery cells. For example, install the busbar link between Cell 11 and Cell 12. </p> <p>7c. Using a digital multi-meter, measure the voltage between the  Battery- and Battery+ terminals of the BMS. The full battery voltage should be present (i.e. 48V)</p> <p>7d. Ensure no loads are connected to the Load- and Load+ of the BMS.</p> <p>7e. Turn in the BMS using the power switch on the front panel PCB. </p> <p>7f. The front panel LEDs should turn on and begin to show status and SoCinformation.</p> <p>Step 8: Connect the CAN Bus</p> <p>8a. Using a Windows computer, install the following software.     - Install the PEAK drivers     - Install Profinity</p> <p>8b. Follow the same setup procedure as defined in the Firmware Update Procedure.     - Connect PEAK CAN-USB adapter to the Front Panel and the Windows Computer</p> <p>8c. Right click on the Prohelion NextGen BMS device in the Profinity profile viewer window and select Show BMS Info.</p> <p></p> Step 8."},{"location":"Battery_Management_Systems/Prohelion_BMS_M48_Gen1/Software_Specifications.html","title":"Software Specifications","text":"<p>This section documents the software and firmware related behaviours, configuration, and telemetry specifications of the 48V BMS. </p> <p>The Prohelion 48V BMS firmware uses a finite state machine to control the outputs of the BMS. The finite state machine consists of a set of BMS states in which the BMS can operate. Each state can transition to another state through a set of transitions. Transitions can be triggered by combinations of BMS events. </p> <p>The diagram below shows the operational behaviour of the BMS State Machine. It shows each of the states and all the transitions between the states. </p> <p></p> Figure 11: BMS State Machine"},{"location":"Battery_Management_Systems/Prohelion_BMS_M48_Gen1/Software_Specifications.html#bms-outputs","title":"BMS Outputs","text":"<p>The BMS state machine can control the following outputs to safely manage the battery pack.</p> Output Description <code>Precharge</code> This output enables the pre-charge MOSFET to enable the battery to discharge through the pre-charge resistor  The pre-charge circuit allows for capacitive loads to be charged up to the battery voltage through a resistor in a controlled manner. This prevents high inrush currents which may cause damage to the cells, BMS and loads. <code>Discharge</code> This output enables the discharge MOSFET array which allows current to flow from the battery and into a load (conventional current flow). This will allow the battery to be discharged. <code>Charge</code> This output enables the charge MOSFET array which allows current to flow from the load and into the battery (conventional current flow). This will allow the battery to be charged. <code>Balance</code> This output is a virtual output which signals to other firmware modules that cell balancing is allowed in the current state. The other firmware modules will perform additional checks to ensure that balancing is only enabled when it is safe and necessary to balance the individual cell State of Charges using the balance resistors. It is important to note that all balance resistors may be disabled while the balance output may be on."},{"location":"Battery_Management_Systems/Prohelion_BMS_M48_Gen1/Software_Specifications.html#bms-states","title":"BMS States","text":"<p>The BMS state machine consists of the following finite states. Each state defines the set of outputs which should be enabled when the BMS is in that state. </p> ID State Description Outputs <code>S0</code> INIT The initialisation state All outputs off <code>S1</code> PRECHARGE Pre-Charge State PRECHARGE On <code>S2</code> DISCHARGE ENABLED Discharge enabled state DISCHARGE OnBALANCE On <code>S3</code> CHARGE ENABLED Charge enabled state CHARGE OnBalancing On <code>S4</code> ALL ENABLED All enabled state DISCHARGE OnCHARGE OnBALANCE On <code>S5</code> DISCHARGE ENABLED PRE Discharge enabled state with Precharge DISCHARGE OnPRECHARGE On <code>S6</code> CHARGE ENABLED PRE Charge enabled state with Precharge CHARGE OnPRECHARGE On <code>S7</code> ALL ENABLED PRE All enabled state with Precharge DISCHARGE OnPRECHARGE On <code>S99</code> ERROR Error State All Outputs off"},{"location":"Battery_Management_Systems/Prohelion_BMS_M48_Gen1/Software_Specifications.html#bms-events","title":"BMS Events","text":"<p>The BMS state machine can be triggered by several internal events.  Each event is a Boolean flag that can be either true (set) or false (cleared) by submodules in the BMS firmware. There are two types of events that the BMS state machine uses:</p> <ul> <li>The BMS state machine can be triggered by several internal events.  Each event is a Boolean flag that can be either true (set) or false (cleared) by submodules in the BMS firmware. There are two types of events that the BMS state machine uses:<ul> <li>Normal \u2013 Events of this type will be set when a condition is present and will automatically be cleared if the condition that is causing the event has corrected itself and the event is no longer present.</li> <li>Latching \u2013 Events of this type will be set by a condition and will remain set until the event has been explicitly cleared by the user or the BMS has been rebooted.  </li> </ul> </li> </ul> HEX Value Event Event Type Description <code>0x100</code> CALIBRATED This indicates that the BMS has been calibrated and issued a valid serial number <code>0x200</code> CONNECTED This indicates that the BMS is connected to a CAN bus network and is receiving messages on the configured CAN Switches ID <code>0x400</code> STANDALONE This indicates that the Standalone BMS Mode is enabled <code>0x800</code> SENSE ERROR This indicates that there is a low-level sense error with the communication to the cell monitoring nodes <code>0x1000</code> OVER VOLT This indicates that one or more cell voltages have exceeded the configured Cell Over Voltage Threshold <code>0x2000</code> UNDER VOLT This indicates that one or more cell voltages have exceeded the configured Cell Under Voltage Threshold <code>0x4000</code> OVER TEMP This indicates that one or more cell temperatures have exceeded the configured Over Temperature Threshold <code>0x8000</code> UNDER TEMP This indicates that one or more cell temperatures have configured Cell Under Temperature Threshold <code>0x10000</code> CRITICAL OVER CURRENT Latching This indicates that charge or discharge current has exceeded the configured Critical Over Current Threshold <code>0x20000</code> CRITICAL OVER VOLT Latching This indicates that one or more cell voltages have exceeded the configured Critical Cell Over Voltage Threshold <code>0x40000</code> CRITICAL UNDER VOLT Latching This indicates that one or more cell voltages have exceeded the configured Critical Cell Under Voltage Threshold <code>0x80000</code> BALANCING This indicates that one or more cells are currently balancing <code>0x100000</code> PACK PRECHARGE FAIL This indicates the difference (delta) between the Load Voltage and the Battery Voltage is not within the configured Precharge Voltage Delta <code>0x400000</code> PACK ENABLE This indicates that the BMS is receiving the command to enable the pack and move into a state which allows charge, discharge or both outputs. <code>0x800000</code> SoCINVALID This indicates that the current SoCestimation is invalid"},{"location":"Battery_Management_Systems/Prohelion_BMS_M48_Gen1/Software_Specifications.html#bms-state-transitions","title":"BMS State Transitions","text":"<p>The BMS state machine contains several state transitions. Each transition contains a current state, next state, a set of events and an event check type. The state transition will only proceed to the next state if the BMS state machine is in the current state and the event check has been satisfied. </p> <p>There are three Event Check Types which can be used to check the list of events for each transition:</p> <ul> <li>All \u2013 Logical AND \u2013 All events being set (true) will trigger the state transition.</li> <li>Any \u2013 Logical OR \u2013 Any event being set (true) will trigger the state transition.</li> <li>None \u2013 Logical NOT (OR) - All events being cleared (false) will trigger the state transition (No events can be set)</li> </ul> <p>The BMS CRITICAL SAFETY EVENTS is a group of events that are considered safety critical and should result in the BMS moving into an ERROR state from ANY state. This group which consists of the following events:</p> <ul> <li>CRITICAL OVER VOLT</li> <li>CRITICAL UNDER VOLT</li> <li>CRITICAL OVER CURRENT</li> <li>PACK PRECHARGE FAIL</li> </ul> <p>Below is the BMS state machine transition table:</p> ID Current State Next State Event Check Type Events <code>T0</code> ANY ERROR ANY BMS CRITICAL SAFETY EVENTS <code>T1</code> ERROR INIT NONE BMS CRITICAL SAFETY EVENTS <code>T2</code> INIT PRECHARGE ANY PACK ENABLESTANDALONE <code>T3</code> PRECHARGE ERROR ANY PACK PRECHARGE FAIL <code>T4</code> PRECHARGE CHARGE ENABLED PRE ALL UNDER VOLT <code>T5</code> PRECHARGE DISCHARGE ENABLED PRE ALL OVER VOLT <code>T6</code> PRECHARGE ALL ENABLED PRE NONE PACK PRECHARGE FAILUNDER VOLTOVER VOLT <code>T7</code> CHARGE ENABLED INIT NONE PACK ENABLESTANDALONE <code>T8</code> CHARGE ENABLED ALL ENABLED PRE NONE UNDER VOLTOVER VOLT <code>T9</code> DISCHARGE ENABLED INIT NONE PACK ENABLESTANDALONE <code>T10</code> DISCHARGE ENABLED ALL ENABLED NONE UNDER VOLTOVER VOLT <code>T11</code> CHARGE ENABLED PRE CHARGE ENABLED NONE BMS CRITICAL SAFETY EVENTS <code>T12</code> DISCHARGE ENABLED PRE DISCHARGE ENABLED BMS CRITICAL SAFETY EVENTS <code>T13</code> ALL ENABLED PRE ALL ENABLED BMS CRITICAL SAFETY EVENTS <code>T14</code> ALL ENABLED INIT PACK ENABLESTANDALONE <code>T15</code> ALL ENABLED CHARGE ENABLED UNDER VOLT <code>T16</code> ALL ENABLED DISCHARGE ENABLED OVER VOLT"},{"location":"Battery_Management_Systems/Prohelion_BMS_M48_Gen1/Software_Specifications.html#led-output","title":"LED Output","text":"<p>This section describes the behaviour of the LED output of the Front Panel Connector. </p> <p>Currently LED 1 and LED 2 of the Front Panel Connector are not in use.</p> <p>LED 3 of the Front Panel Connector will either remain solid (\u201cStays ON\u201d) or flash a specific number of times over a 5 second interval. The status of the BMS can be determined by counting the number times LED 1 flashes between each pause over the 5 second interval. The table below lists the meaning of each flash count.  </p> Flash Count Label Description <code>9</code> Sense error There is an active SENSE ERROR event. The BMS cannot communicate with the cell measurement nodes <code>8</code> Critical Over Volt There is a latched CRITICAL OVER VOLT event. The BMS has detected that the critical over voltage threshold has been exceeded <code>7</code> Critical Under Volt There is a latched CRITICAL UNDER VOLT event. The BMS has detected that the critical under voltage threshold has been exceeded <code>6</code> Critical Over Volt There is a latched CRITICAL OVER CURRENT event. The BMS has detected that the critical over current threshold has been exceeded <code>5</code> Over Temp There is an active OVER TEMP event. The BMS has detected that the over-temperature threshold has been exceeded <code>4</code> Under Temp There is an active UNDER TEMP event. The BMS has detected that the under-temperature threshold has been exceeded <code>3</code> Precharge Fail There is an active PRECHARGE FAIL event. The BMS has detected that the precharge voltage threshold has not been reached <code>2</code> Balancing There is an active BALANCING event. The BMS has detected that the balance voltage threshold has been exceeded. This indicates at least 1 cell is currently being balanced <code>1</code> Disabled The BMS is in either the INIT or ERROR state and the BMS outputs are all off. Meaning that the battery cannot charge or discharge. This is usually due to a communication timeout on the BMS Switches CAN ID or the BMS is not in STANDALONE mode."},{"location":"Battery_Management_Systems/Prohelion_BMS_M48_Gen1/Software_Specifications.html#configuration","title":"Configuration","text":"<p>The firmware of the Prohelion 48V BMS allows for the configuration of several values, thresholds, modes, and calibration values. This section documents each configuration parameter and the impacts of associated parameter on the system. </p> <p>The resolution (scale factor) is maximum precision in which the value can be stored as SI units. The resultant integer value is the actual threshold (in Volts, Amps, or \u2103) multiplied by the scale factor. For example, 3.600 Volts would equate to an integer value of 3600 being sent via CAN bus. This mathematical operation is automatically handled by Profinity. </p> ID Parameter Type Resolution (scale) Description <code>0x33</code> CAN - Bitrate Uint16 - The CAN bus bitrate selection value. This should be an integer value between 0 and 5: - 0: 50kbps - 1: 100kbps - 2: 125kbps  - 3: 250kbps  - 4: 500kbps  - 5: 1000kbps <code>0x34</code> CAN - Base ID Uint 16 - The base CAN ID for the BMS. This should be a value between 0 and 1,792. For example, a base CAN ID of 0x600 (in hex) would be 1,536 <code>0x35</code> CAN - Switches ID Uint16 - The CAN ID on which the BMS receives the Switches message. See communication section <code>0x3B</code> BMS - Modes Config Uint16 - A set of 16 bits used to toggle different features of the BMS. The result is a bitwise OR of each feature:  - 0x00: Not Enabled  - 0x01: Standalone  - 0x02: Opportunistic Balancing (Not Implemented yet)  - 0x04: Victron  Integration (when not using the parallel pack control unit)  For example, to enable both Standalone and Victron Integration set the value to 0x05 (0x01 + 0x04)  To disable all modes set the value to 0x00 <code>0x39</code> Cell - Under Voltage Threshold (V) Uint16 0.001 (1000) The cell voltage threshold at which the BMS triggers an UNDER VOLT event. <code>0x3F</code> Cell - Critical Under Voltage Threshold (V) Uint16 0.001 (1000) The cell voltage threshold at which the BMS triggers a CRITICAL UNDER VOLT event. <code>0x38</code> Cell - Over Voltage Threshold (V) Uint16 0.001 (1000) The cell voltage threshold at which the BMS triggers an OVER VOLT event. <code>0x40</code> Cell - Critical Over Voltage Threshold (V) Uint16 0.001 (1000) The cell voltage threshold at which the BMS triggers a CRITICAL OVER VOLT event. <code>0x3A</code> Cell - Balancing Threshold (V) Uint16 0.001(1000) The cell voltage threshold at which the BMS enables balancing if the minimum and maximum cell voltages are more than 5mV apart. Only cell which are 5mV higher than the minimum cell voltage will be balanced. <code>0x3D</code> Temp - Over Temperature Threshold (\u00b0C) Int16 0.1(10) The temperature threshold at which the BMS triggers an UNDER TEMP event. <code>0x3E</code> Temp - Under Temperature Threshold (\u00b0C) Int16 0.1(10) The temperature threshold at which the BMS triggers an OVER TEMP event. This threshold only applies while charging. When discharging, the threshold is 0\u00b0C <code>0x42</code> Pack - Precharge Voltage Delta (V) Uint16 0.001 (1000) The pack voltage threshold at which the BMS triggers a PACK PRECHARGE FAIL event. <code>0x43</code> Pack - Precharge Timeout (S) Uint16 0.1(10) The time which the BMS state machine waits in the PRECHARGE state before moving to ERROR. <code>0x41</code> Pack - Over Current Threshold (A) Uint16 0.01 (100) The pack current threshold at which the BMS triggers a CRITICAL OVER CURRENT event. This is triggered by positive and negative current. <code>0x4D</code> Pack - Capacity (Ah) Uint16 0.01 (100) The capacity of the pack which is used to estimate the State of Charge. <code>0x4E</code> Pack - SoC(%) Uint16 0.01 (100) The SoCof the pack. This can be manually configured by the end user to a value if desired to override the current SoCestimation. <code>0x44</code> Calibration - Current Offset Int16 - The zero-axis offset calibration value for the current measurement. This value can be adjusted so that the reported current is zero when the BMS is disengaged. This should typically be a value of less than 50. <code>0x45</code> Calibration - Current Scale Uint16 - The scale calibration value for the current measurement. This value can be adjusted so that the reported current matches a measured current. This should typically be a value of around 10,000. <code>0x47</code> Calibration - Voltage Scale Uint16 - The scale calibration value for the load voltage measurement. This value can be adjusted so that the reported load voltage matches a measured voltage. This should typically be a value of around 10,000. <code>0x48</code> Node - count Uint16 - The number of cell measurement nodes being used by the BMS. For 48V BMS (16S), this should always be 2. <code>0x36</code> Node - Parallel Count Uint16 - The number of cell measurement nodes in parallel. For 48V BMS (16S), this should always be 1. <code>0x49</code> Node0 - Cell Count Uint16 - The number cells in use on the first cell measurement node. For 48V BMS (16S), this should always be 8. The minimum is 4. <code>0x4A</code> Node0 - Temp Count Uint16 - The number temperature inputs in use on the first cell measurement node. The maximum is 8 and the minimum is 0. <code>0x4B</code> Node1 - Cell Count Uint16 - The number cells in use on the second cell measurement node. For 48V BMS (22S), this should always be 11. The minimum is 4 <code>0x4C</code> Node1 - Temp Count Uint16 - The number temperature inputs in use on the first cell measurement node. The maximum is 4 and the minimum is 0."},{"location":"Battery_Management_Systems/Prohelion_BMS_M48_Gen1/Software_Specifications.html#bms-modes","title":"BMS Modes:","text":"<p>This section explains the different features that can be enabled using the BMS Modes configuration parameter. </p> <p>Standalone Mode: Standalone mode simply enables the BMS to transition from INIT state into PRECHARGE state automatically upon start-up. See T2 of the BMS transition table. </p> <p>NOTE: When using a Prohelion Parallel Pack Controller device, this mode should be disabled.</p> <p>Opportunistic Balancing Mode: This feature has been temporarily disabled in favour of a more simplistic threshold based balancing algorithm. </p> <p>Victron Integration Mode: Victron Integration mode enables the CAN bus communication required for the BMS to integrate with Victron inverters using the DVCC protocol. This requires the use of a Victron Cerbo GX to connect the BMS and the Victron inverter. </p> <p>NOTE: When using a Prohelion Parallel Pack Controller device, this mode should be disabled. </p>"},{"location":"Motor_Controllers/index.html","title":"WaveSculptor 22","text":"<ul> <li> <p> WaveSculptor22 User Manual</p> <p>User Manual for the Prohelion WaveSculptor22</p> <p> Getting started</p> </li> <li> <p> WaveSculptor22 Datasheet</p> <p>Datasheet for the Prohelion WaveSculptor22</p> <p> Datasheet</p> </li> <li> <p> WaveSculptor22 Mechanical Drawing</p> <p>Mechanical Drawing for the Prohelion WaveSculptor22</p> <p> Drawing</p> </li> <li> <p> WaveSculptor22 STEP file</p> <p>CAD drawing for the Prohelion WaveSculptor22</p> <p> STEP </p> </li> </ul> <p></p>"},{"location":"Motor_Controllers/index.html#wavesculptor-200","title":"WaveSculptor 200","text":"<ul> <li> <p> WaveSculptor200 User Manual</p> <p>User Manual for the Prohelion WaveSculptor200</p> <p> Getting started</p> </li> <li> <p> WaveSculptor200 Datasheet</p> <p>Datasheet for the Prohelion WaveSculptor200</p> <p> Datasheet</p> </li> </ul> <p></p>"},{"location":"Motor_Controllers/index.html#motor-interfaces-and-inductor-coils","title":"Motor Interfaces and Inductor Coils","text":"<ul> <li> <p> Motor Sense Interface Hardware</p> <p>Adapters for different types of motors</p> <p> Reference</p> </li> <li> <p> Motor Sense Comms Spec</p> <p>Communications Spec for the Motor Sense Modules</p> <p> Reference</p> </li> <li> <p> Inductor Coil Construction Guide</p> <p>Instructions on how to build quality Inductor Coils suitable for a WaveSculptor</p> <p> Construction Guide</p> </li> </ul> <p></p>"},{"location":"Motor_Controllers/index.html#supporting-software","title":"Supporting Software","text":"<ul> <li> <p> WaveSculptor Config Software</p> <p>User Manual for the software application to configuring and manage the Prohelion WaveSculptor22</p> <p> Config Software</p> </li> <li> <p> Profinity</p> <p>Our WaveSculptor22 and CAN Bus management software solution</p> <p> Management Software</p> </li> </ul>"},{"location":"Motor_Controllers/Config_Software/index.html","title":"WaveSculptor Config Software User Manual","text":"<p>The WaveSculptor configuration software is provided to allow WaveSculptor owners to configure and test their motor controller.</p> <p>The WaveSculptor Config Tool is now bundled as part of Profinity</p> <p>To use tool, download Profinity, configure a WaveSculptor and right mouse click on the configured item in the Profile to launch this tool. </p>"},{"location":"Motor_Controllers/Config_Software/Configuration.html","title":"Configuration","text":"<p>The configuration screen shown in Figure 3 provides four main functions: Load and save to PC or WaveSculptor. The load and save functions are under the File menu, provide a means of storing the configuration file on the PC for backup purposes. You should backup your configuration files just as you would any other file. If the configuration file on the WaveSculptor is somehow corrupted you will be able to restore to a known good version with a backup. If using the latest release of the software and firmware, configuration files are  interchangeable between WaveSculptors, BUT the existing configuration must be first downloaded in order to integrate the configuration constants with the file.</p> <p>The transfer functions move the information from all configuration tabs to and from the WaveSculptor. The upload and download progress is reflected in a separate popup-window as mentioned in the Observation section.</p> <p>The configuration screen consists of three tabs. The first contains general controller information that the user is free to adjust, the second contains calibration data set in the factory and the third tab contains motor information, also adjustable by the user.</p>"},{"location":"Motor_Controllers/Config_Software/Configuration.html#general-configuration","title":"General Configuration","text":"<p>Figure 3 shows the general controller information tab. </p> <p></p> WaveSculptor General Configuration Tab <p>Table 4 gives a description of the different configuration values and the impact they have on the WaveSculptor operation.</p> Value Description <code>Sine Current Limit (Arms)</code> Represents the 100% motor current setpoint. In sine mode all three phases are switching and the current target on every phase will be a percentage of this current. <code>SixStep Current Limit (A)</code> Represents the 100% motor current setpoint while in six step mode. In sixstep mode only a pair of phases is switching at any one time and the current target through these two phases will be a percentage of this current. <code>Speed Limit (RPM)</code> The maximum motor speed setpoint <code>Idc Limit (A)</code> Represents the 100% bus current setpoint. <code>Phase C Limit (Heatsink Limit) (\u00b0C)</code> The motor current will be reduced if the heatsink temperature nears this setpoint. <code>Max bus voltage (V)</code> The controller will attempt to limit regeneration current if this setpoint is exceeded.  Below this voltage, full current will be available. <code>Min bus voltage (V)</code> The controller will attempt to limit drive current if the bus voltage falls below this setpoint.  Above this voltage, full current will be available. <code>Hard current limit (A)</code> The setpoint for the hardware based current comparators. This is not adjustable and may not read correctly for a second or two after reset. <code>Serial Number</code> Uniquely identifies the controller. Set during manufacture. Should match the serial number on the case. <code>Firmware Version</code> Version of firmware running on the DSP in the controller. The number is parenthesis is the firmware build number. <code>Hardware Version</code> Version of control board in the WaveSculptor. <code>Base Address</code> The CAN identifier that the WaveSculptor will send all its CAN packets relative to. The edit box will force the address to a multiple of 32. <code>Driver Controls Base Address</code> The CAN identifier that the WaveSculptor will expect to receive driver controls CAN packet relative to. The edit box will force the address to a multiple of 32. <code>Listen for BMS master packets</code> Tick to listen to maximum and minimum cell voltages from a Prohelion BMS master. Not available at present. <code>BMS master address</code> The CAN identifier that the WaveSculptor will expect to receive BMS CAN packet relative to. The edit box will force the address to a multiple of 32. <code>CAN baud rate</code> The CAN baud rate the WaveSculptor will use. <code>Vehicle Mass</code> The total mass of the vehicle. Directly affects the velocity control loop. Vehicle mass is used to calculate the P and I terms in the velocity loop. Drop this mass to 30 \u2013 50kg for testing a motor by itself on the bench. <code>Send Measurement Flags</code> Enables/Disables the periodic broadcast of the associated measurements. Each flag will affect two measurements, as each measurement CAN packet contains two measurements. <p>Table 4: Description of values of the general configuration screen </p>"},{"location":"Motor_Controllers/Config_Software/Configuration.html#calibration-configuration","title":"Calibration Configuration","text":"<p>This dialog tab is read-only in the release version of the software. It contains all the scale, offset and thermistor data for all the WaveSculptor sensors. There should be no need for the end user to access variables in this dialog box. </p> <p></p> WaveSculptor Calibration Configuration Tab"},{"location":"Motor_Controllers/Config_Software/Configuration.html#motor-configuration","title":"Motor Configuration","text":"<p>Configuration values for up to 10 different motors can be configured on this tab, shown in Figure 4. This allows complete testing and setup for all motors that you expect to use in the vehicle, while still in the workshop.</p> <p></p> WaveSculptor Motor Configuration Tab <p>A description of each motor configuration value along with its effect on the system, is given in Table 4:</p> Value Description <code>Active Motor</code> The index to the motor config tab that the WaveSculptor will use by default (in the absence of a valid ActiveMotor CAN packet being received). THE SELECTED MOTOR CONFIG TAB HAS NO BEARING ON THE ACTIVE MOTOR IN THE WaveSculptor. <code>Tyre Diameter (m)</code> Outside diameter of the drive tyre. Used for speed calculation. If motor is geared, scale this value by the gear ratio. <code>Description</code> Free text description of the motor. <code>Nr of PolePairs</code> The number of magnet north-south pairs on the rotor of the motor <code>Motor Cut-out Temperature (\u00b0C)</code><code>Motor Ramp Temperature (\u00b0C)</code> The controller will linearly reduce its current limit from the configured limit at 'Motor Ramp Temperature' to 0A at 'Motor Cut-out Temperature'. <code>Engage Motor Freq (Hz)</code> The motor must reach this frequency (in revolutions per second) before the feedback from the sensorless position  algorithm is used instead of the hall position feedback. <code>Disengage Freq (Hz)</code> Below this motor frequency (in revolutions per second) the feedback from the sensorless position algorithm is ignored and the position feedback from the hall sensors is used. <code>Ignore halls which sensorless engaged</code> If this box is ticked, the controller will ignore any error between the position feedback of the sensorless algorithm and the motor hall effect sensors. If not ticked the controller will revert to using feedback from the hall effect sensors in the case of a large discrepancy between the two position feedback systems.  In most situations, ticking this box will be advantageous, as the position estimation routines used by the motor controller are more accurate than the output of most motor hall position sensors. <code>Motor temperature scale</code><code>Motor temperature offset</code> Applied directly to the raw ADC reading:tempVolt = scale*(rawTempVolt + offset) <code>R</code><sub><code>0</code></sub><code>\u03b2</code> Required if using a thermistor type motor temperature sensor. The thermistor datasheet should specify R<sub>0</sub> and \u03b2. Where R<sub>0</sub> is the thermistor resistance at T<sub>0</sub>=25<sup>0</sup>C <code>Line Resistance (mR)</code> Motor line to neutral resistance as calculated by ParamExtract. <code>Line Inductance (uH)</code> Motor line to neutral inductance as calculated by ParamExtract. <code>Speed Constant</code> The RMS voltage induced across the motor phase winding at 1 radian per second. Measured phase relative to neutral. <code>Phase Sequence</code> Ticked if phase C leads phase B while the motor is rolling forward. Used in the control system. Set by PhasorSense and is read-only in the release version of the interface software. <code>Hall Transition Table</code> The first six entries represent actual transitions, the last two entries are the unused hall combinations. The transition angle is in degrees and the hall transition is in [last hall] =&gt; [new hall] format. Set by PhasorSense. <code>Motor Type</code> Three different types of motor are selectable: BLDC, Induction or IPM. The settings below this drop down box have different meaning for different motor types. BLDC Motor Type (PM motor with no overspeed [constant power regain] capability) <code>Rotor R (mR)</code> Not used <code>Rotor L (uH)</code> Not used Induction motor type <code>Rotor R (mR)</code> Rotor resistance calculated by ImExtract <code>Rotor L (uH)</code> Rotor resistance calculated by ImExtract <code>Min Id (Apk)</code> - Value Description <code>Max Id (Apk)</code> The control system will keep the flux producing current (Id) between Min Id and Max Id at all times. Max Id is a motor parameter and should be set as high as possible without saturating the iron in the motor. Min Id controls the amount of over speed, the smaller the Min Id the more over speed. Typical defaults will be around 20A and 5A. IPM (Interior Permanent Magnet) motor type <code>Rotor R (mR)</code> Not used <code>Rotor L (uH)</code> Lq inductance of the IPM motor, whereas the Line inductance is the Ld inductance of the IPM motor. <code>IdO (A)</code> TBD <code>Id m (A/Atot)</code> TBD <p>Table 5: Description of values on the motor configuration screen</p>"},{"location":"Motor_Controllers/Config_Software/Configuration_Tools.html","title":"Configuration Tools","text":"<p>The wsConfig program has three configuration tools that are very important to setting up the WaveSculptor motor controller to drive your motor. These tools are PhasorSense, ParamExtract and ImExtract.</p> <p>The next three section describe how to use these three tools.</p>"},{"location":"Motor_Controllers/Config_Software/Configuration_Tools.html#phasorsense","title":"PhasorSense","text":"<p>PhasorSense is designed to find phase and hall sequence, along with the relation between them. Plots of both the three phase voltages and the motor hall effect position logic are displayed. This should assist finding any errors with motor/controller set up.</p> <p></p> Figure 6: PhasorSense Acquisition Screen <p>To start a PhasorSense Acquisition press the Phase Acquire button in the bottom right corner of the window. You then have 10 seconds to spin the motor with an electrical motor frequency of more than 12Hz. Even on a fairly low pole count motor of 4 pole pairs this is only 180RPM, which is achievable by hand. The high-voltage DC bus does not have to be connected for this test.  The WaveSculptor uses hall edges to decide if the speed is sufficient, so if the halls are not connected to the controller a \"Failed to obtain sufficient speed\" message will be given.</p> <p>If the acquisition is successful, results similar to the ones shown in Figure 6 should be displayed and you will be presented with a message box asking if you want to save the PhasorSense results. If you a happy with the results of the acquisition save the results to your chosen motor slot, otherwise cancel the save, fix the test rig and try again.</p> <p>NOTE: When an Encoder or Resolver motor interface board is connected the hall input should appear as a single \u201csaw-tooth\u201d pattern ranging from 0 to 1 inclusive (If full 0 to 1 range isn't being seen, then verify that the Encoder count in the active motor configuration is correct).</p>"},{"location":"Motor_Controllers/Config_Software/Configuration_Tools.html#paramextract","title":"Paramextract","text":"<p>ParamExtract is designed to find the motor stator resistance and inductance.</p> <p></p> Figure 7: ParamExtract Acquisition Screen <p>This acquisition process requires the bus voltage and motor to be connected to the WaveSculptor. For best results the bus voltage should be no larger than needed to overcome the line resistance (a 60V bus voltage is usually plenty). The higher the PWM required to source 20A out of phase CB of the WaveSculptor the more accurate the calculation of line resistance and inductance.</p> <p>The motor may rotate briefly during this test, as such KEEP AWAY FROM THE MOTOR while running this test. It should also be disconnected from the drive wheel of the car, or the wheel should be raised up from the ground before performing this test.</p> <p>The ExtractParams button starts the acquisition process.</p> <p>The algorithm linearly ramps the current in phase CB from 0A to 20A then switches off, noting the slope of the ramp and time constant of the decay. This process should take no more than a few seconds, after which the results will be presented on screen as shown in Figure 7.</p> <p>A message box will appear asking if you wish to save the results.</p> <p>NOTE: If the motor moved during the test, do not save the results. Repeatedly run the test until there is no noticeable movement during the test. This is because motor movement creates a voltage, which influences the reading.  If the acquisition was good, the blue dashed best-fit curve should lie neatly on top of the acquired curve. Once a good fit is achieved without motor movement, allow the software to save the results to the motor slot you are configuring.</p>"},{"location":"Motor_Controllers/Config_Software/Configuration_Tools.html#imextract","title":"Imextract","text":"<p>ImExtract is designed to find the rotor resistance and inductance in induction motors.</p> <p></p> Figure 8: ImExtract Acquisition Screen <p>This acquisition process requires the bus voltage and motor to be connected to the WaveSculptor (a 60V bus voltage is usually plenty).</p> <p>An induction motor should not move during this test, however, it is still recommended to KEEP AWAY FROM THE MOTOR while running this test.</p> <p>The Extract button starts the acquisition process, which can last for 30 seconds. The results will be presented on the screen as shown in Figure 8. The blue best-fit curve should lie neatly on top of the acquired red curve. If the two curves are well matched, save the acquired rotor constants to the configuration file. If the test failed or the two curves are poorly matched, check the test rig and try again.</p>"},{"location":"Motor_Controllers/Config_Software/Control.html","title":"Control","text":"<p>The purpose of the control dialog box is to provide a basic driver controls interface, allowing the system to be tested. It is not meant to be used to actually drive a vehicle on the road. Figure 2 shows a screen shot of the interface.</p> <p></p> Control Interface <p>In order to control the motor, three setpoint sliders are provided with text boxes to the right of the sliders displaying the selected setpoint. Fine movement of these sliders can be achieved using the keyboard as shown in Table 3.</p> <p>The Motor Current slider of Figure 2 controls the motor current setpoint, and ranges from 0 to 100% of the maximum current setpoint in the configuration file. Fine control of the motor current setpoint is available using the U, D and Zero buttons to the far right.</p> <p>The Velocity slider of Figure 2 controls the vehicle velocity setpoint. The setpoint is in RPM and is displayed in the text box to right of the slider. If this slider is pulled below the actual vehicle speed the controller will regenerate in an attempt to slow the vehicle. If the slider is pulled above the actual vehicle speed the controller will drive with more current in an attempt to increase vehicle speed. The rate at which the vehicle will slow or speed up will be limited by the motor current or other setpoints. DO NOT REGEN, if you are using a power supply to feed the WaveSculptor bus, this may damage the supply.  Avoid regen by always setting the motor current to zero before changing the velocity.</p> <p>The Bus Current slider of Figure 2 controls the DC bus current setpoint, and ranges from 0 to 100% of the maximum current setpoint in the configuration file.</p> <p>The keyboard can also be used to move the sliders, with the key mapping in the table below:</p> Key Functional Description <code>Up Arrow</code> Increases motor current setpoint by 0.1% <code>Down Arrow</code> Decreases motor current setpoint by 0.1% <code>Space Bar</code> Zeros motor current setpoint <code>Right Arrow</code> Increase vehicle velocity setpoint by 0.1% <code>Left Arrow</code> Decrease vehicle velocity setpoint by 0.1% <code>Enter</code> Zeros the vehicle velocity setpoint (will regen at the current setpoint) <code>a</code> Increase bus current setpoint by 0.1% <code>z</code> Decrease bus current setpoint by 0.1% <p>Table 3: Controls screen keyboard interface</p>"},{"location":"Motor_Controllers/Config_Software/Datalogging.html","title":"Datalogging","text":"<p>A system for logging data is provided under Log on the main menu. It has three options Start, Stop and Update. The Start command will start a new file name \u201c[date] [time]\u201d in the current operating directory. Pressing this button while a file is already open will close the open file and start a new log file. Clicking Stop will close the file and stop logging. The Update sub-menu allows three different logging speeds, 200ms, 1s and 10s. The update rate can be changed at any time.</p> <p>The format of the log file is a comma delimited text file with one header row and six decimal points of accuracy on each measurement. All of the telemetry data received and drive commands sent are logged in the file. Refer to the Users Manual for information on decoding the limiter and error bit fields (displayed in Hex)</p> <p>More Advanced Data Logging Is Available In Profinity</p> <p>If you require more advanced data logging then Profinity Logging is the solution to use.</p>"},{"location":"Motor_Controllers/Config_Software/Observation.html","title":"Observation","text":"<p>This main screen shown in Figure 1, displays the status of WaveSculptor along with all available measurements.  Communications between the configuration software and WaveSculptor is achieved via the Prohelion CAN-Ethernet bridge</p> <p></p> Main Screen <p>A Prohelion CAN-Ethernet bridge must be present on the same CAN bus as the WaveSculptor and on the same LAN as the PC running the configuration software. Before using the configuration software, you must first configure the CAN-Ethernet bridge as described in the CAN-Ethernet Bridge User's Manual.</p> <p>Once the CAN-Ethernet Bridge is configured and the WaveSculptor CAN bus is powered up, all WaveSculptors present on the CAN bus will be listed. The list shows each devices CAN base ID, the type of WaveSculptor and the serial number. If there is more than one WaveSculptor present, select the one you wish to utilise.</p> <p>No configuration information stored in the WaveSculptor is downloaded to the PC when it becomes selected in the list box allowing for simple and immediate telemetry monitoring functionality. The required configuration segments are downloaded on demand the first time when one of the tools in the menu are selected. The configuration download and upload progress is displayed in a separate pop-up window which also allows for the current transfer to be cancelled.</p> <p>A CAN BUS traffic monitor is situated at the bottom of the screen which indicates the total traffic loading on the selected bridged network</p>"},{"location":"Motor_Controllers/Config_Software/Observation.html#errors","title":"Errors","text":"<p>Controller errors are presented in the text box labelled Errors. Different types of errors can occur. These errors usually would only occur one at a time, however it is possible to have multiple errors displayed at once.</p> <p>NOTE: Devices that identify as V3 for their hardware version have an extended set of error flags. The possible error messages are listed below:</p> <ul> <li> <p>HWOC: Hardware Over current; A hardware comparator is used to generate this signal and if the current exceeds the hardware over current trip point for even an instant this error will occur. The hardware comparators monitor currents in both phase C and phase B.</p> </li> <li> <p>SWOC: Software Overcurrent; This error occurs if the firmware on the controller samples a DC bus, phase C or phase B current that is above the limit set in the calibration section of the configuration file.</p> </li> <li> <p>HWOV: Hardware Over Voltage; A hardware comparator is used to generate this signal and if the bus voltage exceeds the hardware trip point for even an instant this error will occur.</p> </li> <li> <p>SWOV: Software Over Voltage; This occurs if the bus voltage exceeds the over voltage limit set in the calibration section of the configuration file. This is to protect the semiconductors against over voltage during regeneration.</p> </li> <li> <p>HALL: Hall Sequence Error; This occurs if a hall transition is invalid. The hall sequence is recorded during the PhasorSense routine and this same sequence must be followed by the motor hall effect sensors at all times.</p> </li> <li> <p>WD: Watch Dog; This is a warning message more than an error, as the controller will still function with this error. An independent hardware watchdog needs to be updated at least 4 times per second by the firmware in the controller. If it is not updated the controller will reset (something that the driver of the vehicle would feel as a short loss of power). This error will stay set until the controller is next reset or power cycled.</p> </li> <li> <p>CFG: Configuration File Error; An error occurred while reading the configuration file, and will be flagged during the boot-up sequence of the WaveSculptor. If all or some of the configuration values cannot be read from the configuration file, default values will be used instead of the stored values. This error does not disable the controller, it will continue to operate in the best manner possible using the default configuration values. This does mean that the controller may not operate as expected. Unless the error is with one of the more critical configuration constants it may be difficult to even notice the difference in operation.</p> </li> <li> <p>UV15V: Under Voltage15V; The internal 15V rail has dropped below 12V.</p> </li> <li> <p>DESAT: Desaturation; On a WaveSculptor200 this could indicate an overcurrent desaturation of the IGBT switches or an under voltage of the IGBT driver IC. On a WaveSculptor22 this means an under voltage of the MOSFET driver IC.</p> </li> <li> <p>MOT: Motor interface board missing; The WaveSculptor has not received any communication from the motor interface board within the last second.</p> </li> <li> <p>OVSPD: The motor speed has exceeded the configured maximum by 15%. This error will automatically clear once the motor speed reduces to 95% of maximum.</p> </li> <li> <p>OCpX: (V3 Only) Hardware Over current; This is the same as HWOC, except that it specifically identifies the phase that detected the fault. \u2018X\u2019 can either be B or C, for Phase B or Phase C respectively.</p> </li> <li> <p>GhX / GlX: (V3 Only) Desaturation; This is the same as DESAT, except that it specifically identifies the phase that detected the fault and whether it was the high (\u2018h\u2019) or low (\u2018l\u2019) side gate. \u2018X\u2019 can either be A, B or C, for Phase A, Phase B or Phase C respectively.</p> </li> </ul>"},{"location":"Motor_Controllers/Config_Software/Observation.html#limiting-setpoint","title":"Limiting Setpoint","text":"<p>The WaveSculptor runs six concurrent control loops, with the primary control loop regulating the motor current. There are also control loops regulating the velocity, bus current, maximum and minimum bus voltage and heatsink temperature. At any one time only one of these control loops is limiting the motor vehicles torque. The possible limiting setpoints are listed below:</p> <ul> <li> <p>PWM: Not enough bus voltage to be able to produce more current and hence more torque.</p> </li> <li> <p>Iq: The motor current setpoint is being regulated in the motor. (Normal operation).</p> </li> <li> <p>vel: The vehicle velocity setpoint has been reached. (Normal operation)</p> </li> <li> <p>Idc: The bus current setpoint is limiting further increase in motor torque.</p> </li> <li> <p>VdcMax: Motor regeneration torque is limited by the maximum bus voltage setpoint.</p> </li> <li> <p>VdcMin: Motor drive torque is limited by the minimum bus voltage setpoint.</p> </li> <li> <p>temp: The maximum heatsink setpoint has been reached and is limiting the motor torque.</p> </li> </ul>"},{"location":"Motor_Controllers/Config_Software/Observation.html#measurements","title":"Measurements","text":"<p>All measurements are broadcast from the WaveSculptor at periodic intervals, unless disabled in the configuration file.  For more details, please refer to the CAN bus comms Appendix in the WaveSculptor User's Manual.</p> Measurement Description Rate (Hz) <code>Bus Voltage</code> The input bus voltage of the controller 5 <code>Bus Current</code> The input current to the controller 5 <code>Controller Power</code> Bus Voltage * Bus Current, calculated on the PC 5 <code>Motor RPM</code> Angular velocity of the motor in RPM 5 <code>Vehicle Velocity</code> Vehicle Velocity in km/h 5 <code>Phase C Current&lt;br&gt;Phase B Current</code> Phase B and C motor current in A<sub>rms</sub>. Relies on a RMS filter to smooth the motor frequency, so value may not represent true cycle RMS at very slow motor frequencies. 5 <code>BEMF (D)</code> Component of the BEMF aligned with the motor flux. By definition this value is always zero. N/A <code>BEMF (Q)</code> The motor back EMF. Represents the peak voltage 5 <code>Vout (D)</code> Component of the controller output voltage aligned with the motor flux. 5 <code>Vout (Q)</code> Component of the controller output voltage aligned with the motor BEMF and resistive voltage drop 5 <code>lout (D)</code> Aligned with the motor flux, current in this component will weaken or strengthen the motor flux. 5 <code>lout (Q)</code> This component of current produces motor torque and does actual work. 5 <code>Slip Speed</code> The difference in speed between the rotor and the stator flux, only valid when driving induction motors 5 <code>15V Rail</code> The voltage of the internal 15V rail, used to power the low voltage sections of the WaveSculptor.  Note that this is NOT the value of the 12V CAN bus supply input. 1 <code>1.9V Rail</code> The voltage of the 1.9V rail, used to power the core of the DSP. 1 <code>3.3V Rail</code> The voltage of the 3.3 rail, used to power all the control circuitry 1 <code>Motor Temp</code> The temperature of the connected motor in degrees Celsius 1 <code>Phase C Temperature</code> Heatsink temperature under the phase C semiconductors. 1 <code>Phase B Temperature</code> Heatsink temperature under the phase B semiconductors. WS200 ONLY. 1 <code>DSP Temperature</code> The temperature on the surface of the DSP control board within the controller. 1 <code>Phase A Temperature</code> Heatsink temperature under the phase A semiconductors. WS200 ONLY. 1 <code>Odometer</code> The distance travelled (in km) since reset. 1 <code>Bus integrator</code> The charge drawn from the bus in Amp.Hours since reset. 1 <p>Table 1: WaveSculptor Measurements</p> <p>Please note that a mouse click on any of the measurement text boxes of Figure 1 will request the measurement from the DSP (using a CAN remote request). Hence, the measurements can still be read even if its periodic send flags are disabled in the configuration file.</p>"},{"location":"Motor_Controllers/Config_Software/Observation.html#traffic-monitor","title":"Traffic Monitor","text":"<p>The CAN BUS traffic monitor situated at the bottom of the main screen is a useful indicator of the total traffic loading that is occurring on the selected bridge network. The traffic should be kept as low as possible in order to ensure smooth operation and communication between devices, especially when transferring configuration files or flashing devices. The colour indicator to the side of the load percentage changes relative to the level of loading giving a good quick indication of the network health.</p> Colour Description <code>Black</code> Not connected to a network or traffic is very low with respect to the sample rate of the monitor <code>Green</code> Connected to a network and within recommended traffic loading of up to 30% bus utilisation <code>Yellow</code> Greater than 30% bus utilisation (Not recommended normal operating levels) <code>Red</code> Greater than 60% bus utilisation (Bus is heavily loaded and there is a risk of packets failing to be sent or received) <p>Table 2: CAN BUS traffic monitor status colours</p>"},{"location":"Motor_Controllers/Config_Software/Set_Up_a_Motor.html","title":"Set Up a Motor","text":"<p>The following is list of instructions for setting up a generic motor:</p> Step Action 1. Set the tyre diameter to match your vehicle. 2. Chose a motor slot (tab) to configure. 3. Change the active motor to match the motor slot (tab) you are configuring. 4. Give the motor a meaningful text description 5. Enter the number of pole pairs 6. Adjust Motor ramp and cut-out temperature for your motor 7. Leave the engage and disengage frequency alone 8. Set the ignore hall box 9. If using an encoder set the encoder count correctly (When using a resolver ensure the encoder count is at the default value of \u201c1024\u201d) 10. If you wish to use a motor temperature sensor, configure these constants. Otherwise, make sure to connect a dummy resistor in place of the required thermistor or PT100 11. Upload to WaveSculptor 12. Download from the WaveSculptor to confirm the upload 13. Run paramExtract 14. Select motor type 15. Follow the instructions in the appropriate section (15-16) for your motor 16. Upload to WaveSculptor 17. Download from the WaveSculptor to confirm the upload 18. Save the configuration file locally as a backup"},{"location":"Motor_Controllers/Config_Software/Set_Up_a_Motor.html#bldc-motor","title":"BLDC Motor","text":"<p>The following is a list of instructions particular to setting up a BLDC motor:</p> Step Action 1. Run phasorsense"},{"location":"Motor_Controllers/Config_Software/Set_Up_a_Motor.html#ipm-motor","title":"IPM Motor","text":"<p>The following is a list of instructions particular to setting up an IPM motor:</p> Step Action 1. Run phasorsense 2. Upload configuration 3. Set Rotor L to the Lq inductance of the motor. Lq is expected to be 2 \u2013 4 times the value of Ld (the Line Inductance calculated by ParamExtract). <ul> <li> <p>If you can stiffly lock the rotor then ParamExtract can be used to find this inductance. After running ParamExtract and saving the calculated inductance as the Line Inductance, move the rotor 360 / (4 * nrPolePairs) degrees in either direction. In an IPM motor this will align phase CB with its highest inductance position. Run ParamExtract again, this will be the Lq inductance. Note this inductance, do not save it. Go back to the motor configuration screen and enter this inductance in the Rotor L field.</p> </li> <li> <p>If you can't lock the rotor, set Rotor L to 2.35 * Line Inductance. Try driving the motor &amp; assess the torque output for a given current limit \u2192 adjust the Rotor L field \u2192 try driving the motor &amp; assess the torque output for a given current limit \u2192 repeat until you find best performing Rotor L value.</p> </li> </ul>"},{"location":"Motor_Controllers/Config_Software/Set_Up_a_Motor.html#induction-motor","title":"Induction Motor","text":"<p>The following is a list of instructions particular to setting up an induction motor:</p> Step Action 1. Run ImExtract 2. Check that the rotor R is correct \u2013 should be between 10 and 300 mR 3. Check that rotor L is correct \u2013 should be between 5000 and 20000 uH 4. Set Min Id \u2013 default to 5A 5. Set Max Id \u2013 start at 20A. Try driving the motor &amp; assess the torque output for a given current limit \u2192 adjust the Max Id field \u2192 try driving the motor &amp; assess the torque output for a given current limit \u2192 repeat until you find best performing Max Id value.  This process is best performed on a motor dynomometer."},{"location":"Motor_Controllers/Inductor_Coil_Construction_Guide/index.html","title":"50\u00b5H Solarcar Inductors Construction Guide","text":"<p>This document describes how to build a set of 50\u00b5H 100A<sub>rms</sub> (peak) inductors suitable for use with a Prohelion WaveSculptor motor controller and a CSIRO/Marands motor.</p> <p>The inductors are constructed on a toroid (doughnut) shaped magnetic core, winding wire through the core in several layers.  The inductance is set by the magnetic permeability of the core, and the number of turns wound on it. The wire size itself is set by how much can physically be fit through the centre of the toroid, more is better.  Litz wire (having individually insulated wire strands) is required, to avoid eddy current losses that would occur with normal wire.  </p> <p>The complete inductor is coated in transformer varnish to lock everything together and prevent abrasion caused by vibration.  </p> <p>Note that no mechanical support is provided for the inductor or connections with the procedure as outlined in this document.  You may wish to explore options such as moulding thermally conductive epoxy around the inductors and the connections to provide some means of restraint.  </p>"},{"location":"Motor_Controllers/Inductor_Coil_Construction_Guide/Construction_Procedure.html","title":"Construction Procedure","text":"<ol> <li> <p>Cut three 5m lengths of litz wire to wind in parallel.  If a different type of litz wire from that specified is being used, then more or less bundles in parallel may be required.  Some experimentation may be necessary to work out how much wire can be physically wound through the toroid.  36 turns in total are necessary to achieve the specified inductance. (see below)</p> </li> <li> <p>Hold the three bundles together in a flat group, three bundles wide. Leave a 20cm tail of wire to start, and wind 19 turns onto the toroid.  This should fill up one layer of wire, with no overlaps.  There is no need to twist the bundles together but pay attention to keeping the tension of the wires reasonably constant, so that each bundle remains the same length as the others. (see below) </p> </li> <li> <p>Wrap the winding so far with Kapton or Polyester tape, to hold the wire in place.  Pay attention around where the tail exits the bundle, as this is the most likely place for vibration and abrasion to occur, and also where the highest voltage difference will be across the inductor.  Before placing all the tape, consider using a marker pen to draw an arrow on top of the tape to indicate which direction the windings were wound. (see below)</p> </li> <li> <p>Wind another 17 turns in a second layer, continuing to wind in the same direction as the first layer.  It is important to have 36 turns in total when finished, and all turns in the same direction.  Leave another 20cm tail where the winding exits the inductor.</p> </li> <li> <p>Wrap the complete winding in another layer of tape.  As before, pay attention to the exit tail area.</p> </li> <li> <p>Dip the inductor in a container of transformer varnish or low viscosity potting compound.  Much improved results will be achieved if this process is done in a vacuum chamber, as the varnish will then penetrate into the inner layer and will completely lock all the windings and the core together.  </p> </li> <li> <p>Cut the tails to the required length if necessary and use the solder pot to strip the insulation from the ends of each tail.  Using pliers or some method to hold the wire (it will get hot!) dip each tail into the solder pot to a depth of 15 to 20mm.  Hold it in the pot until the insulation stops bubbling up \u2013 this usually takes around 30 seconds. Warning: the fumes produced by this process can be toxic, take appropriate cautions with personal protective equipment or use a fume hood in a laboratory.</p> </li> <li> <p>Insert the soldered wire end into the PP75 crimp or bolt lug, and crimp it with the appropriate tool. This will usually be a hex crimp tool capable of generating quite high forces.</p> </li> <li> <p>If left at this stage, a good electrical contact will be in place, but over time the solder will 'flow' under the mechanical pressure of the crimp, and a loose and high-resistance joint will result.  This can be fixed by using a gas torch (or possibly a hot-air gun or paint stripper) to heat the crimp past the solder reflow point so that the solder around the wire flows onto the inside of the crimp and forms a soldered connection.  More solder can be added to the joint if necessary during this process.</p> </li> </ol>"},{"location":"Motor_Controllers/Inductor_Coil_Construction_Guide/Construction_Procedure.html#photos","title":"Photos","text":"<p>Inductor after completely winding the first layer, ready for taping:</p> <p></p> Step 1 <p>Inductor after taping first layer and beginning second layer:</p> <p></p> Step 2 <p>Inductor after spraying with transformer varnish.  It is recommended to use a dip procedure for this step instead of spraying:</p> <p></p> Step 3 <p>Photos courtesy of Erdem Guven, SAU Solarcar</p>"},{"location":"Motor_Controllers/Inductor_Coil_Construction_Guide/Materials_Required.html","title":"Materials and Equipment Required","text":""},{"location":"Motor_Controllers/Inductor_Coil_Construction_Guide/Materials_Required.html#materials","title":"Materials:","text":"<p>Material listings are for a complete set of three inductors:</p> <ul> <li> <p>58908-A2 High Flux Toroid core.  26\u00b5 permeability, 79mm OD, 48mm ID, 17mm high, 37nH/T<sup>2</sup> AL.  Quantity required: 3.  Supplier: Magnetics Incorporated, https://www.mag-inc.com</p> </li> <li> <p>Litz wire, 30x 0.335mm diameter strands, 'single' insulation, around 2.6mm<sup>2</sup> total copper cross sectional area.  Three of these litz wire bundles will be used in parallel, giving almost 8mm<sup>2</sup> total cross-sectional area.  Quantity required: approximately 50 metres. Supplier: varies, see below:</p> </li> <li> <p>Kapton or Polyester transformer insulation tape: Quantity required: a few metres. Supplier: Your local catalogue electronics supplier, eg Element14 (formerly Farnell), part number: 753-014</p> </li> <li> <p>Transformer Varnish or low viscosity potting compound: Generic, use a local supplier.  If using a vacuum chamber, a solvent-free varnish must be used to avoid boiling when the vacuum is pulled on the chamber.</p> </li> <li> <p>Connectors: PowerPole 75A Red or M6 bolt lug terminal. Quantity Required: 6 housings, 6 crimps. Supplier: Anderson Power Products or their local distributor, part number 5916G7 for the housing, 5900 for the crimp.  Bolt lugs, if used,  are available from local electrical supply shops.</p> </li> </ul> <p>The Litz wire is the most difficult component to source.  It is also the component that can tolerate the largest variation in specification and does not have to be an exact match to the size given above.  Finer strands give smaller eddy current losses, but also poorer fill factor (the amount of copper contained in the cable) as a bundle of very fine strands will be as much insulation as copper.  Larger strands have proportionally less insulation and will give lower resistance for a given bundle diameter.  </p> <p>Smaller size wire strands than approximately 0.25mm diameter can be used, however this does not improve eddy current losses to any significant degree, and it will worsen the fill factor and therefore the resistance of the wire.  Strands larger than 0.5mm diameter will begin to see an increase in eddy losses and are not recommended.</p> <p>Multiple bundles of litz are used in parallel.  This is to make construction easier, as winding three small 30 strand bundles together is easier than winding one large 90 strand bundle.  However, if sourcing a different wire construction is easier, than almost any combination is OK, but may require more effort to wind on the core.  The construction listed above is known to produce good results.  </p> <p>The wire strands are only required to be insulated to 'single' thickness insulation.  Choose a 'solderable' insulation with the highest temperature grade available easily.  This will usually be 155\u00b0C Polyurethane or similar.</p> <p>Litz wire is available from specialised manufacturers, use a web search to find a supplier close to you, as copper wire is heavy and shipping charges will be high if not purchased reasonably locally.  One example supplier in the US is the New England Wire Company.</p>"},{"location":"Motor_Controllers/Inductor_Coil_Construction_Guide/Materials_Required.html#equipment","title":"Equipment:","text":"<ul> <li> <p>Solder pot: Required to strip insulation from ends of litz wire.</p> </li> <li> <p>Fume hood and personal protective equipment to use with solder pot: Wire insulation fumes can be toxic, depending on the insulation material.  </p> </li> <li> <p>Vacuum chamber: Recommended to use when applying transformer varnish or epoxy coating to inductors, to remove trapped air bubbles.  It is  possible to perform this step without pulling a vacuum on the inductors, but much better results will be achieved with it.</p> </li> <li> <p>Crimp tool: Required to crimp the PP75 connectors or M6 bolt lugs onto the ends of the wire after soldering.</p> </li> <li> <p>Gas torch: Required to reflow the solder into the PP75 crimps or bolt lugs after crimping.  This step may be possible with a high-powered hot air gun (paint stripper), but a gas torch will be guaranteed to work properly.</p> </li> </ul>"},{"location":"Motor_Controllers/Inductor_Coil_Construction_Guide/Performance.html","title":"Performance","text":""},{"location":"Motor_Controllers/Inductor_Coil_Construction_Guide/Performance.html#calculations","title":"Calculations:","text":"<p>L = N<sup>2</sup> x A<sub>L</sub> = 36<sup>2</sup>turns x 37nH/turn = 48\u00b5H</p>"},{"location":"Motor_Controllers/Inductor_Coil_Construction_Guide/Performance.html#testing","title":"Testing:","text":"<p>50A step response:</p> <p>L = 118V / (23.4A / 10 \u00b5S) = 50\u00b5H</p>"},{"location":"Motor_Controllers/Inductor_Coil_Construction_Guide/Performance.html#100a-step-response","title":"100A step response:","text":"<p>Start of step (10A) L = 118V / (45.3A / 19.2\u00b5S) = 50\u00b5H</p> <p>End of step (115A)  L = 118V / (35.9A / 12.4\u00b5S) = 40\u00b5H</p>"},{"location":"Motor_Controllers/Inductor_Coil_Construction_Guide/Performance.html#120a-step-response","title":"120A Step response:","text":"<p>Start of step (10A) L = 118V / (54.7A / 23.8\u00b5S) = 50\u00b5H</p> <p>End of step (150A)  L = 118V / (54.7A / 13.8\u00b5S) = 30\u00b5H</p> <p>The decay of inductance with increasing current is gradual and continuous, unlike the ferrite cored CSIRO inductors.  This gradual decay presents no major problems for the WaveSculptor current control loop maintaining control of the motor phase current.</p>"},{"location":"Motor_Controllers/Motor_Sense_Comms_Spec/index.html","title":"WaveSculptor200 Motor Drive Motor Sense Comms Spec","text":"<p>This document describes the specification for serial comms between a motor position / temperature sense adapter board and a WaveSculptor motor controller.  The two communicate via a unidirectional, isolated, differential serial channel.</p>"},{"location":"Motor_Controllers/Motor_Sense_Comms_Spec/index.html#timing","title":"Timing","text":"<p>The serial link runs using asynchronous UART comms at 470.6 kbits/sec, 1 start bit, 8 bits data, 1 stop bit, no parity.  Complete packets are sent at a rate that will keep the serial channel full.  </p> <p>There should be a break character inserted after each packet, to allow the receiver to resynchronize to the correct start bit if noise corrupts the transmission during a packet.</p> <p>The WaveSculptor should run a timeout check on incoming comms, and flag a fault if no data is received within a certain time window (MOT error).</p>"},{"location":"Motor_Controllers/Motor_Sense_Comms_Spec/index.html#packet-format","title":"Packet Format","text":"<p>Each packet consists of four bytes.  The 1<sup>st</sup> and 2<sup>nd</sup> indicate the start of packet, and either temperature or device type.  The 3<sup>rd</sup> and 4<sup>th</sup> bytes indicate position or velocity data, with the type determined by the device type designation.</p> <p>Data should be left-justified, and zero-padded on the right if necessary.</p> <p>Temperature readings should be sent as unsigned data from the A/D converter, not converted to \u00b0C.  Any linearisation, calibration, and scaling shall be performed on the WaveSculptor, using data from the Windows config software.</p>"},{"location":"Motor_Controllers/Motor_Sense_Comms_Spec/index.html#first-byte","title":"First Byte","text":"Bits Parameter <code>7</code> 1 = Start of four-byte packet <code>6</code> 0 = Following bits are a device type1 = Following bits are temperature <code>5-0</code> Device type, or Temperature MSB"},{"location":"Motor_Controllers/Motor_Sense_Comms_Spec/index.html#second-byte","title":"Second Byte","text":"Bits Parameter <code>7</code> 0 = Not start of packet <code>6-0</code> Reserved if Device type, or Temperature LSB"},{"location":"Motor_Controllers/Motor_Sense_Comms_Spec/index.html#third-byte","title":"Third Byte","text":"Bits Parameter <code>7</code> 0 = Not start of packet <code>6-0</code> Position/Velocity MSB"},{"location":"Motor_Controllers/Motor_Sense_Comms_Spec/index.html#fourth-byte","title":"Fourth Byte","text":"Bits Parameter <code>7</code> 0 = Not start of packet <code>6-0</code> Position/Velocity MSB"},{"location":"Motor_Controllers/Motor_Sense_Comms_Spec/index.html#device-type","title":"Device Type","text":"<p>The device type is indicated with a 6-bit integer number corresponding to the motor adapter hardware and the specific sensors attached to it.  A motor controller receiving a device type that it does not know about should flag a fault and request a firmware update.</p> <p>Device types are assigned as follows:</p> Code Timer Inputs Motor Sensor Temperature Sensor Hardware <code>0</code> Invalid, flag a fault - - - <code>1</code> 120\u00b0 Halls Not Used NTC thermistor TRI74-46 <code>2</code> Quadrature Encoder Not Used NTC thermistor TRI74-44 <code>3</code> Quadrature Encoder Resolver, 14 bits Pt100 TRI74-45 <code>4</code> Quadrature Encoder 120\u00b0 halls, Timken M15, 3 bits Pt100 TRI74-50 <code>5</code> Quadrature Encoder Absolute position, 12 bits Pt100 TRI74-52 <code>6</code> Quadrature Encoder Not Used NTC thermistor TRI74-46 <code>7</code> Quadrature Encoder Resolver, 14 bits NTC thermistor TRI74-45 <code>8</code> Quadrature Encoder Not Used Pt100 TRI74-46"},{"location":"Motor_Controllers/Motor_Sense_Interfaces/index.html","title":"Motor Sense Interfaces","text":"<ul> <li> <p> Motor Sense Interface Type 1</p> <p>Type 1: Halls and Thermistor</p> <p> Reference</p> </li> <li> <p> Motor Sense Interface Type 2</p> <p>Type 2: Encoder and Thermistor</p> <p> Reference</p> </li> <li> <p> Motor Sense Interface Type 3</p> <p>Type 3: Resolver and pt100</p> <p> Reference</p> </li> <li> <p> Motor Sense Interface Type 6</p> <p>Type 6: Encoder and Thermistor </p> <p> Reference</p> </li> <li> <p> Motor Sense Interface Type 7</p> <p>Type 7: Resolver and Thermistor</p> <p> Reference</p> </li> </ul>"},{"location":"Motor_Controllers/Motor_Sense_Interfaces/WaveSculptor_Motor_Interface_Type_1/index.html","title":"WaveSculptor Motor Interface Type 1: Halls and Thermistor","text":"<p>This document describes the function, interface and properties of the WaveSculptor motor interface circuit, type 1.</p>"},{"location":"Motor_Controllers/Motor_Sense_Interfaces/WaveSculptor_Motor_Interface_Type_1/index.html#position-sensor","title":"Position Sensor","text":""},{"location":"Motor_Controllers/Motor_Sense_Interfaces/WaveSculptor_Motor_Interface_Type_1/index.html#type","title":"Type","text":"<p>The type 1 interface reads three channels of position information from hall-effect position sensors. It provides each channel with a 1k pull-up resistor for use with open-collector sensors.</p>"},{"location":"Motor_Controllers/Motor_Sense_Interfaces/WaveSculptor_Motor_Interface_Type_1/index.html#power","title":"Power","text":"<p>Power is provided to the sensors, and this voltage is also used as the pull-up voltage for the three input resistors.  By default, the voltage provided is 12V DC, but this can also be chosen as a factory option to be 5V DC.  </p>"},{"location":"Motor_Controllers/Motor_Sense_Interfaces/WaveSculptor_Motor_Interface_Type_1/index.html#inputs","title":"Inputs","text":"<p>Each input is sensed by a schmitt-trigger logic input with hysteresis.  Rising and falling input thresholds are at 2/3 and 1/3 of the power supply voltage.</p>"},{"location":"Motor_Controllers/Motor_Sense_Interfaces/WaveSculptor_Motor_Interface_Type_1/index.html#connector","title":"Connector","text":"<p>The connector used for the motor sense signals is a 6-way 3mm pitch Molex MicroFit connector.  The pinout is shown below, as viewed from the wire side \u2013 as you would look at it while inserting crimps.  </p> <p></p> Position Sense Connector"},{"location":"Motor_Controllers/Motor_Sense_Interfaces/WaveSculptor_Motor_Interface_Type_1/index.html#temperature-sensor","title":"Temperature Sensor","text":""},{"location":"Motor_Controllers/Motor_Sense_Interfaces/WaveSculptor_Motor_Interface_Type_1/index.html#type_1","title":"Type","text":"<p>The type 1 interface reads a single channel from an NTC thermistor.  Linearisation is provided in hardware on the motor interface circuit, with further scaling, offset and B curve correction being provided by the WaveSculptor, with inputs from the calibration software and the user.</p>"},{"location":"Motor_Controllers/Motor_Sense_Interfaces/WaveSculptor_Motor_Interface_Type_1/index.html#input","title":"Input","text":"<p>By default, the linearisation is provided for a 100k @ 25\u00b0C sensor, but this can also be chosen as a factory option for different values, such as the relatively common 10k @ 25\u00b0C parts.</p>"},{"location":"Motor_Controllers/Motor_Sense_Interfaces/WaveSculptor_Motor_Interface_Type_1/index.html#connector_1","title":"Connector","text":"<p>The connector used for motor temperature sense signals is a 2-way 3mm pitch Molex MicroFit connector.  The pinout is shown below, as viewed from the wire side \u2013 as you would look at it while inserting crimps</p> <p></p> Temp Sense Connector"},{"location":"Motor_Controllers/Motor_Sense_Interfaces/WaveSculptor_Motor_Interface_Type_1/index.html#motor-controller-interface","title":"Motor Controller Interface","text":""},{"location":"Motor_Controllers/Motor_Sense_Interfaces/WaveSculptor_Motor_Interface_Type_1/index.html#description","title":"Description","text":"<p>The interface to the WaveSculptor motor controller is provided using differential signal pairs transmitted by the motor interface, with three being received by timer channels in the WaveSculptor, and one being received by a serial UART peripheral.  Regulated 5V and 12V power is provided by the WaveSculptor for use by the motor interface circuitry and sensors.</p>"},{"location":"Motor_Controllers/Motor_Sense_Interfaces/WaveSculptor_Motor_Interface_Type_1/index.html#connector_2","title":"Connector","text":"<p>The connector used for motor sense signals is a 14-way 3mm pitch Molex MicroFit connector.  The pinout is shown below, as viewed from the wire side \u2013 as you would look at it while inserting crimps.  </p> <p></p> Motor Controller Connector <p>The wiring for this connector should be implemented with twisted pairs, as the signal inputs are differential.  Prohelion recommends using Belden 9506 type cable (shielded 6 pair) for this connection, with suggested cable colours shown above.</p>"},{"location":"Motor_Controllers/Motor_Sense_Interfaces/WaveSculptor_Motor_Interface_Type_2/index.html","title":"WaveSculptor Motor Interface Type 2: Encoder and Thermistor","text":"<p>This document describes the function, interface and properties of the WaveSculptor motor interface circuit, type 2.</p>"},{"location":"Motor_Controllers/Motor_Sense_Interfaces/WaveSculptor_Motor_Interface_Type_2/index.html#position-sensor","title":"Position Sensor","text":""},{"location":"Motor_Controllers/Motor_Sense_Interfaces/WaveSculptor_Motor_Interface_Type_2/index.html#type","title":"Type","text":"<p>The type 2 interface reads three channels of position information from a quadrature encoder position sensor with differential outputs.  Each channel is passed through to the differential receiver in the WaveSculptor, terminated with approximately 150 ohms between each + and \u2013 pair.</p>"},{"location":"Motor_Controllers/Motor_Sense_Interfaces/WaveSculptor_Motor_Interface_Type_2/index.html#power","title":"Power","text":"<p>5V DC is provided to run the encoder.</p>"},{"location":"Motor_Controllers/Motor_Sense_Interfaces/WaveSculptor_Motor_Interface_Type_2/index.html#connector","title":"Connector","text":"<p>The connector used for the motor sense signals is a 10-way 3mm pitch Molex MicroFit connector.  The pinout is shown below, as viewed from the wire side \u2013 as you would look at it while inserting crimps.  </p> <p></p> Position Sense Connector"},{"location":"Motor_Controllers/Motor_Sense_Interfaces/WaveSculptor_Motor_Interface_Type_2/index.html#temperature-sensor","title":"Temperature Sensor","text":""},{"location":"Motor_Controllers/Motor_Sense_Interfaces/WaveSculptor_Motor_Interface_Type_2/index.html#type_1","title":"Type","text":"<p>The type 6 interface reads a single channel from an NTC thermistor.  Linearisation is provided in hardware on the motor interface circuit, with further scaling, offset and B curve correction being provided by the WaveSculptor, with inputs from the calibration software and the user.</p>"},{"location":"Motor_Controllers/Motor_Sense_Interfaces/WaveSculptor_Motor_Interface_Type_2/index.html#input","title":"Input","text":"<p>By default, the linearisation is provided for a 100k @ 25\u00b0C sensor, but this can also be chosen as a factory option for different values, such as the relatively common 10k @ 25\u00b0C parts.</p>"},{"location":"Motor_Controllers/Motor_Sense_Interfaces/WaveSculptor_Motor_Interface_Type_2/index.html#connector_1","title":"Connector","text":"<p>The connector used for motor temperature sense signals is a 2-way 3mm pitch Molex MicroFit connector.  The pinout is shown below, as viewed from the wire side \u2013 as you would look at it while inserting crimps</p> <p></p> Temp Sense Connector"},{"location":"Motor_Controllers/Motor_Sense_Interfaces/WaveSculptor_Motor_Interface_Type_2/index.html#motor-controller-interface","title":"Motor Controller Interface","text":"<p>The interface to the WaveSculptor motor controller is provided using differential signal pairs transmitted by the motor interface, with three being received by timer channels in the WaveSculptor, and one being received by a serial UART peripheral.  Regulated 5V and 12V power is provided by the WaveSculptor for use by the motor interface circuitry and sensors.</p>"},{"location":"Motor_Controllers/Motor_Sense_Interfaces/WaveSculptor_Motor_Interface_Type_2/index.html#connector_2","title":"Connector","text":"<p>The connector used for motor sense signals is a 14-way 3mm pitch Molex MicroFit connector.  The pinout is shown below, as viewed from the wire side \u2013 as you would look at it while inserting crimps.  </p> <p></p> Motor Controller Connector"},{"location":"Motor_Controllers/Motor_Sense_Interfaces/WaveSculptor_Motor_Interface_Type_2/index.html#wiring","title":"Wiring","text":"<p>The wiring for this connector must be implemented with twisted pairs, as the signal inputs are differential.  Prohelion strongly recommends using Belden 9506 type cable (shielded 6 pair) for this connection, with suggested cable colours shown above.  </p>"},{"location":"Motor_Controllers/Motor_Sense_Interfaces/WaveSculptor_Motor_Interface_Type_2/index.html#installation","title":"Installation","text":""},{"location":"Motor_Controllers/Motor_Sense_Interfaces/WaveSculptor_Motor_Interface_Type_2/index.html#position","title":"Position","text":"<p>To minimise the length that low-powered signals from the position and temperature sensors have to travel, install the interface board as close to the motor as possible, usually inside the motor terminal box.  Insulate it with heatshrink or similar if necessary.</p>"},{"location":"Motor_Controllers/Motor_Sense_Interfaces/WaveSculptor_Motor_Interface_Type_2/index.html#wiring_1","title":"Wiring","text":"<p>Wire a straight-through cable from the WaveSculptor to the motor interface board 14-pin connectors, using the twisted-pair cable recommended in the previous section.</p> <p>Wire the position sensor to the 10-way connector.</p> <p>Wire the temperature sensor to the 2-way connector.</p>"},{"location":"Motor_Controllers/Motor_Sense_Interfaces/WaveSculptor_Motor_Interface_Type_2/index.html#mechanical","title":"Mechanical","text":"<p>The motor interface is supplied as an unenclosed PCB of dimensions 37x25mm.  Approximate height including connectors is 12mm.</p>"},{"location":"Motor_Controllers/Motor_Sense_Interfaces/WaveSculptor_Motor_Interface_Type_3/index.html","title":"WaveSculptor Motor Interface Type 3: Resolver and pt100","text":"<p>This document describes the function, interface and properties of the WaveSculptor motor interface circuit, type 3.</p>"},{"location":"Motor_Controllers/Motor_Sense_Interfaces/WaveSculptor_Motor_Interface_Type_3/index.html#position-sensor","title":"Position Sensor","text":""},{"location":"Motor_Controllers/Motor_Sense_Interfaces/WaveSculptor_Motor_Interface_Type_3/index.html#type","title":"Type","text":"<p>The type 3 interface reads position information from a sin/cos resolver position sensor with analog outputs.</p>"},{"location":"Motor_Controllers/Motor_Sense_Interfaces/WaveSculptor_Motor_Interface_Type_3/index.html#drive","title":"Drive","text":"<p>The interface board drives the resolver with a sinusoidal excitation signal of approximately 7V pk-pk at a frequency of 10kHz.  This amplitude and frequency is factory settable to other options so can support other types of resolver if necessary.  </p> <p>These drive signals are commonly shown in resolver datasheets as:</p> <ul> <li>R1(Exc+)</li> <li>R2(Exc\u2013)</li> </ul>"},{"location":"Motor_Controllers/Motor_Sense_Interfaces/WaveSculptor_Motor_Interface_Type_3/index.html#sense","title":"Sense","text":"<p>Two channels of differential analog input are used, for the sin and cos sense windings.  </p> <p>These signals are commonly shown in resolver datasheets as:</p> <ul> <li>S1 (Sin+)</li> <li>S3 (Sin\u2013)</li> <li>S4(Cos+)</li> <li>S2(Cos\u2013)</li> </ul>"},{"location":"Motor_Controllers/Motor_Sense_Interfaces/WaveSculptor_Motor_Interface_Type_3/index.html#shield","title":"SHIELD","text":"<p>Resolver signals can be quite sensitive to noise and therefore attention should be paid to shielding. </p> <p>The motor interface board provides two possible shield signals:</p> <ol> <li>ground, and </li> <li>a shield generated from the average voltage of the Sin and Cos waveforms.  If using a single-shielded cable, terminate the shield to the SHIELD pin, although terminating to GND will usually work equally well.</li> </ol> <p>If using a dual shielded cable, terminate the inner shield to SHIELD, and the outer shield to GND.</p>"},{"location":"Motor_Controllers/Motor_Sense_Interfaces/WaveSculptor_Motor_Interface_Type_3/index.html#resolver-mount","title":"Resolver Mount","text":"<p>To help prevent noise pickup from capacitive coupling, the resolver should be mounted such that its body is isolated from the motor frame.  Do NOT tie the SHIELD or GND pins to the motor frame.</p>"},{"location":"Motor_Controllers/Motor_Sense_Interfaces/WaveSculptor_Motor_Interface_Type_3/index.html#connector","title":"Connector","text":"<p>The connector used for the motor sense signals is a 8-way 3mm pitch Molex MicroFit connector.  The pinout is shown below, as viewed from the wire side \u2013 as you would look at it while inserting crimps</p> <p></p> Position Sense Connector"},{"location":"Motor_Controllers/Motor_Sense_Interfaces/WaveSculptor_Motor_Interface_Type_3/index.html#temperature-sensor","title":"Temperature Sensor","text":""},{"location":"Motor_Controllers/Motor_Sense_Interfaces/WaveSculptor_Motor_Interface_Type_3/index.html#type_1","title":"Type","text":"<p>The type 3 interface reads two channels of temperature information from Pt100 platinum elements. Scaling and offset corrections are provided by the WaveSculptor, with inputs from the calibration software and the user.</p>"},{"location":"Motor_Controllers/Motor_Sense_Interfaces/WaveSculptor_Motor_Interface_Type_3/index.html#input","title":"Input","text":"<p>By default, the sense circuitry is configured for 100 ohm platinum sensors (Pt100), but this can also be chosen as a factory option for different values, such as the relatively common 1000 ohm (Pt1000) types.</p> <p>The motor interface board only sends a single temperature reading to the motor controller, and chooses the highest temperature reading from channel 1 or channel 2 to send.  If not using one of the temperature channels, please fit a dummy resistor of around 100ohms to simulate a low temperature reading for that channel.  </p>"},{"location":"Motor_Controllers/Motor_Sense_Interfaces/WaveSculptor_Motor_Interface_Type_3/index.html#connector_1","title":"Connector","text":"<p>The connector used for motor temperature sense signals is a 4-way 3mm pitch Molex MicroFit connector.  The pinout is shown below, as viewed from the wire side \u2013 as you would look at it while inserting crimps.  </p> <p></p> Temp Sense Connector"},{"location":"Motor_Controllers/Motor_Sense_Interfaces/WaveSculptor_Motor_Interface_Type_3/index.html#motor-controller-interface","title":"Motor Controller Interface","text":"<p>The interface to the WaveSculptor motor controller is provided using differential signal pairs transmitted by the motor interface, with three being received by timer channels in the WaveSculptor, and one being received by a serial UART peripheral.  Regulated 5V and 12V power is provided by the WaveSculptor for use by the motor interface circuitry and sensors.</p>"},{"location":"Motor_Controllers/Motor_Sense_Interfaces/WaveSculptor_Motor_Interface_Type_3/index.html#connector_2","title":"Connector","text":"<p>The connector used for motor sense signals is a 14-way 3mm pitch Molex MicroFit connector.  The pinout is shown below, as viewed from the wire side \u2013 as you would look at it while inserting crimps.  </p> <p></p> Motor Controller Connector"},{"location":"Motor_Controllers/Motor_Sense_Interfaces/WaveSculptor_Motor_Interface_Type_3/index.html#wiring","title":"Wiring","text":"<p>The wiring for this connector must be implemented with twisted pairs, as the signal inputs are differential.  Prohelion strongly recommends using Belden 9506 type cable (shielded 6 pair) for this connection, with suggested cable colours shown above.  </p>"},{"location":"Motor_Controllers/Motor_Sense_Interfaces/WaveSculptor_Motor_Interface_Type_3/index.html#installation","title":"Installation","text":""},{"location":"Motor_Controllers/Motor_Sense_Interfaces/WaveSculptor_Motor_Interface_Type_3/index.html#position","title":"Position","text":"<p>To minimise the length that low-powered signals from the position and temperature sensors have to travel, install the interface board as close to the motor as possible, usually inside the motor terminal box.  Insulate it with heatshrink or similar if necessary.</p>"},{"location":"Motor_Controllers/Motor_Sense_Interfaces/WaveSculptor_Motor_Interface_Type_3/index.html#wiring_1","title":"Wiring","text":"<p>Wire a straight-through cable from the WaveSculptor to the motor interface board 14-pin connectors, using the twisted-pair cable recommended in the previous section.</p> <p>Wire the position sensor to the 8-way connector.</p> <p>Wire the temperature sensors to the 4-way connector.</p>"},{"location":"Motor_Controllers/Motor_Sense_Interfaces/WaveSculptor_Motor_Interface_Type_3/index.html#mechanical","title":"Mechanical","text":"<p>The motor interface is supplied as an unenclosed PCB of dimensions 60x25mm.  Approximate height including connectors is 12mm.</p>"},{"location":"Motor_Controllers/Motor_Sense_Interfaces/WaveSculptor_Motor_Interface_Type_6/index.html","title":"WaveSculptor Motor Interface Type 6: Encoder and Thermistor","text":"<p>This document describes the function, interface and properties of the WaveSculptor motor interface circuit, type 6.</p>"},{"location":"Motor_Controllers/Motor_Sense_Interfaces/WaveSculptor_Motor_Interface_Type_6/index.html#position-sensor","title":"Position Sensor","text":""},{"location":"Motor_Controllers/Motor_Sense_Interfaces/WaveSculptor_Motor_Interface_Type_6/index.html#type","title":"Type","text":"<p>The type 6 interface reads three channels of position information from a quadrature encoder position sensor with single-ended outputs. It provides each channel with a 10k pull-up resistor for use with open-collector sensors.</p>"},{"location":"Motor_Controllers/Motor_Sense_Interfaces/WaveSculptor_Motor_Interface_Type_6/index.html#power","title":"Power","text":"<p>Power is provided to the sensors, and this voltage is also used as the pull-up voltage for the three input resistors.  By default, the voltage provided is 12V DC, but this can also be chosen as a factory option to be 5V DC.  </p>"},{"location":"Motor_Controllers/Motor_Sense_Interfaces/WaveSculptor_Motor_Interface_Type_6/index.html#inputs","title":"Inputs","text":"<p>Each input is sensed by a schmitt-trigger logic input with hysteresis.  Rising and falling input thresholds are at 2/3 and 1/3 of the power supply voltage.</p>"},{"location":"Motor_Controllers/Motor_Sense_Interfaces/WaveSculptor_Motor_Interface_Type_6/index.html#connector","title":"Connector","text":"<p>The connector used for the motor sense signals is a 6-way 3mm pitch Molex MicroFit connector.  The pinout is shown below, as viewed from the wire side \u2013 as you would look at it while inserting crimps.  </p> <p></p> Position Sense Connector"},{"location":"Motor_Controllers/Motor_Sense_Interfaces/WaveSculptor_Motor_Interface_Type_6/index.html#temperature-sensor","title":"Temperature Sensor","text":""},{"location":"Motor_Controllers/Motor_Sense_Interfaces/WaveSculptor_Motor_Interface_Type_6/index.html#type_1","title":"Type","text":"<p>The type 6 interface reads a single channel from an NTC thermistor. Linearisation is provided in hardware on the motor interface circuit, with further scaling, offset and B curve correction being provided by the WaveSculptor, with inputs from the calibration software and the user.</p>"},{"location":"Motor_Controllers/Motor_Sense_Interfaces/WaveSculptor_Motor_Interface_Type_6/index.html#input","title":"Input","text":"<p>By default, the linearisation is provided for a 100k @ 25\u00b0C sensor, but this can also be chosen as a factory option for different values, such as the relatively common 10k @ 25\u00b0C parts.</p>"},{"location":"Motor_Controllers/Motor_Sense_Interfaces/WaveSculptor_Motor_Interface_Type_6/index.html#connector_1","title":"Connector","text":"<p>The connector used for motor temperature sense signals is a 2-way 3mm pitch Molex MicroFit connector.  The pinout is shown below, as viewed from the wire side \u2013 as you would look at it while inserting crimps.  </p> <p></p> Temp Sense Connector"},{"location":"Motor_Controllers/Motor_Sense_Interfaces/WaveSculptor_Motor_Interface_Type_6/index.html#motor-controller-interface","title":"Motor Controller Interface","text":"<p>The interface to the WaveSculptor motor controller is provided using differential signal pairs transmitted by the motor interface, with three being received by timer channels in the WaveSculptor, and one being received by a serial UART peripheral.  Regulated 5V and 12V power is provided by the WaveSculptor for use by the motor interface circuitry and sensors.</p>"},{"location":"Motor_Controllers/Motor_Sense_Interfaces/WaveSculptor_Motor_Interface_Type_6/index.html#connector_2","title":"Connector","text":"<p>The connector used for motor sense signals is a 14-way 3mm pitch Molex MicroFit connector.  The pinout is shown below, as viewed from the wire side \u2013 as you would look at it while inserting crimps.  </p> <p></p> Motor Controller Connector <p>The wiring for this connector should be implemented with twisted pairs, as the signal inputs are differential.  Prohelion recommends using Belden 9506 type cable (shielded 6 pair) for this connection, with suggested cable colours shown above.</p>"},{"location":"Motor_Controllers/Motor_Sense_Interfaces/WaveSculptor_Motor_Interface_Type_7/index.html","title":"WaveSculptor Motor Interface Type 7: Resolver and Thermistor","text":"<p>This document describes the function, interface, and properties of the WaveSculptor motor interface circuit, type 7.</p>"},{"location":"Motor_Controllers/Motor_Sense_Interfaces/WaveSculptor_Motor_Interface_Type_7/index.html#position-sensor","title":"Position Sensor","text":""},{"location":"Motor_Controllers/Motor_Sense_Interfaces/WaveSculptor_Motor_Interface_Type_7/index.html#type","title":"Type","text":"<p>The type 7 interface reads position information from a sin/cos resolver position sensor with analog outputs.</p>"},{"location":"Motor_Controllers/Motor_Sense_Interfaces/WaveSculptor_Motor_Interface_Type_7/index.html#drive","title":"Drive","text":"<p>The interface board drives the resolver with a sinusoidal excitation signal of approximately 7V pk-pk at a frequency of 10kHz.  This amplitude and frequency is factory settable to other options so can support other types of resolver if necessary. </p> <p>These drive signals are commonly shown in resolver datasheets as:</p> <ul> <li>R1(Exc+)</li> <li>R2(Exc\u2013)</li> </ul>"},{"location":"Motor_Controllers/Motor_Sense_Interfaces/WaveSculptor_Motor_Interface_Type_7/index.html#sense","title":"Sense","text":"<p>Two channels of differential analog input are used, for the sin and cos sense windings.  </p> <p>These signals are commonly shown in resolver datasheets as:</p> <ul> <li>S1 (Sin+)</li> <li>S3 (Sin\u2013)</li> <li>S4(Cos+)</li> <li>S2(Cos\u2013)</li> </ul>"},{"location":"Motor_Controllers/Motor_Sense_Interfaces/WaveSculptor_Motor_Interface_Type_7/index.html#shield","title":"SHIELD","text":"<p>Resolver signals can be quite sensitive to noise and therefore attention should be paid to shielding. </p> <p>The motor interface board provides two possible shield signals:</p> <ol> <li>ground, and </li> <li>a shield generated from the average voltage of the Sin and Cos waveforms.  If using a single-shielded cable, terminate the shield to the SHIELD pin, although terminating to GND will usually work equally well.</li> </ol> <p>If using a dual shielded cable, terminate the inner shield to SHIELD, and the outer shield to GND.</p>"},{"location":"Motor_Controllers/Motor_Sense_Interfaces/WaveSculptor_Motor_Interface_Type_7/index.html#resolver-mount","title":"Resolver Mount","text":"<p>To help prevent noise pickup from capacitive coupling, the resolver should be mounted such that its body is isolated from the motor frame.  Do NOT tie the SHIELD or GND pins to the motor frame.</p>"},{"location":"Motor_Controllers/Motor_Sense_Interfaces/WaveSculptor_Motor_Interface_Type_7/index.html#connector","title":"Connector","text":"<p>The connector used for the motor sense signals is a 8-way 3mm pitch Molex MicroFit connector.  The pinout is shown below, as viewed from the wire side \u2013 as you would look at it while inserting crimps</p> <p></p> Position Sense Connector"},{"location":"Motor_Controllers/Motor_Sense_Interfaces/WaveSculptor_Motor_Interface_Type_7/index.html#temperature-sensor","title":"Temperature Sensor","text":""},{"location":"Motor_Controllers/Motor_Sense_Interfaces/WaveSculptor_Motor_Interface_Type_7/index.html#type_1","title":"Type","text":"<p>The type 7 interface reads two channels of temperature information from NTC thermistors. Linearisation is provided in hardware on the motor interface circuit, with further scaling, offset and B curve correction being provided by the WaveSculptor, with inputs from the calibration software and the user.</p>"},{"location":"Motor_Controllers/Motor_Sense_Interfaces/WaveSculptor_Motor_Interface_Type_7/index.html#input","title":"Input","text":"<p>By default, the linearisation is provided for a 100k @ 25\u00b0C sensor, but this can also be chosen as a factory option for different values, such as the relatively common 10k @ 25\u00b0C parts.</p>"},{"location":"Motor_Controllers/Motor_Sense_Interfaces/WaveSculptor_Motor_Interface_Type_7/index.html#connector_1","title":"Connector","text":"<p>The connector used for motor temperature sense signals is a 4-way 3mm pitch Molex MicroFit connector. The pinout is shown below, as viewed from the wire side The pinout is shown below, as viewed from the wire side \u2013 as you would look at it while inserting crimps.  </p> <p></p> Temp Sense Connector"},{"location":"Motor_Controllers/Motor_Sense_Interfaces/WaveSculptor_Motor_Interface_Type_7/index.html#motor-controller-interface","title":"Motor Controller Interface","text":"<p>The interface to the WaveSculptor motor controller is provided using differential signal pairs transmitted by the motor interface, with three being received by timer channels in the WaveSculptor, and one being received by a serial UART peripheral.  Regulated 5V and 12V power is provided by the WaveSculptor for use by the motor interface circuitry and sensors.</p>"},{"location":"Motor_Controllers/Motor_Sense_Interfaces/WaveSculptor_Motor_Interface_Type_7/index.html#connector_2","title":"Connector","text":"<p>The connector used for motor sense signals is a 14-way 3mm pitch Molex MicroFit connector.  The pinout is shown below, as viewed from the wire side \u2013 as you would look at it while inserting crimps.  </p> <p></p> Motor Controller Connector"},{"location":"Motor_Controllers/Motor_Sense_Interfaces/WaveSculptor_Motor_Interface_Type_7/index.html#wiring","title":"Wiring","text":"<p>The wiring for this connector must be implemented with twisted pairs, as the signal inputs are differential.  Prohelion strongly recommends using Belden 9506 type cable (shielded 6 pair) for this connection, with suggested cable colours shown above. </p>"},{"location":"Motor_Controllers/Motor_Sense_Interfaces/WaveSculptor_Motor_Interface_Type_7/index.html#installation","title":"Installation","text":""},{"location":"Motor_Controllers/Motor_Sense_Interfaces/WaveSculptor_Motor_Interface_Type_7/index.html#position","title":"Position","text":"<p>To minimise the length that low-powered signals from the position and temperature sensors have to travel, install the interface board as close to the motor as possible, usually inside the motor terminal box.  Insulate it with heatshrink or similar if necessary.</p>"},{"location":"Motor_Controllers/Motor_Sense_Interfaces/WaveSculptor_Motor_Interface_Type_7/index.html#wiring_1","title":"Wiring","text":"<p>Wire a straight-through cable from the WaveSculptor to the motor interface board 14-pin connectors, using the twisted-pair cable recommended in the previous section.</p> <p>Wire the position sensor to the 8-way connector.</p> <p>Wire the temperature sensors to the 4-way connector.</p>"},{"location":"Motor_Controllers/Motor_Sense_Interfaces/WaveSculptor_Motor_Interface_Type_7/index.html#mechanical","title":"Mechanical","text":"<p>The motor interface is supplied as an unenclosed PCB of dimensions 60x25mm.  Approximate height including connectors is 12mm.</p>"},{"location":"Motor_Controllers/WaveSculptor200/Datasheet/index.html","title":"WaveSculptor200 Motor Drive Datasheet","text":"<p>This document describes the specifications, performance and properties of the Prohelion WaveSculptor 200 Motor Controller.</p> <p>For more details on communications, mechanical positioning and mounting, wiring and precharge, cooling, and installation, please refer to the User Manual document available.</p> <p>Operating the controller beyond the limits specified in this document will result in the voiding of the controller warranty.  Prohelion accepts no responsibility for events caused as a result of operating the controller beyond the limits specified in this document. Note that the specifications in this document are subject to change at any time due to product improvement.</p> <p></p> WaveSculptor22 Motor Drive"},{"location":"Motor_Controllers/WaveSculptor200/Datasheet/Control_And_Telemetry_Interface.html","title":"Control and Telemetry Interface","text":"<p>The WaveSculptor receives commands, and transmits telemetry values, using a CAN bus connection.  No other interface is provided.  Low-voltage DC power must be provided along the CAN bus cable to operate the control electronics of the WaveSculptor.</p> Supply Units Notes: CAN bus supply voltage minimum: 9 V Note <sup>1</sup> CAN bus supply voltage maximum: 15 V Note <sup>1</sup> CAN bus supply voltage nominal: 13.8 V Note <sup>1</sup> CAN bus supply power maximum: 20 W CAN bus data rate maximum: 1000 kbps Note <sup>2</sup> CAN bus isolation: 1000 V Note <sup>3</sup> <p>Notes:</p> <ol> <li> <p>Prohelion recommends providing the CAN bus supply with 13.8V, using a DC/DC converter and a backup lead-acid battery.  This arrangement, when properly implemented, gives a supply that can tolerate failures and still operate the controller successfully for a short period of time.\u00a0\u21a9\u21a9\u21a9</p> </li> <li> <p>The data rate used for CAN bus activity is set during configuration and setup of the controller.  Factory default for all Prohelion devices is 500 kbits per second.\u00a0\u21a9</p> </li> <li> <p>The CAN bus data connection and power supply are isolated from the high-power DC bus to this continuous voltage rating.  Please refer to the isolation section in the User Manual regarding recommended earthing and connection practices.\u00a0\u21a9</p> </li> </ol>"},{"location":"Motor_Controllers/WaveSculptor200/Datasheet/DC_Bus.html","title":"DC Bus","text":"<p>The DC bus connection provides power to the controller during normal (motoring) operation, and accepts power from the controller during regenerative braking operation.  It is expected to be connected to a battery pack through a precharge circuit and a fuse.</p> Supply Units Notes: Continuous bus voltage minimum: 0 V Note <sup>1</sup> Continuous bus voltage maximum: 450 V Instantaneous bus voltage maximum: 475 V Note <sup>2</sup> Instantaneous bus current maximum (drive): 368 A Note <sup>3</sup>, <sup>4</sup> Instantaneous bus current maximum (regen): -368 A Note <sup>3</sup>, <sup>4</sup> DC bus capacitance: 800 \u00b5F <p>Notes:</p> <ol> <li> <p>The WaveSculptor control electronics operate from low-voltage DC supplied along the CAN bus cable, not from the high-voltage DC bus.  Therefore, the supply to the main power stage (via the DC bus) has no operating minimum voltage.\u00a0\u21a9</p> </li> <li> <p>The WaveSculptor uses 600V IGBTs as the power switching elements. Exceeding this voltage across the device for even a short interval will result in catastrophic failure of the motor controller.  The WaveSculptor contains sufficient internal capacitance, and sufficiently rapid detection circuitry, such that it can protect itself against a self-imposed worst-case situation during normal operation.  This situation is regenerative braking at full current, at maximum continuous bus voltage, and having the DC bus connection broken or removed.  This situation can occur as a result of the DC bus protection contactor opening, the battery fuse blowing, or a loose connection in the vehicle wiring. Operating with higher DC bus voltages than the continuous voltage maximum could result in this self-protection mechanism failing to shut down the controller in time, resulting in the destruction of the controller.\u00a0\u21a9</p> </li> <li> <p>The instantaneous current rating of the DC bus is related to the highest power drive situation, which is driving at full motor current and full speed.  In this case, the bus current will be \u221a3 / \u221a2 * RMS motor current maximum (300A), giving a  current of 368A DC.  The equivalent factors apply for regenerative braking. Although the controller is capable of processing this bus current, the motor impedance (power factor) will limit the current at high speed, therefore limiting the bus current.  Modelling of your motor impedance in the drive system should be performed to calculate peak power.\u00a0\u21a9\u21a9</p> </li> <li> <p>The maximum DC bus current can be limited by the WaveSculptor under software control, and is adjustable dynamically via a command on the CAN bus during operation to anywhere between 0 and 100% of full current.  This feature can be used to limit the current capability and sizing of battery packs, battery wiring, battery fusing, and contactors.\u00a0\u21a9\u21a9</p> </li> </ol>"},{"location":"Motor_Controllers/WaveSculptor200/Datasheet/Efficiency.html","title":"Efficiency","text":"<p>To estimate an operating point efficiency of the WaveSculptor, refer to the efficiency maps below.  These plots are generated for DC bus voltages of 450V and 200V respectively.</p> <p>The efficiency (in percent) is shown using the blue lines, and the power being processed by the WaveSculptor (in kW) using the red lines.  </p> <p>As an example, a vehicle with a 450V DC bus may operating at 250 Vrms output voltage and 150 Arms output current.  The graph shows that at this point, the WaveSculptor will be processing 65 kW of power at just over 98% efficiency.</p> <p></p> Figure 1: Predicted Efficiency map of the WaveSculptor controller with a 450V DC Bus <p></p> Figure 2: Predicted efficiency map of the WaveSculptor controller with a 200V DC Bus <p>These efficiency maps were generated using an accurate mathematical model of the WaveSculptor\u2019s power stage, with individual loss components confirmed using laboratory testing.</p>"},{"location":"Motor_Controllers/WaveSculptor200/Datasheet/Environmental.html","title":"Environmental","text":"<p>The WaveSculptor controller is environmentally sealed against water and dust ingress, when mounted according to the User Manual </p> <p>To reach the specified IP rating, please note that the conduit fittings on the front of the WaveSculptor must be permanently glued to the conduit, using a PVC cement.  </p> Environmental rating Notes: Environmental rating (conduit glued): IP65 Note <sup>1</sup> Environmental rating (conduit push-fit only): IP54 <p>Notes:</p> <p></p> WaveSculptor22 Mounting Positions <ol> <li> <p>The acceptable mounting positions as detailed in the User Manual are shown below:\u00a0\u21a9</p> </li> </ol>"},{"location":"Motor_Controllers/WaveSculptor200/Datasheet/Mechanical.html","title":"Mechanical","text":"<p>The WaveSculptor controller is mounted into position using three rubber mounted M6 shoulder bolts.  All dimensions in this section are with the controller mounted in position on a horizontal surface.  For full details regarding positioning and fixing of the WaveSculptor, please refer to the User Manual document available on the Prohelion website.</p> Supply Units Notes: WaveSculptor enclosure length: 500 mm Note <sup>1</sup> WaveSculptor enclosure width: 172 mm Note <sup>1</sup> WaveSculptor enclosure height: 82 mm Note <sup>1</sup> WaveSculptor mass: 8.5 kg Note <sup>2</sup> Conduit size for DC and motor cables: 40 mm Note <sup>3</sup> Conduit size for CAN bus cables: 25 mm Note <sup>3</sup> Tubing size (ID) for coolant connections: 10 mm Note <sup>4</sup> HV electrical terminal thread: M8 Note <sup>5</sup> HV electrical fastening torque maximum: 12 Nm Note <sup>5</sup> <p>Notes:</p> <ol> <li> <p>Dimensions do not include attached cabling and connectors.\u00a0\u21a9\u21a9\u21a9</p> </li> <li> <p>Weight includes conduit adapters, nuts and washers for high current terminal connections, and coolant completely filling the waterblock.\u00a0\u21a9</p> </li> <li> <p>DC (battery) and AC (motor) cabling should be contained in orange flexible conduit. CAN bus cabling should be contained in white flexible conduit.  PVC adapters (supplied with the controller) are threaded into the front panel of the motor controller, and the conduit should be glued into these adapters using standard plumbing type solvent cement to fully waterproof the cable entry points.\u00a0\u21a9\u21a9</p> </li> <li> <p>The WaveSculptor is supplied with swivelling nozzles sized for watercooling tubing with a 10mm ID and 13mm OD.  Refer to the User's Manual for recommended components.\u00a0\u21a9</p> </li> <li> <p>The WaveSculptor has permanently fitted threaded studs in the connection busbars.  The correct fastening hardware to use with these busbars is detailed in the User Manual \u21a9\u21a9</p> </li> </ol>"},{"location":"Motor_Controllers/WaveSculptor200/Datasheet/Motor_Output.html","title":"Motor Output","text":"<p>The motor output connection provides three-phase power to the motor during normal (motoring) operation and receives power during regenerative braking.  It is expected to be connected to a three-phase motor, either an induction or BLDC (permanent magnet) type.</p> Supply Units Notes: Instantaneous motor current maximum: 300 A<sub>rms</sub> Note <sup>1</sup> Output voltage maximum (at max DC bus): 320 V<sub>rms</sub> <sub>line-line</sub> Motor phase inductance minimum: 50 \u00b5H Note <sup>2</sup>, <sup>4</sup> Motor Resistance minimum: 0 \u03a9 Note <sup>3</sup>, <sup>4</sup> <p>Notes: </p> <ol> <li> <p>The motor current limit is software controlled and may be limited to lower values via the configuration / setup utility if required.\u00a0\u21a9</p> </li> <li> <p>The WaveSculptor requires a minimum amount of inductance in each motor phase to properly regulate current.  Not providing this inductance may result in an out-of-regulation condition of the motor current control loop, possibly resulting in an undesired self-protection shutdown, or failure of the controller.  Please ensure that both the motor inductance, and any external inductors (if used), are still providing at least the minimum required inductance, even at full rated current, and at elevated temperatures.\u00a0\u21a9</p> </li> <li> <p>As long as the minimum inductance per phase requirement is met, the WaveSculptor will regulate current and operate successfully into a shorted connection.\u00a0\u21a9</p> </li> <li> <p>The WaveSculptor can report inductance and resistance present on its output when running the configuration / setup program.  This will provide a figure for the complete output circuit, including motor, external inductors (if any), wiring, and connectors.  This can be used to verify these values meet the datasheet requirements, but only for low current operation, as the test is performed using a current of approximately 20A.\u00a0\u21a9\u21a9</p> </li> </ol>"},{"location":"Motor_Controllers/WaveSculptor200/Datasheet/Motor_Sense.html","title":"Motor Sense","text":"<p>When driving an AC Permanent Magnet motor, the WaveSculptor requires three sensors from the motor to give position feedback at low velocities.  When driving an induction motor, the WaveSculptor requires a motor shaft encoder to give velocity feedback.  Motor temperature can also be measured for both telemetry data and motor protection, if desired.</p> Supply Units Notes: Sensor power supply output 1: 5 V Note <sup>1</sup> Sensor power supply output 2: 12 V Note <sup>1</sup> Sensor power supply current maximum: 100 mA Sensor Power Supply isolation: 1000 V Note <sup>2</sup> BLDC motor position sensor input phase offset: \u00b110 \u00b0 Note <sup>3</sup>,<sup>4</sup> Induction motor encoder resolution minimum: 64 ppr Note <sup>5</sup> NTC Temperature sensor at 25\u00b0C: 100 k\u03a9 Note <sup>6</sup> <p>Notes:</p> <ol> <li> <p>The WaveSculptor provides isolated voltage supplies to operate the motor position sensors and motor temperature sensor.  These supplies are a regulated 5V and a regulated 12V output.  Please check with your motor supplier for the acceptable operating voltage of the position sensors used in your motor.\u00a0\u21a9\u21a9</p> </li> <li> <p>The sensor output supply, position inputs, and temperature input have an isolation barrier between them and both the DC bus and the CAN bus voltages.\u00a0\u21a9</p> </li> <li> <p>Motor position sensors are only required when driving a AC Permanent Magnet motor.  Motor position sensors should be aligned such that the phase angle offset between each sensor\u2019s output changing state, and the zero-crossing point of it\u2019s appropriate motor phase, is no more than the specified maximum. This implies that the sensors are 120\u00b0 offset (electrically, per motor pole) from each other under ideal conditions.\u00a0\u21a9</p> </li> <li> <p>The polarity and arrangement of the position input signals does not matter. The WaveSculptor detects relative alignment of position signals to motor phases, as well as the polarity of each input, when the Phasorsense algorithm is run during motor controller configuration and setup.  The WaveSculptor can store this information for multiple motors, thus allowing motor changes in your vehicle without having to re-run the configuration program.  Please refer to the communications and programming Appendix in the User's Manual for more information.\u00a0\u21a9</p> </li> <li> <p>The motor shaft encoder is only required when driving a induction motor.\u00a0\u21a9</p> </li> <li> <p>The WaveSculptor expects a 100k\u03a9 (at 25\u00b0C) NTC thermistor embedded in the motor to detect motor temperature.  The thermistor B model constants (available in the thermistor datasheet) can be programmed into the WaveSculptor during configuration / setup to exactly match the temperature response of your thermistor.\u00a0\u21a9</p> </li> </ol>"},{"location":"Motor_Controllers/WaveSculptor200/Datasheet/Operating_Power_And_Cooling.html","title":"Operating Power and Cooling","text":"<p>The maximum instantaneous output power from the WaveSculptor is limited by internal hardware restrictions, as detailed in previous sections.  However, the continuous power capability of the controller is limited by thermal performance, and is therefore affected by conditions external to the controller such as ambient temperature and cooling system performance.</p> <p>The WaveSculptor 200 is water cooled, and uses an external radiator with fans to provide cooling for the system.  Careful consideration should be paid to the position and ventilation of the radiator in your vehicle.</p> Supply Units Notes: Maximum instantaneous power output: 165 kVA Note <sup>1</sup> Maximum continuous power output at 30\u00b0C ambient: 107 kVA Note <sup>2</sup> Maximum continuous power output at 40\u00b0C ambient: 91 kVA Note <sup>2</sup> Maximum continuous power output at 50\u00b0C ambient: 76 kVA Note <sup>2</sup> Acceptable metallic cooling system components: Aluminium Note <sup>3</sup> Coolant pressure maximum 0.75 Bar Note <sup>4</sup> <p>Notes:</p> <ol> <li> <p>Maximum software current limit multiplied by maximum DC bus voltage limit.\u00a0\u21a9</p> </li> <li> <p>The controller is thermally limited to maintain the junction temperature of the main silicon devices below 100\u00b0C.  Stated figures are with Prohelion specified cooling system components with fan-forced airflow. Refer to the User Manual. for recommended components.\u00a0\u21a9\u21a9\u21a9</p> </li> <li> <p>To prevent dissimilar metal corrosion problems, all items in the liquid cooling loop must be either plastic or aluminium.  Note specifically that many automotive radiators are copper, and must not be used.  Please use only the components recommended by Prohelion, as specified in the User Manual.\u00a0\u21a9</p> </li> <li> <p>To avoid exceeding this pressure, it is recommended to use a pump with a maximum head of less than this value.  The Koolance PMP-400 pump recommended in the User Manual meets this requirement.\u00a0\u21a9</p> </li> </ol>"},{"location":"Motor_Controllers/WaveSculptor200/User_Manual/index.html","title":"WaveSculptor200 User Manual","text":"<p>This document describes the operation, connections, mounting, communications, cooling and how to get started with and use the Prohelion WaveSculptor 200 Motor Controller.</p> <p></p> WaveSculptor 200 Motor Controller <p>Danger</p> <p>This product processes and uses potentially lethal voltages and currents.  Do not provide power or operate with the cover removed. To be opened and connected to by authorised personnel only</p>"},{"location":"Motor_Controllers/WaveSculptor200/User_Manual/Accessing_The_Controller.html","title":"Accessing The Controller","text":""},{"location":"Motor_Controllers/WaveSculptor200/User_Manual/Accessing_The_Controller.html#safety","title":"Safety","text":"<p>Opening the cover on the WaveSculptor will expose the connections for the CAN bus and motor sense, and high power terminals for battery and motor phase connections.  High voltages may be present inside this cover.  Before opening, make sure that the battery contactors are dis-engaged, so that high voltage is not present at the motor controller.  Allow 10 minutes for the internal capacitors to discharge before working on the controller.</p>"},{"location":"Motor_Controllers/WaveSculptor200/User_Manual/Accessing_The_Controller.html#inspection-cover","title":"Inspection Cover","text":"<p>The inspection cover is held closed against a sealing gasket with stainless steel M3 countersunk hex head screws.  Use a 2mm allen (hex) key to loosen and remove all twelve screws.</p> <p>Lift off the inspection cover and set it aside.  Use a multimeter to check across the battery connection terminals for high voltage.  If more than a few volts are present, wait additional time for the capacitors to discharge to a safe level.  </p> <p>Be extremely careful to not drop loose fasteners into the motor controller, as they may move around while driving and short out the battery or motor phase connections.  </p> <p>When finished working inside the WaveSculptor, replace the inspection cover and insert and tighten all 12 screws in an even pattern.  It is mandatory to use a small amount of Loctite 243 or similar threadlocking compound to seal the threads of the screws against moisture.  Failure to apply locking compound will reduce the environmental rating of the controller.</p>"},{"location":"Motor_Controllers/WaveSculptor200/User_Manual/Accessing_The_Controller.html#enclosure","title":"Enclosure","text":"<p>The main enclosure is bonded in place and not removable by the end user. Doing so will void the controller warranty.</p>"},{"location":"Motor_Controllers/WaveSculptor200/User_Manual/Appendix_A.html","title":"Appendix A: Recommended Component Sources","text":""},{"location":"Motor_Controllers/WaveSculptor200/User_Manual/Appendix_A.html#can-cabling-low-voltage-connectors","title":"Can Cabling &amp; Low Voltage Connectors","text":"Part Manufacturer Manufacturer Part Number Suggested Supplier Supplier Part Number <code>DeviceNet Cable (per metre)</code> Lapp Cable 2170343 Farnell 161-7915 <code>6-way MicroFit connector housing (CAN Connectors)</code> Molex 43025-0600 Digikey WM1785-ND <code>14-way MicroFit connector housing (Motor Sense Connector)</code> Molex 43025-1400 Digikey WM2489-ND <code>MicroFit Crimps (20-24 AWG)</code> Molex 43030-0007 Digikey WM1837-ND"},{"location":"Motor_Controllers/WaveSculptor200/User_Manual/Appendix_A.html#high-power-cabling-connectors","title":"High Power Cabling &amp; Connectors","text":"Part Manufacturer Manufacturer Part Number Suggested Supplier Supplier Part Number <code>Motor Temperature Sensor - 100k 25\u00b0C NTC Thermistor</code> BethTherm 10KD6A372I Farnell 970-7298 <code>High Power 16mm&lt;sup&gt;2&lt;/sup&gt; M6 bolt lug connections</code> Cabac CAA 16-6 Local Electrical Supplier - <code>High Power Cabling - 16mm&lt;sup&gt;2&lt;/sup&gt; high temp orange</code> Tycab Australia ZDFX151102-OR Local Electrical supplier -"},{"location":"Motor_Controllers/WaveSculptor200/User_Manual/Appendix_A.html#cooling-system-components","title":"Cooling System Components","text":"Part Manufacturer Manufacturer Part Number Suggested Supplier Supplier Part Number <code>Radiator - Aluminium core 3x120mm size</code> Koolance HX-1020 + either:NZL-V10P or NZL-L10P - - <code>Pump - Magnetically coupled 12V</code> Koolance PMP - 400 - - <code>Reservoir - 200mm long acrylic</code> Koolance COV-TKBTM +  BDY-TK200 +  COV-TKTOP + either:  NZL-L10P or  NZL-V10P - - <code>10mm ID / 13mm OD tubing - per foot (up to 10 feet required, depends on vehicle)</code> Koolance HOS-10CL - - <code>Coolant - 700ml bottle, Blue (probably two bottles required, depends on vehicle)</code> Koolance LIQ-702BU-B - -"},{"location":"Motor_Controllers/WaveSculptor200/User_Manual/Appendix_B.html","title":"Appendix B: Guide to successful Crimping","text":""},{"location":"Motor_Controllers/WaveSculptor200/User_Manual/Appendix_B.html#molex-microfit-30","title":"Molex MicroFit 3.0","text":"<p>At the bare minimum, use a quality hand crimp tool such as Molex part number 0638111000, available at a reasonable price from Digikey, part WM9999-ND.  The tool must be shaped to fold the crimp ears around and down through the centre of the wire conductor bundle \u2013 crimping with pliers or an 'automotive' barrel type crimp tool will not give a satisfactory result. </p> <p>Refer to the Molex Quality Crimping Handbook:</p> <p>Note the pictures in the \u201cTroubleshooting\u201d section for the visual differences between a good and a bad crimp.</p> <p>For higher volumes or critical applications such as racing, the extra expense of a dedicated MicroFit hand tool such as Molex part number 63819-0000 may be appropriate.  This tool is available from Digikey, part WM9022-ND.  Be aware that this tool does provide far superior results compared to the generic crimp tool.</p>"},{"location":"Motor_Controllers/WaveSculptor200/User_Manual/Appendix_B.html#high-power-bolt-lugs","title":"High Power Bolt Lugs","text":"<p>It is important to crimp the high power connections properly so that they remain reliable and low-resistance for a long time.  High power connections should not be soldered for vehicle applications, as the solder wicks up inside the copper strands and creates a stress point, which can fatigue and break due to the vibration present in a vehicle. Follow the steps below for a successful crimp</p> <p>Step 1:</p> <p>Cut the cable square and neatly, with no loose strands.  The best tool to use is a parrot-beak cable cutter, available at electricians supply stores.  </p> <p></p> Step 1 <p>Step 2:</p> <p>Strip the insulation to the correct distance for the crimp you are using.  When inserted into the crimp, the insulation should touch the barrel of the crimp with no large gaps and you should be able to see the ends of the copper strands through the inspection hole next to the lug of the crimp.</p> <p>Step 3:</p> <p>Put a small blob (6mm or 1/4\u201d diameter) of electrical jointing compound into the barrel of the crimp.  This compound prevents oxygen and moisture from getting into the crimp later on, and keeps it in good condition for a long time.  </p> <p></p> Step 3 <p>Step 4:</p> <p>Insert the wire into the crimp.  Hold your finger over the inspection hole to stop the jointing compound coming out, therefore forcing it up between the wire strands.  Push the wire all the way into the crimp barrel, so that the wire insulation touches the end of the barrel with no large gaps.</p> <p></p> Step 4 <p>Step 5:</p> <p>Set your hex crimp tool to the same size as the crimp lug.  In the example photos here, we have used 35mm<sup>2</sup> cable, lugs, and crimp tool.  To crimp with the proper force, you will need either a 'bolt cutter' type crimp tool, as shown in the photo above, with handles around 600mm (2') long, or a hydraulic tool with an appropriate crimp die set.</p> <p></p> Step 5 <p>Step 6:</p> <p>Crimp the barrel of the crimp.  For the tool used in these photos, it can be crimped three times along the length of the barrel.  A hydraulic tool may be similar. A high volume tool will probably only require a single action.  </p> <p>Step 7:</p> <p>Heatshrink both ends of the orange cable with red or black heatshrink to indicate DC polarity.  Red and Black cable should be reserved for low voltage (12V) wiring in the car.  Use other colour heatshrink for the motor phases.  </p> <p></p> Step 7"},{"location":"Motor_Controllers/WaveSculptor200/User_Manual/Appendix_C.html","title":"Appendix C: CAN Communications Protocol","text":""},{"location":"Motor_Controllers/WaveSculptor200/User_Manual/Appendix_C.html#hardware","title":"Hardware","text":"<p>The CAN hardware interface used is compatible with the CAN 2.0B standard.  The supported bit rates (bits per second) are 1 Mbps, 500 kbps (default), 250 kbps, 125 kbps, 100 kbps and 50 kbps.</p>"},{"location":"Motor_Controllers/WaveSculptor200/User_Manual/Appendix_C.html#software","title":"Software","text":"<p>The CAN protocol uses data frames for most communication.  Remote frames are also enabled.  The identifier field uses the standard frame definition length of 11 bits, with identifiers 0x7F0 to 0x7FF reserved for use by the WaveSculptor bootloader. The bootloader will send a message with identifier 0x7F1 at 500kbit after a system reset. All measurement data is transmitted using IEEE single-precision 32-bit format (IEEE 754) with most significant byte (MSB) sent first.</p> <p></p> Figure 1. CAN Data frame"},{"location":"Motor_Controllers/WaveSculptor200/User_Manual/Appendix_C.html#identifier","title":"Identifier","text":"<p>The identifier field has been split into two sections for Prohelion devices. Bits 10-5 contain the device identifier and bits 4-0 contains the message identifier associated with that device, as shown in Figure 2. This means that there is a maximum of 63 Prohelion device that can be on the CAN bus at any one time. The 64th location is reserved for the bootloader. Each Prohelion device can have 31 different types of messages. The first message identifier is used by the device identification message. Two device slots could be used if more messages per device were required, however this has not been required yet.</p> <p>The term Base Address is used instead of Device Identifier in the Windows configuration program. Base Address is simply the Device Identifier multiplied by 32. Using this term makes it more obvious what range of CAN identifiers have been used. As an example, there may be a Prohelion driver controls at base address 0x400, a left wheel WaveSculptor motor controller at 0x420 and a right wheel WaveSculptor motor controller at 0x440. So, address range 0x400 \u2013 0x45F would be used by this Prohelion system.</p> <p></p> Figure 2. CAN Device Identifier Address Format"},{"location":"Motor_Controllers/WaveSculptor200/User_Manual/Appendix_C.html#data-field","title":"Data Field","text":"<p>The data field in all frames is fixed at 8 bytes (64 bits) which allows space for two IEEE 754 32-bit floating point variables as shown in Figure 3.  The data field is sent and expected to be received least significant byte first. This allows a direct overlay of a float[2] array and char[8] array on a little endian processor, such as an Intel x86, the TI DSP in the WaveSculptor, or the MSP430 micro in the driver controls product.</p> <p></p> Figure 3. Format of the data field in a data frame"},{"location":"Motor_Controllers/WaveSculptor200/User_Manual/Appendix_C.html#units","title":"Units","text":"<p>Please note that variables described in the following packets with units of percent \u201c%\u201d should be sent with a minimum floating-point value of 0.0 and a maximum value of 1.0.  Do not send 100.0 as the maximum value.</p>"},{"location":"Motor_Controllers/WaveSculptor200/User_Manual/Appendix_C.html#drive-commands","title":"Drive Commands","text":"<p>These are data frames broadcast from the driver controls to any listening motor controller. These commands contain desired set points for the control software to operate the controller.  The commands are sent as required, however there is a maximum permissible delay between consecutive Motor Drive commands.</p> <p>The identifier of a received command will contain the base address of the device from which the message was sent and a message identifier offset.  The base address of the sending device is a preset value stored in internal memory, which can be set during initial configuration of the motor controller using the configuration utility.</p>"},{"location":"Motor_Controllers/WaveSculptor200/User_Manual/Appendix_C.html#motor-drive-command","title":"Motor Drive Command","text":"<p>ID: Driver Controls Base Address + 0x01 </p> <p>Interval: 100ms </p> Variable Bits Units Description <code>Motor Current</code> 63..32 % Desired motor current set point as a percentage of maximum current setting <code>Motor Velocity</code> 31..0 rpm Desired motor velocity set point in rpm <p>The WaveSculptor motor controller must receive a Motor Drive Command frame at least once every 250ms.  If this does not occur, the controller will assume that communications have failed and will halt all motor control functions, placing the system into neutral and coasting until another valid command is received.</p>"},{"location":"Motor_Controllers/WaveSculptor200/User_Manual/Appendix_C.html#motor-power-command","title":"Motor Power Command","text":"<p>ID: Driver Controls Base Address + 0x02 </p> <p>Interval: 100ms </p> Variable Bits Units Description <code>Bus Current</code> 63..32 % Desired set point of current drawn from the bus by the controller as a percentage of absolute bus current limit. <code>Reserved</code> 31..0 - -"},{"location":"Motor_Controllers/WaveSculptor200/User_Manual/Appendix_C.html#reset-command","title":"Reset Command","text":"<p>ID: Driver Controls Base Address + 0x03 </p> Variable Bits Units Description <code>Unused</code> 63..32 - - <code>Unused</code> 31..0 - - <p>Send a command from this address to reset the software in the WaveSculptor, not used during normal operation, but can be used to reset the device if necessary.</p>"},{"location":"Motor_Controllers/WaveSculptor200/User_Manual/Appendix_C.html#drive-command-examples","title":"Drive Command Examples","text":"<p>Ignoring the added complexity of bus and thermal limiting, the WaveSculptor operates such that it will use the maximum available current (torque) to try and achieve the desired velocity.  This is true for both accelerating and decelerating operation, i.e. the WaveSculptor will automatically regeneratively brake if a setpoint velocity is provided that is slower than the current speed.</p> <p>Two main drive modes will be used in a normal vehicle setup: torque control; and velocity (cruise) control.  A conventional vehicle runs in torque control mode, where the position of the accelerator (gas) pedal controls the amount of torque produced by the engine.  In an electric system, the motor current is proportional to torque, and can be easily regulated, as can the velocity.</p> <p>To run the motor in torque control mode, set the velocity to an unobtainable value such as 20000rpm.  Set the current to a value that is proportional to your accelerator pedal position.  If you wish to drive in reverse, set the velocity to -20000rpm.  The motor will operate the same as a normal car, and will coast down to a stop if the driver removes their foot from the pedal.</p> <p>To run the motor in velocity (cruise) control mode, set the current to your maximum desired acceleration force (usually 100%), and set the velocity to the desired speed.  The WaveSculptor will use the setpoint current to keep the vehicle at the setpoint speed, and will use both drive and regenerative braking to do so.   Use this mode to regeneratively brake to a halt by setting current to your desired braking force, and setting velocity to zero.</p>"},{"location":"Motor_Controllers/WaveSculptor200/User_Manual/Appendix_C.html#motor-controller-broadcast-messages","title":"Motor Controller Broadcast Messages","text":"<p>Data frames containing telemetry values are periodically broadcast onto the bus by the WaveSculptor.  Broadcast of these values can be individually enabled and disabled via the Windows configuration software. </p> <p>Any of these telemetry values can be requested at any time (no matter if enabled or disabled) by sending the appropriate RTR packet on the CAN bus.  For example, with a WaveSculptor200 configured at base address 0x400, your device should send an empty packet onto the CAN bus with an ID of 0x402 and the RTR bit set.  The WaveSculptor200 will reply immediately with a packet from ID 0x402 containing the latest bus voltage and current readings.</p>"},{"location":"Motor_Controllers/WaveSculptor200/User_Manual/Appendix_C.html#identification-information","title":"Identification Information","text":"<p>ID: Motor Controller Base Address + 0x00 </p> <p>Interval: 1 Second </p> Variable Bits Type Description <code>Serial Number</code> 63..32 Uint32 Device serial number, allocated at manufacture. <code>Prohelion ID</code> 31..0 Uint32 Device identifier. 0x00004002 <p>The periodic broadcast of this message cannot be disabled. It is needed to find the motor controller on the network if the base address is lost or mis-configured.</p>"},{"location":"Motor_Controllers/WaveSculptor200/User_Manual/Appendix_C.html#status-information","title":"Status Information","text":"<p>ID: Motor Controller Base Address + 0x01 </p> <p>Interval: 200ms </p> Variable Bits Type Description <code>Receive Error Count</code> 63..56 Uint8 The DSP CAN receive error counter (CAN 2.0) <code>Transmit Error Count</code> 55..48 Uint8 The DSP CAN transmission error counter (CAN 2.0) <code>Error Flags (Extended)</code> 47..40 Uint8 Flags Indicate Extended Errors (V3 Only) Bits Parameter 76543210 Desaturation fault \u2013 Phase A Low GateDesaturation fault \u2013 Phase A High GateDesaturation fault \u2013 Phase B Low GateDesaturation fault \u2013 Phase B High GateDesaturation fault \u2013 Phase C Low GateDesaturation fault \u2013 Phase C High GateHardware over current \u2013 Phase CHardware over current \u2013 Phase B <code>Active Motor</code> 39..32 Uint8 The index of the active motor currently being used <code>Error Flags</code> 31..16 Uint16 Flags Indicate Errors Bits Parameter 15..14131211109876543210 ReservedHardware over VoltageOutput over Voltage (Debug only)Bad PWM (Debug only)Unknown error source (Debug only)Motor Over Speed (15% overshoot above max RPM)Motor Interface communications faultDesaturation fault (IGBT desaturation, IGBT driver UVLO)15V rail under voltage lock out (UVLO)Config read errors (some values may be reset to defaults)Watchdog caused last resetBad Motor position hall sequenceDC Bus over voltageSoftware over currentHardware over current <code>Limit Flags</code> 15..0 Uint16 Flags Indicate which control loop is limiting the output current of the motor controller Bits Parameter 15..76543210 ReservedIPM Temperature or Motor TemperatureBus Voltage Lower Limit Bus Voltage Upper LimitBus CurrentVelocityMotor CurrentOutput Voltage PWM"},{"location":"Motor_Controllers/WaveSculptor200/User_Manual/Appendix_C.html#bus-measurement","title":"Bus Measurement","text":"<p>ID: Motor Controller Base Address + 0x02 </p> <p>Interval: 200ms </p> Variable Bits Units Description <code>Bus Current</code> 63..32 A Current drawn from the DC bus by the controller. <code>Unused</code> 31..0 V DC bus voltage at the controller."},{"location":"Motor_Controllers/WaveSculptor200/User_Manual/Appendix_C.html#velocity-measurement","title":"Velocity Measurement","text":"<p>ID: Motor Controller Base Address + 0x03 </p> <p>Interval: 200ms </p> Variable Bits Units Description <code>Vehicle Velocity</code> 63..32 m/s Vehicle velocity in metres/second. <code>Motor Velocity</code> 31..0 rpm Motor angular frequency in revolutions per minute."},{"location":"Motor_Controllers/WaveSculptor200/User_Manual/Appendix_C.html#phase-current-measurement","title":"Phase Current Measurement","text":"<p>ID: Motor Controller Base Address + 0x04 </p> <p>Interval: 200ms </p> Variable Bits Units Description <code>Phase C Current</code> 63..32 A<sub>rms</sub> RMS current in motor Phase C. <code>Motor Velocity</code> 31..0 A<sub>rms</sub> RMS current in motor Phase B. <p>While the motor is rotating at speed these two currents should be equal. At extremely low commutation speeds these two currents will only match in one third of the motor position, the other two thirds will involve current also flowing in Phase A.</p>"},{"location":"Motor_Controllers/WaveSculptor200/User_Manual/Appendix_C.html#motor-voltage-vector-measurement","title":"Motor Voltage Vector Measurement","text":"<p>ID: Motor Controller Base Address + 0x05 </p> <p>Interval: 200ms </p> Variable Bits Units Description <code>Vd</code> 63..32 V Real component of the applied non-rotating voltage vector to the motor. <code>Vq</code> 31..0 V Imaginary component of the applied non-rotating voltage vector to the motor."},{"location":"Motor_Controllers/WaveSculptor200/User_Manual/Appendix_C.html#motor-current-vector-measurement","title":"Motor Current Vector Measurement","text":"<p>ID: Motor Controller Base Address + 0x06 </p> <p>Interval: 200ms </p> Variable Bits Type Description <code>Id</code> 63..32 A Real component of the applied non-rotating current vector to the motor.  This vector represents the field current of the motor. <code>Iq</code> 31..0 A Imaginary component of the applied non-rotating current vector to the motor.  This current produces torque in the motor and should be in phase with the back-EMF of the motor."},{"location":"Motor_Controllers/WaveSculptor200/User_Manual/Appendix_C.html#motor-backemf-measurementprediction","title":"Motor BackEMF Measurement/Prediction","text":"<p>ID: Motor Controller Base Address + 0x07 </p> <p>Interval: 200ms </p> Variable Bits Type Description <code>BEMFd</code> 63..32 V By definition this value is always 0V. <code>BEMFq</code> 31..0 V The peak of the phase to neutral motor voltage."},{"location":"Motor_Controllers/WaveSculptor200/User_Manual/Appendix_C.html#15v-voltage-rail-measurement","title":"15V Voltage Rail Measurement","text":"<p>ID: Motor Controller Base Address + 0x08 </p> <p>Interval: 1 second </p> Variable Bits Type Description <code>15V supply</code> 63..32 V Actual voltage level of the 15V power rail. <code>Reserved</code> 31..0 - -"},{"location":"Motor_Controllers/WaveSculptor200/User_Manual/Appendix_C.html#33v-19v-voltage-rail-measurement","title":"3.3V &amp; 19.V Voltage Rail Measurement","text":"<p>ID: Motor Controller Base Address + 0x09 </p> <p>Interval: 1 second</p> Variable Bits Type Description <code>3.3V supply</code> 63..32 V Actual voltage level of the 3.3V power rail. <code>1.9V supply</code> 31..0 V Actual voltage level of the 1.9V DSP power rail."},{"location":"Motor_Controllers/WaveSculptor200/User_Manual/Appendix_C.html#reserved","title":"Reserved","text":"<p>ID: Motor Controller Base Address + 0x0A </p> <p>Interval: - </p> Variable Bits Type Description <code>Reserved</code> 63...32 - - <code>Reserved</code> 31...0 - -"},{"location":"Motor_Controllers/WaveSculptor200/User_Manual/Appendix_C.html#imp-phase-a-motor-temperature-measurement","title":"IMP Phase A &amp; Motor Temperature Measurement","text":"<p>ID: Motor Controller Base Address + 0x0B </p> <p>Interval: 1 second </p> Variable Bits Type Description <code>IMP Phase A Temp</code> 63...32 \u00b0C Internal temperature of phase A in main IPM. <code>Motor Temp</code> 31...0 \u00b0C Internal temperature of the motor."},{"location":"Motor_Controllers/WaveSculptor200/User_Manual/Appendix_C.html#imp-phase-b-dsp-board-temperature-measurement","title":"IMP Phase B &amp; DSP Board Temperature Measurement","text":"<p>ID: Motor Controller Base Address + 0x0C </p> <p>Interval: 1 second </p> Variable Bits Type Description <code>IMP Phase B Temp</code> 63...32 \u00b0C Internal temperature of phase B in main IPM. <code>DSP Board Temp</code> 31...0 \u00b0C Temperature of the DSP board."},{"location":"Motor_Controllers/WaveSculptor200/User_Manual/Appendix_C.html#imp-phase-c-temperature-measurement","title":"IMP Phase C Temperature Measurement","text":"<p>ID: Motor Controller Base Address + 0x0D </p> <p>Interval: 1 second </p> Variable Bits Type Description <code>IMP Phase C Temp</code> 63...32 \u00b0C Internal temperature of phase C in main IPM. <code>Reserved</code> 31...0 \u00b0C -"},{"location":"Motor_Controllers/WaveSculptor200/User_Manual/Appendix_C.html#odometer-bus-amphours-measurement","title":"Odometer &amp; Bus AmpHours Measurement","text":"<p>ID: Motor Controller Base Address + 0x0E </p> <p>Interval: 1 second </p> Variable Bits Type Description <code>DC Bus AmpHours</code> 63...32 Ah Charge flow into the controller DC bus from the time of reset. <code>Odometer</code> 31...0 m Distance the vehicle has travelled since reset"},{"location":"Motor_Controllers/WaveSculptor200/User_Manual/Appendix_C.html#slip-speed-measurement","title":"Slip Speed Measurement","text":"<p>ID: Motor Controller Base Address + 0x17 </p> <p>Interval: 200ms </p> Variable Bits Type Description <code>Slip Speed</code> 63..32 Hz Slip speed when driving an induction motor. <code>Reserved</code> 31..0 \u00b0C -"},{"location":"Motor_Controllers/WaveSculptor200/User_Manual/Appendix_C.html#configuration-commands","title":"Configuration Commands","text":""},{"location":"Motor_Controllers/WaveSculptor200/User_Manual/Appendix_C.html#active-motor-change","title":"Active Motor Change","text":"<p>ID: Motor Control Base Address + 0x12 </p> Variable Bits Units Description <code>Active Motor</code> 63..48 WORD Desired active motor (0 to 9) <code>Configuration Access Key</code> 47..0 ASCII Must spell \u201cACTMOT\u201d in ASCII (0x54 4F 4D 54 43 41) <p>Send this command to change the active motor. Note that the controller will save the active motor to the EEPROM config memory, so what you send will survive a reset. This has a downside that you do not want to be sending it constantly, as you'll wear out the EEPROM.</p> <p>Example to set the active motor to motor slot 5:</p> <p>CAN ID = 0x412, Data = 0x00 05 54 4F 4D 54 43 41</p>"},{"location":"Motor_Controllers/WaveSculptor200/User_Manual/CAN_Bus_And_Low_Voltage.html","title":"CAN Bus and Low Voltage","text":"<p>The CAN bus is structured as a linear network, with short stubs branching from 'T' connectors on the main bus backbone to each device.  The CAN bus data lines must be terminated at each end of the main bus with 120 ohm resistors between the CAN-H and CAN-L signals.</p> <p>In the range of Prohelion EV products, including the WaveSculptor 200, EV Driver Controls, and BMS Pack Master, the CAN connections are implemented with an 'in' and an 'out' connector, therefore placing the 'T' on the device, resulting in a very short fixed-length stub on the circuit board of each device.  This is ideal from a signal integrity and network performance point of view.</p> <p></p> CAN Bus Topology <p>The WaveSculptor motor controller uses the CAN bus to receive commands and transmit telemetry, as well as to provide low-voltage DC power to operate the controller electronics.</p> <p>Therefore, a basic system consists of three major components:</p> <ol> <li>WaveSculptor motor controller</li> <li>Driver controls interface to pedals, switches &amp; gauges</li> <li>Power supply (nominally 12V DC) to operate the system</li> </ol> <p>Other components can also be added to the network. Items typically found in a electric vehicle would include:</p> <ol> <li>LCD and other driver information displays</li> <li>Battery management system</li> <li>Multiple motor controllers</li> <li>Datalogging</li> </ol>"},{"location":"Motor_Controllers/WaveSculptor200/User_Manual/CAN_Bus_And_Low_Voltage.html#can-wiring","title":"CAN Wiring","text":"<p>The CAN data lines (CAN-H and CAN-L) must be implemented with twisted-pair wire for proper data integrity.  The wire should have a characteristic impedance of 120 ohms.</p> <p>Power should also be provided along the CAN cable, ideally with another twisted pair to minimise noise pickup.  An overall shield can also be advantageous.  </p> <p>From a performance perspective, the optimal choice of cable is 7mm Devicenet CAN bus 'thin' cable, with 24AWG (data) + 22AWG (power) twisted pairs and a braided shield.  Using this cable will result in a robust installation.  However, it is not cheap, and using it for a large network with many devices will quickly add up to a significant cost.  </p> <p>For those on a budget, standard CAT5 network cabling (which has an impedance of 100 ohms) can be used, but may become unreliable in longer networks or in the presence of electrical noise from DC/DC converters and other electrical devices in the system \u2013 use this type of cable at your own risk.  </p>"},{"location":"Motor_Controllers/WaveSculptor200/User_Manual/CAN_Bus_And_Low_Voltage.html#can-connector","title":"CAN Connector","text":"<p>The connector used on the WaveSculptor200 and other Prohelion devices is a 6-way 3mm pitch Molex MicroFit connector.  The pinout is shown below, as viewed from the wire side \u2013 as you would look at it while inserting crimps.  The colours shown match those in the standard DeviceNet CAN cabling pairs.  Please refer to Appendix B for an overview of correct crimping technique, as poor crimps will cause unreliable operation.</p> <p></p> CAN Connector"},{"location":"Motor_Controllers/WaveSculptor200/User_Manual/CAN_Bus_And_Low_Voltage.html#can-shielding","title":"CAN Shielding","text":"<p>On one device only in the network, instead of using the SHIELD pin, terminate the shield to the SHIELD GROUND pin (upper-left corner on the connector) on both CAN IN and CAN OUT connectors, to ground the shield for the entire network at this single point.  The usual place to do this is where power is fed into the network, typically at Prohelion 's EV Driver Controls product.</p>"},{"location":"Motor_Controllers/WaveSculptor200/User_Manual/CAN_Bus_And_Low_Voltage.html#can-termination","title":"CAN Termination","text":"<p>To implement the required 120 Ohm termination resistor at each end of the CAN bus, plug a connector into the unused CAN connector on the last device at each end of the network with a resistor crimped into the appropriate locations.  Leave the power, ground and shield pins unconnected.</p>"},{"location":"Motor_Controllers/WaveSculptor200/User_Manual/CAN_Bus_And_Low_Voltage.html#communications","title":"Communications","text":"<p>The CAN standard does not specify high-level message protocols. Prohelion devices use a custom protocol, outlined in the communication specification document for each device.</p> <p>By default, each device operates at 500 kbits/second, one step below the maximum possible data rate of 1 Mbit/second, and comes programmed from the factory with a CAN base address that will allow it to work without problems with other Prohelion devices. Using the Windows PC interface program and the Prohelion CAN-Ethernet bridge, both the data rate and the base address can be programmed to suit your network.</p> <p>WaveSculptor controllers also have a second programmable base address that they watch for command messages. This should be set to whatever base address is used by the driver controls node on the network.</p> <p>The WaveSculptor motor controller expects regular messages from the driver controls device.  If a message is not received within a set timeout period (refer to the communications specification in Appendix A for the exact value) then the controller will change to a safe mode and will stop driving the motor until a valid message is received again. This protects against faults where either a connector is loose or broken, the cable has been damaged, or the driver controls have failed.</p>"},{"location":"Motor_Controllers/WaveSculptor200/User_Manual/CAN_Bus_And_Low_Voltage.html#power-supply","title":"Power Supply","text":"<p>Each Prohelion device expects a DC supply on the CAN bus connection of between 9 and 15V.  13.8V from a small lead-acid battery charged by your vehicle's DC/DC converter is ideal.  Refer to each device\u2019s datasheet for CAN bus current consumption values, and make sure that the total is less than the rating on your chosen cable.</p> <p>Prohelion 's EV Driver Controls product provides a means to connect power from the battery into the CAN bus, to power other devices on the network.  It can switch power to the CAN bus based on the state of the ignition key.</p>"},{"location":"Motor_Controllers/WaveSculptor200/User_Manual/CAN_Bus_And_Low_Voltage.html#driver-controls","title":"Driver Controls","text":"<p>Prohelion can provide a CAN bus driver controls device.  This interfaces to pedals and switches, and provides the messages required to operate a WaveSculptor controller. The firmware for this device is open-source, allowing it to be easily customized to suit your vehicle.</p> <p>As the communications specification is open, the WaveSculptor can also be operated from custom driver controls hardware specific to your vehicle, or from a Windows PC running either the provided Prohelion software, or custom software of your choice.</p> <p>Please refer to the Driver Controls User Manual on our website for further details.</p>"},{"location":"Motor_Controllers/WaveSculptor200/User_Manual/CAN_Bus_And_Low_Voltage.html#system-expansion","title":"System Expansion","text":"<p>Prohelion can provide a CAN bus LCD display capable of showing up to four different telemetry values (one at a time) on a 3.5 digit sunlight-readable screen.  Multiple displays can be used if desired.  </p>"},{"location":"Motor_Controllers/WaveSculptor200/User_Manual/CAN_Bus_And_Low_Voltage.html#multiple-motors","title":"Multiple Motors","text":"<p>Multiple motors/controllers are accommodated easily with the CAN bus system. All that is required is for each WaveSculptor controller to be programmed to receive messages from the same driver controls base address, and then to run the vehicle in current-control mode (the default setup). Each motor will now operate at the same current, thus giving automatic wheel speed differences for cornering, with the system acting as an electronic differential.</p> <p>The base address of each WaveSculptor controller should be programmed to a different value. This allows viewing of separate telemetry data from each controller on the LCD displays or other telemetry systems in the vehicle.</p>"},{"location":"Motor_Controllers/WaveSculptor200/User_Manual/Controller_Function.html","title":"Controller Function","text":"<p>As a high-level description, the WaveSculptor takes high voltage DC from a battery pack, and converts it to a lower voltage 3-phase AC to drive a motor.  </p> <p>Power flow is bi-directional, so it can also perform regenerative braking (regen) where power flows from the motor back into the batteries.  It is a four-quadrant device, which means that it can drive or regen in both forwards and reverse directions.</p> <p>Ignoring the losses in the system (refer to the datasheet for efficiency curves for the WaveSculptor), total power through the motor controller is conserved.  It does not create energy, it just converts it from one form (DC) to another (AC).  </p>"},{"location":"Motor_Controllers/WaveSculptor200/User_Manual/Controller_Function.html#a-note-on-motor-and-battery-currents","title":"A Note on Motor and Battery Currents","text":"<p>Motor current is proportional to torque, whereas battery current is proportional to power.</p> <p>Power = Torque x speed </p> <p>The effect of this is that battery current will only approach motor current as the motor speed approaches 100%.  At low motor speeds, the battery current will also be low, regardless of what the motor current is.  </p> <p>This applies to most motor controllers, but with DC motor systems (where efficiency is much more variable) the effect is not usually as noticeable.  So, when reading this document (and the datasheet) make sure to note if the specification is talking about motor current or battery current.  They are very different quantities.</p>"},{"location":"Motor_Controllers/WaveSculptor200/User_Manual/Cooling.html","title":"Cooling","text":""},{"location":"Motor_Controllers/WaveSculptor200/User_Manual/Cooling.html#liquid-cooling-overview","title":"Liquid Cooling Overview","text":"<p>The liquid cooling system consists of four main components. They are:</p> <ul> <li>WaveSculptor 200 waterblock</li> <li>Pump</li> <li>Radiator</li> <li>Reservoir</li> </ul> <p>They should be connected as shown below. Tracing the liquid flow path around the circuit, the pump should be directly after the reservoir, to minimise dry running the pump when installing the system.  The radiator should be directly after the WaveSculptor, to cool the liquid as soon as possible and minimise the temperature that the pump is exposed to.</p> <p></p> Liquid Cooling <p>Additional components can be added to the system. Recommended items are:</p> <ul> <li>Flow sensor somewhere in the loop</li> <li>Level sensor in the reservoir</li> </ul> <p>Having both of these extra items wired to an alarm/fault signal will guarantee that the motor controller is not operated without coolant flowing.</p> <p>It is important to make sure that all items exposed to the coolant loop are either plastic or aluminium.  Using dis-similar metals (especially copper) in different parts of the cooling loop will result in corrosion and pitting of various items in the loop, with quite rapid failure likely.</p> <p>The coolant system should be operated non-pressurised. A breather hole or an air space of at least 25mm (1\u201d) should be left at the top of the reservoir to allow coolant expansion and contraction without pressure buildup.</p>"},{"location":"Motor_Controllers/WaveSculptor200/User_Manual/Cooling.html#wavesculptor-waterblock","title":"WaveSculptor Waterblock","text":"<p>The coolant flow path inside the WaveSculptor is a 'U' shape along one side from the inlet to the far end of the controller, across at the end, and back along the other side to the outlet.  </p> <p>When mounted horizontally, it does not matter which way coolant flows in the waterblock, so connect the inlet and outlet in the way that simplifies the tube routing in your vehicle.</p> <p>When mounted vertically (the middle picture in the Choosing a Location section) then the inlet should be below the outlet.  Doing this will simplify bleeding air from the system.</p>"},{"location":"Motor_Controllers/WaveSculptor200/User_Manual/Cooling.html#radiator","title":"Radiator","text":"<p>Prohelion recommends an aluminium radiator of at least 120 x 360mm dimensions, such as Koolance part number HX-1020 and a pair of nozzles NZL-V10P or NZL-L10P, for vertical or right-angle hose attachment.  This will need to be used with three 120mm fans, which should be rated for use in wet environments, as they will be exposed to road grime and spray.</p> <p>The radiator should be mounted in the airflow path through the front of the car, to help with cooling.  If thermostatically controlled fans are used, a carefully chosen mounting location will minimise the time the fans are required to operate, therefore saving power.</p>"},{"location":"Motor_Controllers/WaveSculptor200/User_Manual/Cooling.html#pump","title":"Pump","text":"<p>Prohelion recommends using a Koolance part number PMP-400 pump.  The specifications on this pump are 8.7 litres/min and 7m head (0.68 Bar, 68 kPa), and a 50,000 hour rated lifetime.  This pump is a good match for the pressure drop through the WaveSculptor water block, radiator, and several metres of 10mm ID tubing. </p> <p>A quality installation will use some form of monitoring on the pump speed feedback signal, to flag a fault in the event of slow or stalled operation.</p> <p>It is important to never run the pump without coolant in the system, as dry operation for even a few seconds will dramatically reduce the lifespan of the pump.  This constraint means that the pump should be located below the level of fluid in the reservoir.</p> <p>The PMP-400 pump does not require additional nozzles, having moulded push-fit barbs as part of the pump.  Make sure to secure the tubing to the barbs using cable ties or hose clamps.  Do not over-tighten if using hose clamps, as the pump barbs are plastic.</p>"},{"location":"Motor_Controllers/WaveSculptor200/User_Manual/Cooling.html#reservoir","title":"Reservoir","text":"<p>A reservoir is necessary to allow for coolant contraction and expansion as the system heats and cools.  It also allows for time to notice and correct any leaks in the system before running the pump dry.  </p> <p>The reservoir should be the highest component in the system, so that any air bubbles from other components will collect in the reservoir, not inside the waterblock or radiator.  </p> <p>Prohelion recommends building a reservoir using Koolance parts COV-TKBTM (base), BDY-TK200 (body), COV-TKTOP (top lid), and a pair of nozzles either NZL-L10P or NZL-V10P.  This reservoir holds more liquid than strictly necessary, but this allows for easier filling and air bleeding when installing the system.  Using a reservoir with a large top opening allows you to add coolant quickly as the pump sucks it from the reservoir when filling the system for the first time, without having to stop and start the pump.</p> <p>A second option is a combined reservoir and pump, saving some space, fittings and tubing.  This can be constructed using Koolance parts COV-RP400, PMP-400, BDY-TK200, COV-TKTOP &amp; either NZL-V10P or NZL-L10P.</p>"},{"location":"Motor_Controllers/WaveSculptor200/User_Manual/Cooling.html#tubing","title":"Tubing","text":"<p>Prohelion recommends using high quality 10mm ID / 13mm OD tubing, such as Koolance part number HOS-10CL.  This is also available in a range of colours.  High quality tubing will be far less likely to kink than standard cheap PVC tube, and also has less problems with softening at higher temperatures.  If a tight bend radius is required, consider using a spring wrap such as Koolance part SPR-10BK, which helps stop the tube kinking.</p>"},{"location":"Motor_Controllers/WaveSculptor200/User_Manual/Cooling.html#coolant","title":"Coolant","text":"<p>The coolant used in the system is critical for it's longevity.  A quality coolant designed for this application is required, to help with corrosion, foaming, heat transfer, and biological growth.  Automotive coolant fulfils the first three requirements, but not the last, as it gets hot enough in a vehicle engine to kill any bacteria, so a biocide is not required. If using automotive coolant in your system, an additional biocide will have to be added manually.</p> <p>Prohelion recommends using Koolance liquid LIQ-702BU-B, which meets all requirements for the system.  This is also available in a range of colours</p>"},{"location":"Motor_Controllers/WaveSculptor200/User_Manual/Cooling.html#bleeding","title":"Bleeding","text":"<p>It is important to bleed all air from the system.  The pump and radiator are mostly self-bleeding, but the waterblock on the WaveSculptor requires some intervention by the user.</p> <p>The coolant flow path inside the WaveSculptor is a 'U' shape along one side from the inlet to the far end of the controller, across at the end, and back along the other side to the outlet.</p> <p>With the coolant filled and the reservoir close to full, start the pump.  Tilt the WaveSculptor by around 30\u00b0 to allow air bubbles near the inlet to move to the far end of the controller.  Next, tilt it to the side, so that the air trapped at the far end moves to the outlet side of the waterblock.  Now, tilt the controller so the far end is down, and the air moves along the outlet side of the controller and exits through the outlet tubing.  Repeat this circular tilting motion until air stops exiting the controller.  You may need to top up the reservoir during this process, depending on how much air is purged from the waterblock.  </p> <p>You may also need to perform a similar process with the radiator, depending on it's mounting location and position relative to the other components in the system.</p>"},{"location":"Motor_Controllers/WaveSculptor200/User_Manual/DBC.html","title":"Prohelion WaveSculptor 200 DBC File","text":"<p>The following DBC file can be used to decode the CAN Packets transmitted by this device.</p> <pre><code>VERSION \"\"\n\n\nNS_ : \n    NS_DESC_\n    CM_\n    BA_DEF_\n    BA_\n    VAL_\n    CAT_DEF_\n    CAT_\n    FILTER\n    BA_DEF_DEF_\n    EV_DATA_\n    ENVVAR_DATA_\n    SGTYPE_\n    SGTYPE_VAL_\n    BA_DEF_SGTYPE_\n    BA_SGTYPE_\n    SIG_TYPE_REF_\n    VAL_TABLE_\n    SIG_GROUP_\n    SIG_VALTYPE_\n    SIGTYPE_VALTYPE_\n    BO_TX_BU_\n    BA_DEF_REL_\n    BA_REL_\n    BA_DEF_DEF_REL_\n    BU_SG_REL_\n    BU_EV_REL_\n    BU_BO_REL_\n    SG_MUL_VAL_\n\nBS_:\n\nBU_: WaveSculptor200\n\n\nBO_ 128 IDInfo: 8 WaveSculptor200\n SG_ TritiumID : 0|32@1+ (1,0) [0|0] \"\" Vector__XXX\n SG_ SerialNumber : 32|32@1+ (1,0) [0|0] \"\" Vector__XXX\n\nBO_ 129 Status: 8 WaveSculptor200\n SG_ LimitReserved : 7|9@1+ (1,0) [0|511] \"On / Off\" Vector__XXX\n SG_ LimitIpmOrMotorTemp : 6|1@1+ (1,0) [0|1] \"On / Off\" Vector__XXX\n SG_ LimitBusVoltageLower : 5|1@1+ (1,0) [0|1] \"On / Off\" Vector__XXX\n SG_ LimitBusVoltageUpper : 4|1@1+ (1,0) [0|1] \"On / Off\" Vector__XXX\n SG_ LimitBusCurrent : 3|1@1+ (1,0) [0|1] \"On / Off\" Vector__XXX\n SG_ LimitVelocity : 2|1@1+ (1,0) [0|1] \"On / Off\" Vector__XXX\n SG_ LimitMotorCurrent : 1|1@1+ (1,0) [0|1] \"On / Off\" Vector__XXX\n SG_ LimitOutputVoltagePWM : 0|1@1+ (1,0) [0|1] \"On / Off\" Vector__XXX\n SG_ ErrorReserved : 25|7@1+ (1,0) [0|0] \"On / Off\" Vector__XXX\n SG_ ErrorMotorOverSpeed : 24|1@1+ (1,0) [0|1] \"On / Off\" Vector__XXX\n SG_ ErrorDesaturationFault : 23|1@1+ (1,0) [0|1] \"On / Off\" Vector__XXX\n SG_ Error15vRailUnderVoltage : 22|1@1+ (1,0) [0|1] \"On / Off\" Vector__XXX\n SG_ ErrorConfigRead : 21|1@1+ (1,0) [0|1] \"On / Off\" Vector__XXX\n SG_ ErrorWatchdogCausedLastReset : 20|1@1+ (1,0) [0|1] \"On / Off\" Vector__XXX\n SG_ ErrorBadMotorPositionHallSeq : 19|1@1+ (1,0) [0|1] \"On / Off\" Vector__XXX\n SG_ ErrorDcBusOverVoltage : 18|1@1+ (1,0) [0|1] \"On / Off\" Vector__XXX\n SG_ ErrorSoftwareOverCurrent : 17|1@1+ (1,0) [0|1] \"On / Off\" Vector__XXX\n SG_ ErrorHardwareOverCurrent : 16|1@1+ (1,0) [0|1] \"On / Off\" Vector__XXX\n SG_ ActiveMotor : 32|16@1+ (1,0) [0|0] \"\" Vector__XXX\n SG_ TxErrorCount : 48|8@1+ (1,0) [0|0] \"\" Vector__XXX\n SG_ RxErrorCount : 56|8@1+ (1,0) [0|0] \"\" Vector__XXX\n\nBO_ 130 BusMeasurement: 8 WaveSculptor200\n SG_ BusVoltage : 0|32@1- (1,0) [0|0] \"V\" Vector__XXX\n SG_ BusCurrent : 32|32@1- (1,0) [0|0] \"A\" Vector__XXX\n\nBO_ 131 VelocityMeasurement: 8 WaveSculptor200\n SG_ MotorVelocity : 0|32@1- (1,0) [0|0] \"rpm\" Vector__XXX\n SG_ VehicleVelocity : 32|32@1- (1,0) [0|0] \"m/s\" Vector__XXX\n\nBO_ 132 PhaseCurrentMeasurement: 8 WaveSculptor200\n SG_ PhaseCurrentB : 0|32@1- (1,0) [0|0] \"A_rms\" Vector__XXX\n SG_ PhaseCurrentC : 32|32@1- (1,0) [0|0] \"A_rms\" Vector__XXX\n\nBO_ 133 MotorVoltageVectorMeasurement: 8 WaveSculptor200\n SG_ Vq : 0|32@1- (1,0) [0|0] \"V\" Vector__XXX\n SG_ Vd : 32|32@1- (1,0) [0|0] \"V\" Vector__XXX\n\nBO_ 134 MotorCurrentVectorMeasurement: 8 WaveSculptor200\n SG_ Iq : 0|32@1- (1,0) [0|0] \"A\" Vector__XXX\n SG_ Id : 32|32@1- (1,0) [0|0] \"A\" Vector__XXX\n\nBO_ 135 BackEMFMeasurementPrediction: 8 WaveSculptor200\n SG_ BEMFq : 0|32@1- (1,0) [0|0] \"V\" Vector__XXX\n SG_ BEMFd : 32|32@1- (1,0) [0|0] \"V\" Vector__XXX\n\nBO_ 136 VoltageRail15VMeasurement: 8 WaveSculptor200\n SG_ Supply15V : 32|32@1- (1,0) [0|0] \"V\" Vector__XXX\n SG_ ReservedSupply15V : 0|32@1- (1,0) [0|0] \"\" Vector__XXX\n\nBO_ 137 VoltageRail3V31V9Measurement: 8 WaveSculptor200\n SG_ Supply1V9 : 0|32@1- (1,0) [0|0] \"V\" Vector__XXX\n SG_ Supply3V3 : 32|32@1- (1,0) [0|0] \"V\" Vector__XXX\n\nBO_ 138 Reserved0A: 8 WaveSculptor200\n SG_ Reserved0A0 : 0|32@1- (1,0) [0|0] \"\" Vector__XXX\n SG_ Reserved0A1 : 32|32@1- (1,0) [0|0] \"\" Vector__XXX\n\nBO_ 139 HeatsinkMotorTempMeasurement: 8 WaveSculptor200\n SG_ MotorTemp : 0|32@1- (1,0) [0|0] \"C\" Vector__XXX\n SG_ HeatsinkTemp : 32|32@1- (1,0) [0|0] \"C\" Vector__XXX\n\nBO_ 140 DspBoardTempMeasurement: 8 WaveSculptor200\n SG_ DspBoardTemp : 0|32@1- (1,0) [0|0] \"C\" Vector__XXX\n SG_ ReservedDspBoardTemp : 32|32@1- (1,0) [0|0] \"\" Vector__XXX\n\nBO_ 141 Reserved0D: 8 WaveSculptor200\n SG_ Reserved0D0 : 0|32@1- (1,0) [0|0] \"\" Vector__XXX\n SG_ Reserved0D1 : 32|32@1- (1,0) [0|0] \"\" Vector__XXX\n\nBO_ 142 OdometerBusAhMeasurement: 8 WaveSculptor200\n SG_ Odometer : 0|32@1- (1,0) [0|0] \"m\" Vector__XXX\n SG_ DCBusAh : 32|32@1- (1,0) [0|0] \"Ah\" Vector__XXX\n\nBO_ 151 SlipSpeedMeasurement: 8 WaveSculptor200\n SG_ SlipSpeed : 0|32@1- (1,0) [0|0] \"Hz\" Vector__XXX\n SG_ ReservedSlipSpeed : 32|32@1- (1,0) [0|0] \"\" Vector__XXX\n\n\n\nCM_ SG_ 128 TritiumID \"Device identifier. 0x00004003\";\nCM_ SG_ 128 SerialNumber \"Device serial number, allocated at manufacture.\";\nCM_ SG_ 129 ActiveMotor \"The index of the active motor currently being used.\";\nCM_ SG_ 129 TxErrorCount \"The DSP CAN transmission error counter (CAN 2.0)\";\nCM_ SG_ 129 RxErrorCount \"The DSP CAN receive error counter (CAN 2.0)\";\nCM_ SG_ 130 BusVoltage \"DC bus voltage at the controller.\";\nCM_ SG_ 130 BusCurrent \"Current drawn from the DC bus by the controller.\";\nCM_ SG_ 131 MotorVelocity \"Motor angular frequency in revolutions per minute.\";\nCM_ SG_ 131 VehicleVelocity \"Vehicle velocity in metres / second.\";\nCM_ SG_ 132 PhaseCurrentB \"RMS current in motor Phase B.\";\nCM_ SG_ 132 PhaseCurrentC \"RMS current in motor Phase C.\";\nCM_ SG_ 133 Vq \"Imaginary component of the applied non-rotating voltage vector to the motor.\";\nCM_ SG_ 133 Vd \"Real component of the applied non-rotating voltage vector to the motor.\";\nCM_ SG_ 134 Iq \"Imaginary component of the applied non-rotating current vector to the motor. This current produces torque in the motor and should be in phase with the back-EMF of the motor\";\nCM_ SG_ 134 Id \"Real component of the applied non-rotating current vector to the motor. This vector represents the field current of the motor.\";\nCM_ SG_ 135 BEMFq \"The peak of the phase to neutral motor voltage.\";\nCM_ SG_ 135 BEMFd \"By definition this value is always 0V.\";\nCM_ SG_ 136 Supply15V \"Actual voltage level of the 15V power rail.\";\nCM_ SG_ 137 Supply1V9 \"Actual voltage level of the 1.9V DSP power rail.\";\nCM_ SG_ 137 Supply3V3 \"Actual voltage level of the 3.3V power rail.\";\nCM_ SG_ 139 MotorTemp \"Internal temperature of the motor\";\nCM_ SG_ 139 HeatsinkTemp \"Internal temperature of Heat-sink (case).\";\nCM_ SG_ 140 DspBoardTemp \"Temperature of the DSP board.\";\nCM_ SG_ 142 Odometer \"Distance the vehicle has travelled since reset.\";\nCM_ SG_ 142 DCBusAh \"Charge flow into the controller DC bus from the time of reset.\";\nCM_ SG_ 151 SlipSpeed \"Slip speed when driving an induction motor.\";\nBA_DEF_ BO_  \"GenMsgCycleTime\" INT 2 50000;\nBA_DEF_ BU_  \"GenNodAutoGenSnd\" ENUM  \"No\",\"Yes\";\nBA_DEF_ BU_  \"GenNodAutoGenDsp\" ENUM  \"No\",\"Yes\";\nBA_DEF_  \"GenEnvVarEndingDsp\" STRING ;\nBA_DEF_  \"GenEnvVarEndingSnd\" STRING ;\nBA_DEF_  \"GenEnvVarPrefix\" STRING ;\nBA_DEF_DEF_  \"GenMsgCycleTime\" 100;\nBA_DEF_DEF_  \"GenNodAutoGenSnd\" \"Yes\";\nBA_DEF_DEF_  \"GenNodAutoGenDsp\" \"Yes\";\nBA_DEF_DEF_  \"GenEnvVarEndingDsp\" \"Dsp\";\nBA_DEF_DEF_  \"GenEnvVarEndingSnd\" \"Snd\";\nBA_DEF_DEF_  \"GenEnvVarPrefix\" \"Env\";\nBA_ \"GenMsgCycleTime\" BO_ 128 1000;\nBA_ \"GenMsgCycleTime\" BO_ 129 200;\nBA_ \"GenMsgCycleTime\" BO_ 130 200;\nBA_ \"GenMsgCycleTime\" BO_ 131 200;\nBA_ \"GenMsgCycleTime\" BO_ 132 200;\nBA_ \"GenMsgCycleTime\" BO_ 133 200;\nBA_ \"GenMsgCycleTime\" BO_ 134 200;\nBA_ \"GenMsgCycleTime\" BO_ 135 200;\nBA_ \"GenMsgCycleTime\" BO_ 136 1000;\nBA_ \"GenMsgCycleTime\" BO_ 137 1000;\nBA_ \"GenMsgCycleTime\" BO_ 138 0;\nBA_ \"GenMsgCycleTime\" BO_ 139 1000;\nBA_ \"GenMsgCycleTime\" BO_ 140 1000;\nBA_ \"GenMsgCycleTime\" BO_ 141 1000;\nBA_ \"GenMsgCycleTime\" BO_ 142 1000;\nBA_ \"GenMsgCycleTime\" BO_ 151 200;\nSIG_VALTYPE_ 130 BusVoltage : 1;\nSIG_VALTYPE_ 130 BusCurrent : 1;\nSIG_VALTYPE_ 131 MotorVelocity : 1;\nSIG_VALTYPE_ 131 VehicleVelocity : 1;\nSIG_VALTYPE_ 132 PhaseCurrentB : 1;\nSIG_VALTYPE_ 132 PhaseCurrentC : 1;\nSIG_VALTYPE_ 133 Vq : 1;\nSIG_VALTYPE_ 133 Vd : 1;\nSIG_VALTYPE_ 134 Iq : 1;\nSIG_VALTYPE_ 134 Id : 1;\nSIG_VALTYPE_ 135 BEMFq : 1;\nSIG_VALTYPE_ 135 BEMFd : 1;\nSIG_VALTYPE_ 136 Supply15V : 1;\nSIG_VALTYPE_ 136 ReservedSupply15V : 1;\nSIG_VALTYPE_ 137 Supply1V9 : 1;\nSIG_VALTYPE_ 137 Supply3V3 : 1;\nSIG_VALTYPE_ 138 Reserved0A0 : 1;\nSIG_VALTYPE_ 138 Reserved0A1 : 1;\nSIG_VALTYPE_ 139 MotorTemp : 1;\nSIG_VALTYPE_ 139 HeatsinkTemp : 1;\nSIG_VALTYPE_ 140 DspBoardTemp : 1;\nSIG_VALTYPE_ 140 ReservedDspBoardTemp : 1;\nSIG_VALTYPE_ 141 Reserved0D0 : 1;\nSIG_VALTYPE_ 141 Reserved0D1 : 1;\nSIG_VALTYPE_ 142 Odometer : 1;\nSIG_VALTYPE_ 142 DCBusAh : 1;\nSIG_VALTYPE_ 151 SlipSpeed : 1;\nSIG_VALTYPE_ 151 ReservedSlipSpeed : 1;\n</code></pre>"},{"location":"Motor_Controllers/WaveSculptor200/User_Manual/Driver_Controls.html","title":"Driver Controls","text":"<p>Wire and install the hardware driver controls as described in the Driver Controls User's Manual or use your own driver control that provide the necessary capabilities to run the WaveSculptor.</p> <p>Test the driver controls as described in the User Manual.  </p>"},{"location":"Motor_Controllers/WaveSculptor200/User_Manual/Driving.html","title":"Driving","text":""},{"location":"Motor_Controllers/WaveSculptor200/User_Manual/Driving.html#warnings","title":"Warnings","text":"<p>Perform the following tests in a location off public roads, in an area free of obstructions.  Take all appropriate safety precautions when performing this testing.</p> <p>Using the Windows configuration software, set the vehicle mass to the actual mass of the vehicle, so that the velocity control loop will be tuned optimally.</p>"},{"location":"Motor_Controllers/WaveSculptor200/User_Manual/Driving.html#procedure","title":"Procedure","text":"<p>Perform the same checks that were performed with the vehicle off the ground:</p> <ul> <li> Driving forwards</li> <li> Car coasts to a stop when accelerator pedal is lifted</li> <li> Driving in reverse</li> <li> Car coasts to a stop when accelerator pedal is lifted</li> <li> Appropriate action happens when brake pedal is pushed</li> <li> If your driver controls is configured to use regen, it works correctly in forwards</li> <li> If your driver controls is configured to use regen, it works correctly in reverse</li> <li> Selecting Neutral on the driver controls makes the car coast to a stop</li> <li> Turning off the key makes the car coast to a stop</li> </ul>"},{"location":"Motor_Controllers/WaveSculptor200/User_Manual/Driving.html#on-road-testing","title":"On Road testing","text":"<p>After meeting all the relevant regulations in your country for vehicle registration and safety checks, you should be ready to drive your car out in the real world!  We suggest gradually building up your confidence in the new drive system with a series of tests, at increasing speeds and power levels.  </p>"},{"location":"Motor_Controllers/WaveSculptor200/User_Manual/Getting_Started.html","title":"Getting Started","text":"<p>Work through this manual in sequence, using this checklist as you go:</p> <ul> <li> Items arrived in good condition</li> <li> Read and understood the datasheet</li> <li> Read and understood this document</li> <li> A good mounting location chosen</li> <li> Cooling system installed and purged of air</li> <li> Controller mounted into place</li> <li> CAN Bus &amp; 12V supply wiring installed</li> <li> PC software installed</li> <li> 12V supply and CAN communications functioning</li> <li> Motor sense connections completed</li> <li> Motor phase cables connected</li> <li> Precharge system working</li> <li> HV DC cables connected</li> <li> PhasorSense or RotorSense routines run and saved</li> <li> Motor test at low voltage, wheels off ground, using PC software</li> <li> Motor test at low voltage, wheels off ground, using driver controls hardware</li> <li> Motor test at high voltage, wheels off ground, using PC software</li> <li> Motor test at high voltage, wheels off ground, using driver controls hardware</li> <li> Private road test</li> <li> On-road vehicle test</li> </ul>"},{"location":"Motor_Controllers/WaveSculptor200/User_Manual/Getting_Started.html#unpacking-and-preparation","title":"Unpacking and Preparation","text":"<p>Check that all items on the packing list are in the box and undamaged.  Contact the shipping company and Prohelion if there is obvious outer box damage during transport.  Contact Prohelion immediately if there is a discrepancy with the items or other damage.</p> <p>You will require the following specialised tools for installing the WaveSculptor motor controller:</p> <ul> <li> Allen (hex) keys</li> <li> Molex MicroFit crimp tool</li> <li> Cable cutters</li> <li> Hex lug or hydraulic crimp tool</li> <li> Various electronics hand tools for low power cable cutting &amp; stripping</li> </ul>"},{"location":"Motor_Controllers/WaveSculptor200/User_Manual/High_Power_Connections.html","title":"High Power Connections","text":"<p>It is important to correctly terminate the high power wiring for successful long-term operation of the controller.  DC battery and AC motor phase connections should be crimped to bolt lug crimp terminals.  The copper studs in the busbars of the WaveSculptor have a metric M8 thread, so use a lug designed for this size bolt, with an 8.5mm hole.  </p> <p>High power connections should not be soldered for vehicle applications, as the solder wicks up inside the copper strands and creates a stress point, which can fatigue and break due to the vibration present in a vehicle. For a guide to good quality crimping of the high power connections, please read Appendix B of this document.</p> <p>Copper oxidation is a threat to the long-term reliability of both the crimp and the bolted joint to the controller.  Use a thin smear of anti-oxidation electrical jointing compound between the busbar and the crimp lug when bolting the cable to the controller, as shown in the diagram below.  A small amount has already been applied in the factory to minimise corrosion in the time between manufacture and first assembly of the unit in your vehicle.</p> <p></p> Copper Oxidation Prevention <p>The copper pressfit studs are permanently attached to the busbars.  </p> <p>To assemble the bolted joint follow these steps:</p> <ul> <li>Apply a thin smear of electrical jointing compound to the busbar</li> <li>Route the cable in through the conduit fitting and locate the crimp lug down over the stud</li> <li>Place a plain (flat) washer and a spring washer on top of the lug</li> <li>Thread a nut over the stud</li> <li>Use a torque wrench to tighten the nut to 10Nm (7.5 ft.lbs)</li> </ul>"},{"location":"Motor_Controllers/WaveSculptor200/User_Manual/High_Power_Connections.html#cable","title":"Cable","text":"<p>The cable used to connect to the high power terminals must be rated for the full DC battery voltage as a minimum.  600/1000V cable is suitable.</p> <p>The current rating of the cable will depend on your expected load and duty cycle for your driving habits in your vehicle.  The WaveSculptor bolt terminal area is designed to accept up to 35mm<sup>2</sup> cable with an outside diameter of up to 13.5mm.  Prohelion suggests the use of at least 110\u00b0C rated PVC cable (note that standard PVC is 90\u00b0C rated) to allow a longer duration of peak power output without exceeding the cable temperature rating.  </p> <p>The cable should have orange coloured insulation.  This is required by the NCOP14 standard for EV conversions in Australia, but is a good idea in any case.  This is what is used in the Prius and other hybrid vehicles, and emergency response personnel are trained to not cut through orange cables.  Use a short piece of red or black insulation at the ends of the orange cable to indicate polarity.</p> <p>Use of flexible cable with a high number of fine strands is advised, to help with cable routing and reduce strain and fatigue on the terminations.  Prohelion recommends using \u201cZDFX\u201d double-insulated 0.6/1kV 110\u00b0C rated cable from Tycab Australia, which is made with 1120x 0.2mm strands, resulting in a flexible cable.  It is available in orange insulation.  Similar cable will be available from alternative suppliers in other countries.</p>"},{"location":"Motor_Controllers/WaveSculptor200/User_Manual/High_Power_Connections.html#motor-inductance","title":"Motor Inductance","text":"<p>The WaveSculptor requires a minimum of 50\u00b5H inductance (phase \u2013 neutral) per phase to operate correctly. Please ensure that sufficient external inductance has been added if your motor does not have at least this amount of inductance already.  External inductors will most likely only be required on ultra-high efficiency ironless BLDC type motors.</p> <p>These external inductors must be rated to the full motor current and have windings insulated to the full DC bus voltage.</p>"},{"location":"Motor_Controllers/WaveSculptor200/User_Manual/High_Power_Connections.html#high-power-connections_1","title":"High Power Connections","text":"<p>The positions of the busbars for the various connections are shown in the diagram below.  The recommended cable assembly order, to make cable routing inside the controller as easy as possible, is MOTOR C, MOTOR B, MOTOR A, DC POS, DC NEG.</p> <p></p> High Power Connections"},{"location":"Motor_Controllers/WaveSculptor200/User_Manual/High_Power_Connections.html#testing","title":"Testing","text":"<p>At this point, do not connect the other end of the high power DC NEG and DC POS cables to your precharge circuit or batteries.  You will need to connect them to a low-voltage supply of power for initial testing, which is detailed in the Motor Setup &amp; Testing section of this document.</p>"},{"location":"Motor_Controllers/WaveSculptor200/User_Manual/High_Power_Connections.html#precharge","title":"Precharge","text":"<p>The WaveSculptor has 800\u00b5F of extremely low-impedance capacitance across the DC bus input connections. An external precharge circuit is mandatory.</p> <p>When not driving a motor, the WaveSculptor draws minimal power from the DC bus, with only a high-value discharge resistor to bleed charge. Therefore, careful attention should be given when working on the controller to ensure that the capacitors have been discharged first.  Note that these capacitors hold over 80 Joules of energy and take up to 10 minutes to discharge to safe levels.</p> <p>Prohelion can provide a circuit to implement the precharge function, as part of our Pack-Master BMS system.  Please refer to the product webpage for more information.  There are a variety of other ways to implement precharge, but many do not automatically check for faults and may overheat themselves in the event of a problem.</p>"},{"location":"Motor_Controllers/WaveSculptor200/User_Manual/High_Power_Connections.html#fusing","title":"Fusing","text":"<p>At least one appropriately rated fuse must be installed in the high voltage DC circuit.  This fuse must be rated to the highest expected DC voltage.  AC rated fuses are not appropriate unless they have a DC rating as well.  </p> <p>Choosing the current rating of the fuse depends on your expected load, the maximum fault current in the battery system, duration of loads, cable sizes, and several other factors.  It is beyond the scope of this document to detail fuse selection for your vehicle.</p> <p>Note that the WaveSculptor can be programmed to limit the current it draws from the DC bus connection, which may simplify fuse, contactor and wiring selection. However, this will also have the effect of limiting total system power throughput, so be aware that when setting it to less than 100% that you may compromise your vehicle performance.</p>"},{"location":"Motor_Controllers/WaveSculptor200/User_Manual/High_Power_Connections.html#hv-isolation","title":"HV Isolation","text":"<p>The WaveSculptor has an isolation barrier rated to 1kV continuously between the CAN bus, the DC bus, and the Motor position connection. This helps minimise damage in the event of a fault, and also allows safe connection of the high voltage battery pack.</p> <p>Prohelion recommends that the CAN bus be operated at the system ground potential, with CAN Ground connected to the vehicle chassis at some point in your system.</p> <p>The battery ground, high-voltage DC connections, and motor phases should be isolated from the vehicle chassis. This is so that a single fault anywhere in the high voltage system will not result in a high voltage potential being present between any wiring and the chassis of the vehicle.</p> <p>Please refer to any relevant regulations governing this type of connection, such as (in Australia) the NCOP14 standard for EV conversions.</p>"},{"location":"Motor_Controllers/WaveSculptor200/User_Manual/High_Power_Testing.html","title":"High Power Testing","text":""},{"location":"Motor_Controllers/WaveSculptor200/User_Manual/High_Power_Testing.html#connections","title":"Connections","text":"<p>Make sure your precharge circuit, contactors, and fusing are in place.  Check the polarity of the supply cables to the WaveSculptor.  Take all appropriate safety precautions when working on the HV circuitry.  Depending on the legislation in your country, you may require a licensed electrician to work on the high voltage parts of the system.</p> <p>Making sure that all contactors are off, in the safe state, make the bolt connections to the DC POS and DC NEG terminals of the WaveSculptor.</p>"},{"location":"Motor_Controllers/WaveSculptor200/User_Manual/High_Power_Testing.html#pc-software-control","title":"PC Software Control","text":"<p>Move the CAN cable and termination resistor from the hardware driver controls and reconnect it to the CAN-Ethernet bridge.  Run the PC software.  Run through the same checks as outlined in the previous 24V low voltage testing section.  </p>"},{"location":"Motor_Controllers/WaveSculptor200/User_Manual/High_Power_Testing.html#driver-controls","title":"Driver Controls","text":"<p>Reconnect the CAN cable and termination resistor to the hardware driver controls.  Run through the same checks as listed above in the 24V driver controls hardware testing.  </p> <p>Test at least the following functionality:</p> <ul> <li> Driving forwards</li> <li> Car coasts to a stop when accelerator pedal is lifted</li> <li> Driving in reverse</li> <li> Car coasts to a stop when accelerator pedal is lifted</li> <li> Appropriate action happens when brake pedal is pushed</li> <li> If your driver controls is configured to use regen, it works correctly in forwards</li> <li> If your driver controls is configured to use regen, it works correctly in reverse</li> <li> Selecting Neutral on the driver controls makes the car coast to a stop</li> <li> Turning off the key makes the car coast to a stop</li> </ul>"},{"location":"Motor_Controllers/WaveSculptor200/User_Manual/Motor_Sense_Connections.html","title":"Motor Sense Connections","text":"<p>The WaveSculptor200 requires a position sensor to be able to control the motor.  It can also measure the temperature of the motor, and gradually reduce the motor current if this temperature rises towards a user-programmable threshold.  </p> <p>Since there are a large variety of possible combinations of position and temperature sensors, Prohelion has implemented the interface on the motor controller in a generic manner.  Small adapter circuit boards, suitable for mounting directly inside the motor terminal box, are used to adapt the sensors in that motor to the interface required by the WaveSculptor200.  This also provides a robust signalling mechanism (isolated, differential) for the longest length of cable possible.</p> <p>It is expected that the motor sense adapter board will be located inside the motor terminal box, and connect to the WaveSculptor200 via a twisted-pair cable routed along the conduit with the motor phase wiring.</p> <p>The WaveSculptor provides isolated, regulated +5V and +12V DC to power the external adapter.  Refer to the datasheet for specifications on these supplies.</p> <p>The WaveSculptor provides four isolated differential inputs for information from the motor.  Three of these are routed to timer/capture peripherals in the main processor, and are normally used for three Hall-effect position sensors, or the A, B and Index channels of a quadrature encoder.  The fourth channel is routed to a UART serial receiver, and expects digital data.  Depending on the adapter board, this data may contain temperature, position, velocity, or a combination of all three.</p> <p>A brief datasheet for each adapter option is available on the Prohelion website.  If your motor requires an adapter that is not yet available, please contact Prohelion to enquire about development, as new adapters are simple and low-cost to design.</p>"},{"location":"Motor_Controllers/WaveSculptor200/User_Manual/Motor_Sense_Connections.html#connector-pinout","title":"Connector Pinout","text":"<p>The connector used on the WaveSculptor200 for the connection to the motor sense adapter board is a 14-way 3mm pitch Molex MicroFit connector.  The pinout is shown below, as viewed from the wire side \u2013 as you would look at it while inserting crimps.  Please refer to Appendix B for an overview of correct crimping technique, as poor crimps will cause unreliable operation.</p> <p></p> WaveSculptor 200 Motor Controller Connector <p>The wiring for this connector should be implemented with twisted pairs, as the signal inputs are differential.  Prohelion recommends using Belden 9506 type cable (shielded 6 pair) for this connection, with suggested cable colours shown above.</p> <p>Make sure to wire the cable with the pair orientation correct, with each + and \u2013 signal (eg Serial RX+ and Serial RX-) twisted together.</p>"},{"location":"Motor_Controllers/WaveSculptor200/User_Manual/Motor_Sense_Connections.html#motion-position-sense","title":"Motion Position Sense","text":""},{"location":"Motor_Controllers/WaveSculptor200/User_Manual/Motor_Sense_Connections.html#bldc-motor","title":"BLDC Motor","text":"<p>For operating Brushless DC (BLDC) and Permanent Magnet Synchronous (PMSM) type motors, the WaveSculptor requires three motor position sensing inputs, commonly provided using Hall-effect switches embedded in the motor.</p> <p>Please note that the relation between each Hall-effect input and a motor output phase, as well as the polarity of the Hall-effect input signal, does not matter. The WaveSculptor will detect these relationships when running its initial setup and configuration routine (PhasorSense). The only requirement for these signals is that they have a fixed alignment (ideally, a 0\u00b0 offset) with the zero-crossing point of the back-EMF waveform of the motor, and that the signals are offset from each other by 120\u00b0. This is where most motors will be configured by default.</p>"},{"location":"Motor_Controllers/WaveSculptor200/User_Manual/Motor_Sense_Connections.html#induction-motor","title":"Induction Motor","text":"<p>For operating Induction motors, the WaveSculptor requires a quadrature (A + B channel) indexed (+ I channel) incremental encoder.  If you have purchased your motor through Prohelion, this encoder will already be fitted in place.</p> <p>The encoder must be chosen to give enough speed resolution to operate successfully.  This can depend somewhat on your expected operating rpm, but as a good all-round solution a 256 count encoder will be suitable.</p>"},{"location":"Motor_Controllers/WaveSculptor200/User_Manual/Motor_Sense_Connections.html#ipm-motor","title":"IPM Motor","text":"<p>For operating Interior Permanent Magnet motors, as well as some types of BLDC motors, a resolver is a suitable position sensor.  Prohelion can provide a motor adapter suitable for driving and interpreting data from this type of sensor.</p>"},{"location":"Motor_Controllers/WaveSculptor200/User_Manual/Motor_Sense_Connections.html#motor-temperature-sense","title":"Motor Temperature Sense","text":"<p>Prohelion 's motor adapters are currently available for use with NTC thermistor and Pt100 temperature sensor elements.  Variations are possible to accommodate thermocouple and LM35-type semiconductor sensors also.</p>"},{"location":"Motor_Controllers/WaveSculptor200/User_Manual/Motor_Setup_And_Testing.html","title":"Motor Setup and Testing","text":""},{"location":"Motor_Controllers/WaveSculptor200/User_Manual/Motor_Setup_And_Testing.html#low-power-setup","title":"Low Power Setup","text":"<p>At this stage, put the car on a vehicle lift, or use a secure method to lift the drive wheels from the ground.  If your vehicle is equipped with a manual gearbox, putting the gearbox in neutral may be an adequate substitute.  </p> <p>A low voltage supply should be connected to perform the next stage of testing.  Note that if it is necessary to run these tests again later, they may be run from the high voltage pack \u2013 it is not necessary to disconnect everything and use a low voltage setup.  At this point however, the low voltage supply should be used as a safer option until it is known that everything in the system is working correctly.</p> <p>A suitable low voltage supply is a pair of 12V batteries in series.  Make sure to fuse them correctly, and use your precharge circuit.  A power supply with current limiting is the best option if one is available.</p> <p>Run the PC software, and provide 12V along the CAN cable to power up the motor controller electronics.  You should see telemetry values updating on the PC.  Connect the 24V to the high power section of the motor controller.  You should see the reported battery voltage on the PC show the correct value.</p>"},{"location":"Motor_Controllers/WaveSculptor200/User_Manual/Motor_Setup_And_Testing.html#phasorsense-bldc-motors","title":"Phasorsense - BLDC Motors","text":"<p>If you are using a BLDC or other permanent magnet motor, refer to the software user manual for the procedure to run PhasorSense.  This routine identifies the relationship between motor phases and hall position sensors.  </p> <p>Next, run the parameter extraction routine, which calculates motor parameters.  Save the results into one of the ten available motor configuration slots.  In the general configuration screen, set this motor slot as the \u201cActive Motor\u201d.</p> <p>For bench testing with an unloaded motor, set the vehicle mass in the config screen to 30kg.  Using the actual vehicle mass when running with an unloaded motor will cause the velocity control loop to overshoot and oscillate around the setpoint.</p>"},{"location":"Motor_Controllers/WaveSculptor200/User_Manual/Motor_Setup_And_Testing.html#imextract-induction-motors","title":"ImExtract - Induction Motors","text":"<p>If you are using an induction motor, refer to the software user manual for the procedure to run ImExtract.  </p> <p>This routine calculates motor parameters.  Save the results into one of the ten available motor configuration slots.  In the general configuration screen, set this motor slot as the \u201cActive Motor\u201d.</p> <p>For bench testing with an unloaded motor, set the vehicle mass in the config screen to 30kg.  Using the actual vehicle mass when running with an unloaded motor will cause the velocity control loop to overshoot and oscillate around the setpoint.</p>"},{"location":"Motor_Controllers/WaveSculptor200/User_Manual/Motor_Setup_And_Testing.html#low-power-testing-pc-control","title":"Low Power testing - PC Control","text":"<p>This test will check that the motor spins and is configured correctly.  </p> <p>Open the controls screen in the PC software (View \u2192 Controls). There are three sliders, setting Motor Current, Motor Velocity, and Bus (battery) current respectively.  The motor controller will use up to whatever motor current you have set to try and achieve the requested velocity.  The motor current will be limited if the battery current reaches the bus current setpoint.</p> <p>If using batteries as the power source, regenerative braking (regen) can also be tested.  Do NOT test regen braking if using a power supply for the 24V source, as you will force current back into the supply and damage it.</p> <p>The motor controller will regen if the velocity is set to a lower speed than the motor is actually moving, and motor current is above zero.  </p> <p>To stop without regen braking:</p> <p>1.  Zero the motor current, then 2.  Zero the velocity</p> <p>To stop with regen braking:</p> <p>1.  Set motor current to your desired regen current, then 2.  Zero the velocity</p> <p>Now that the motor is configured correctly, set the Bus Current to 100%, if it is not already.  Change the Velocity slider to around 10%.  Now, gradually increase the Motor Current slider, and the motor should smoothly accelerate to a moderate speed.</p> <p>Zero the motor current, then zero the velocity, and the motor should smoothly coast to a stop.  </p> <p>Now set the velocity slider to 100%.  Once again, gradually increase the motor current.  The motor should smoothly accelerate to a faster speed than before.  Zero the motor current, then zero the velocity. </p> <p>If using batteries, now test regen braking.  Set velocity to 100%.  Gradually increase motor current.  Now, with the motor spinning, set motor current to around 10%.  Zero the velocity.  The motor will regen brake to a halt.  Since it does not have the mass of a vehicle to damp the system, it may then oscillate slightly forwards and backwards \u2013 this should be relatively minimal if the vehicle mass was set to 30kg as outlined in the previous section.  Zero the motor current when near zero speed to stop this happening.</p>"},{"location":"Motor_Controllers/WaveSculptor200/User_Manual/Motor_Setup_And_Testing.html#low-power-testing-driver-controls-hardware","title":"Low Power Testing - Driver Controls Hardware","text":"<p>Remove the CAN cable and termination resistor from the CAN-Ethernet bridge, and connect them both to the EV Driver Controls hardware.  </p> <p>Provide 12V power to the driver controls.  Go through the startup sequence as described in the Driver Controls User's Manual.  Depending on the exact firmware you have this will usually involve turning the key to the start position, and selecting forward gear in the driver controls. </p> <p>Use the accelerator (gas) pedal to run the motor.  Complete the following checks:</p> <ul> <li> Driving forwards</li> <li> Car coasts to a stop when accelerator pedal is lifted</li> <li> Driving in reverse</li> <li> Car coasts to a stop when accelerator pedal is lifted</li> <li> Appropriate action happens when brake pedal is pushed</li> <li> If your driver controls is configured to use regen, it works correctly in forwards</li> <li> If your driver controls is configured to use regen, it works correctly in reverse</li> <li> Selecting Neutral on the driver controls makes the car coast to a stop</li> <li> Turning off the key makes the car coast to a stop</li> </ul>"},{"location":"Motor_Controllers/WaveSculptor200/User_Manual/Mounting.html","title":"Mounting","text":""},{"location":"Motor_Controllers/WaveSculptor200/User_Manual/Mounting.html#choosing-a-location","title":"Choosing a Location","text":"<p>Careful attention should be paid to positioning the WaveSculptor correctly, to ensure optimum performance. The main criteria for choosing a good mounting location are vibration, water spray, cooling layout, and cable positioning.</p> <p>Although the Prohelion WaveSculptor is rated for use in water spray environments, it is preferable to locate the controller in an area that won't be directly impacted with water jets coming in through the grille of your car at highway speeds.  Locating the WaveSculptor in the engine bay area is fine, but try to keep it out of the most exposed areas.</p> <p>The WaveSculptor should ideally be mounted in a horizontal position, but vertical mount is also acceptable if the long axis of the controller is horizontal.  Do not mount the controller with the long axis vertical (ie, conduit exiting top or bottom) as water may pool in the end areas of the controller and eventually seep into the interior.  This position will also trap air in the cooling system.</p> <p></p> Mounting Illustration <p>The Cooling section of this document has further details, but as an overview the controller should not be the highest point in the liquid cooling system, or bleeding the cooling system of air bubbles will be difficult.  Keep this in mind when choosing a location.</p> <p>The WaveSculptor has been designed with all cables and connections to the device at one end, to allow simplified positioning in your vehicle.  The 40mm orange conduit that contains the motor and battery cabling can be quite stiff, and has a minimum bend radius of around 250mm.  Make sure your chosen position allows room at the connection end of the controller for conduit and cooling connections.</p>"},{"location":"Motor_Controllers/WaveSculptor200/User_Manual/Mounting.html#environmental","title":"Environmental","text":"<p>The WaveSculptor is rated to withstand water spray from any angle.  Meeting this rating requires permanently gluing the motor, battery and CAN bus conduit into their fittings in the end panel of the motor controller using standard plumbing PVC pipe cement.  </p> <p>If the conduit is not glued, then a reduced environmental rating applies, where the controller is immune to low velocity splashing water only.  This may be acceptable if a mounting location is chosen carefully.</p>"},{"location":"Motor_Controllers/WaveSculptor200/User_Manual/Mounting.html#dimensions-and-tolerances","title":"Dimensions and Tolerances","text":"<p>Before final mounting of the controller in the vehicle, connect and fill the liquid cooling system as shown in the next section of this document.  The controller needs to be tilted to fully bleed air bubbles from the system.</p> <p>The WaveSculptor is mounted with a three-point mount using rubber standoffs to help isolate vehicle vibration from the controller electronics.  Refer to the drawing below for mounting hole locations, which should be fitted with an M6 insert or nut.  </p> <p></p> WaveSculptor 200 Motor Controller Dimensions <p>Three M6 thread shoulder screws and washers are provided with the controller for mounting purposes, and the shoulder design means that when fully tightened, the rubber grommet compression is correct \u2013 the shoulder on the screw prevents over-compressing the grommet.  Tighten these screws to 10Nm, using Loctite 243 or similar retaining compound to prevent them working loose.</p>"},{"location":"Motor_Controllers/WaveSculptor200/User_Manual/PC_Software.html","title":"PC Software","text":"<p>WaveSculptor Software is now bundled in Prohelion Profinity</p> <p>To download the PC Software to configure your WaveSculptor, download Profinity and configure a WaveSculptor in your Profile.</p> <p>Refer to the Software Download section on the Prohelion Website for the Configuration &amp; Setup software tool download, while you can download the Configuration Tools separately, we recommend Prohelion Profinity, which integrates the tools as well as a number of other useful utilities.</p> <p>Refer to the Software User's Manual for installation and usage instructions.</p>"},{"location":"Motor_Controllers/WaveSculptor200/User_Manual/PC_Software.html#ethernet-bridge-installation","title":"Ethernet Bridge Installation","text":"<p>Refer to the CAN-Ethernet bridge User's Manual for installation and setup of this piece of hardware.</p> <p>Connect the Ethernet bridge via a CAN bus cable to the WaveSculptor. Use 120 ohm termination resistors between the CAN-H and CAN-L lines at both items.</p> <p></p> CAN Network"},{"location":"Motor_Controllers/WaveSculptor200/User_Manual/PC_Software.html#low-voltage-and-can-bus-testing","title":"Low Voltage and CAN Bus Testing","text":"<p>Provide 12V DC to the CAN bus adapter at the CAN-Ethernet Bridge, to power up both the Ethernet Bridge and the WaveSculptor control electronics. </p> <p>If everything is connected correctly, you should see telemetry values appearing and updating several times per second in the PC software window.</p>"},{"location":"Motor_Controllers/WaveSculptor22/Datasheet/index.html","title":"WaveSculptor22 Motor Drive Datasheet","text":"<p>This document describes the specifications, performance and properties of the Prohelion WaveSculptor 22 Motor Controller.</p> <p>For more details on communications, mechanical positioning and mounting, wiring and precharge, cooling, and installation, please refer to the User's Manual document available on the Prohelion website.</p> <p>Operating the controller beyond the limits specified in this document will result in the voiding of the controller warranty.  Prohelion accepts no responsibility for events caused as a result of operating the controller beyond the limits specified in this document. Note that the specifications in this document are subject to change at any time due to product improvement.</p> <p></p> WaveSculptor22 <p>The WaveSculptor22 is built using SN100C lead-free solder from Nihon Superior Co., Japan.</p>"},{"location":"Motor_Controllers/WaveSculptor22/Datasheet/Control_And_Telemetry_Interface.html","title":"Control and Telemetry Interface","text":"<p>The WaveSculptor receives commands, and transmits telemetry values, using a CAN bus connection.  No other interface is provided.  Low-voltage DC power must be provided along the CAN bus cable to operate the control electronics of the WaveSculptor.</p> Supply Units Notes: <code>CAN bus supply voltage minimum:</code> 9 V Note <sup>1</sup> <code>CAN bus supply voltage maximum:</code> 15 V Note <sup>1</sup> <code>CAN bus supply voltage nominal:</code> 13.8 V Note <sup>1</sup> <code>CAN bus supply power maximum:</code> 4.5 W <code>CAN bus data rate maximum:</code> 1000 kbps Note <sup>2</sup> <code>CAN bus isolation:</code> 1000 V Note <sup>3</sup> <p>NOTES:</p> <ol> <li> <p>Prohelion recommends providing the CAN bus supply with 13.8V, using a DC/DC converter and a backup lead-acid battery.  This arrangement, when properly implemented, gives a supply that can tolerate failures and still operate the controller successfully for a short period of time.\u00a0\u21a9\u21a9\u21a9</p> </li> <li> <p>The data rate used for CAN bus activity is set during configuration and setup of the controller.  Factory default for all Prohelion devices is 500 kbits per second.\u00a0\u21a9</p> </li> <li> <p>The CAN bus data connection and power supply are isolated from the high-power DC bus to this continuous voltage rating.  Please refer to the isolation section in the User Manual (under High Power Connections) regarding recommended earthing and connection practices.\u00a0\u21a9</p> </li> </ol>"},{"location":"Motor_Controllers/WaveSculptor22/Datasheet/DC_Bus.html","title":"DC Bus","text":"<p>The DC bus connection provides power to the controller during normal (motoring) operation, and accepts power from the controller during regenerative braking operation.  It is expected to be connected to a battery pack through a precharge circuit and a fuse.</p> Supply Units Notes: <code>Continuous bus voltage minimum:</code> 0 V Note <sup>1</sup> <code>Continuous bus voltage maximum:</code> 165 V <code>Instantaneous bus voltage maximum:</code> 175 V Note <sup>2</sup> <code>Instantaneous bus current maximum (drive):</code> 122 A Note <sup>3</sup>, <sup>4</sup> <code>Instantaneous bus current maximum (regen):</code> -122 A Note <sup>3</sup>, <sup>4</sup> <p>NOTES:</p> <ol> <li> <p>The WaveSculptor control electronics operate from low-voltage DC supplied along the CAN bus cable, not from the high-voltage DC bus.  Therefore, the supply to the main power stage (via the DC bus) has no operating minimum voltage.\u00a0\u21a9</p> </li> <li> <p>The WaveSculptor uses 200V MOSFETs as the power switching elements. Exceeding this voltage across the device for even a short interval will result in catastrophic failure of the motor controller.  The WaveSculptor contains sufficient internal capacitance, and sufficiently rapid detection circuitry, such that it can protect itself against a self-imposed worst-case situation during normal operation.  This situation is regenerative braking at full current, at maximum continuous bus voltage, and having the DC bus connection broken or removed.  This situation can occur as a result of the DC bus protection contactor opening, the battery fuse blowing, or a loose connection in the vehicle wiring. Operating with higher DC bus voltages than the continuous voltage maximum could result in this self-protection mechanism failing to shut down the controller in time, resulting in the destruction of the controller.\u00a0\u21a9</p> </li> <li> <p>The instantaneous current rating of the DC bus is related to the highest power drive situation, which is driving at full motor current and full speed.  In this case, the bus current will be \u221a3 / \u221a2 * RMS motor current maximum (100A), giving a  current of 122A DC.  The equivalent factors apply for regenerative braking. Although the controller is capable of processing this bus current, the motor impedance (power factor) will limit the current at high speed, therefore limiting the bus current.  Modelling of your motor impedance in the drive system should be performed to calculate peak power.\u00a0\u21a9\u21a9</p> </li> <li> <p>The maximum DC bus current can be limited by the WaveSculptor under software control, and is adjustable dynamically via a command on the CAN bus during operation to anywhere between 0 and 100% of full current.  This feature can be used to limit the current capability and sizing of battery packs, battery wiring, battery fusing, and contactors.\u00a0\u21a9\u21a9</p> </li> </ol>"},{"location":"Motor_Controllers/WaveSculptor22/Datasheet/Efficiency.html","title":"Efficiency","text":"<p>To estimate an operating point efficiency of the WaveSculptor, refer to the efficiency map below.  This plot is generated for a DC bus voltage of 160V, assuming a CSIRO 'surface' type wheel motor.  Motor efficiencies are not included in the plot.</p> <p>The efficiency (in percent) is shown using the red lines, and the power being processed by the WaveSculptor (in kW) using the green lines. </p> <p>In a typical ultra high efficiency car such as a solar car with a mass of 275kg and a wheel radius of 250mm, the maximum plot values of 150rad/s and 120Nm correspond to a maximum speed of 135km/h and an acceleration of 0.16g respectively.</p> <p>As an example, for a typical highway cruise setting of 20Nm and 100rad/s, the power being processed by the WaveSculptor is just over 2kW, at an efficiency of just over 99%.</p> <p></p> Predicted efficiency map of the WaveSculptor Controller with a 160V DC Bus <p>These efficiency maps were generated using an accurate mathematical model of the WaveSculptor\u2019s power stage, with individual loss components confirmed using laboratory testing.</p>"},{"location":"Motor_Controllers/WaveSculptor22/Datasheet/Mechanical_and_Environmental.html","title":"Mechanical and Environmental","text":"<p>The WaveSculptor controller is mounted into position using tapped holes in the cooling surface on the base of the controller.  All dimensions in this section are with the controller mounted in position on a horizontal surface.  For full details regarding positioning and fixing of the WaveSculptor, please refer to the User Manual document.</p> <p>The WaveSculptor controller is splashproof and presents no exposed HV connections able to be touched with a finger or tool.  It is not environmentally sealed against major water and dust ingress. </p> Supply Units Notes: <code>WaveSculptor enclosure length (incl fasteners):</code> 255 mm Note <sup>1</sup> <code>WaveSculptor enclosure width (incl strain relief):</code> 165 mm Note <sup>1</sup> <code>WaveSculptor enclosure height:</code> 35 mm Note <sup>1</sup> <code>WaveSculptor mass:</code> 855 g Note <sup>2</sup> <code>Power cable diameter maximum:</code> 9 mm Note <sup>3</sup> <code>HV electrical terminal thread:</code> M6 Note <sup>4</sup> <code>HV electrical fastening torque maximum:</code> 6 Nm Note <sup>4</sup> <p>Environmental Rating: IP42 </p> <p>NOTES:</p> <ol> <li> <p>Dimensions do not include attached cabling and connectors.\u00a0\u21a9\u21a9\u21a9</p> </li> <li> <p>Weight includes cable strain relief, and nuts and washers for high current terminal connections.\u00a0\u21a9</p> </li> <li> <p>Cable larger than this size may physically fit into the controller, but fitting the bolt crimp lugs over the fasteners in the motor controller may be difficult.\u00a0\u21a9</p> </li> <li> <p>The WaveSculptor has permanently fitted threaded studs in the connection area of the main circuit board.  The correct fastening hardware to use with these studs is detailed in the User Manual \u21a9\u21a9</p> </li> </ol>"},{"location":"Motor_Controllers/WaveSculptor22/Datasheet/Motor_Output.html","title":"Motor Output","text":"<p>The motor output connection provides three-phase power to the motor during normal (motoring) operation and receives power during regenerative braking.  It is expected to be connected to a three-phase motor, either an induction or BLDC (permanent magnet) type.</p> Supply Units Notes: <code>Instantaneous motor current maximum:</code> 100 A<sub>rms</sub> Note <sup>1</sup> <code>Output voltage maximum (at max DC bus):</code> 120 V<sub>rms</sub> <sub>line-line</sub> <code>Motor phase inductance minimum:</code> 50 \u00b5H Note <sup>2</sup>, <sup>4</sup> <code>Motor Resistance minimum:</code> 0 \u03a9 Note <sup>3</sup>, <sup>4</sup> <p>NOTES:</p> <ol> <li> <p>The motor current limit is software controlled and may be limited to lower values via the configuration / setup utility if required.\u00a0\u21a9</p> </li> <li> <p>The WaveSculptor requires a minimum amount of inductance in each motor phase to properly regulate current.  Not providing this inductance may result in an out-of-regulation condition of the motor current control loop, possibly resulting in an undesired self-protection shutdown, or failure of the controller.  Please ensure that both the motor inductance, and any external inductors (if used), are still providing at least the minimum required inductance, even at full rated current, and at elevated temperatures.\u00a0\u21a9</p> </li> <li> <p>As long as the minimum inductance per phase requirement is met, the WaveSculptor will regulate current and operate successfully into a shorted connection.\u00a0\u21a9</p> </li> <li> <p>The WaveSculptor can report inductance and resistance present on it\u2019s output when running the configuration / setup program.  This will provide a figure for the complete output circuit, including motor, external inductors (if any), wiring, and connectors.  This can be used to verify these values meet the datasheet requirements, but only for low current operation, as the test is performed using a current of approximately 20A.  The test will not show problems that are caused by the inductors saturating at high currents.\u00a0\u21a9\u21a9</p> </li> </ol>"},{"location":"Motor_Controllers/WaveSculptor22/Datasheet/Motor_Sense.html","title":"Motor Sense","text":"<p>When driving an AC Permanent Magnet motor, the WaveSculptor requires three sensors from the motor to give position feedback at low velocities.  When driving an induction motor, the WaveSculptor requires a motor shaft encoder to give velocity feedback.  Motor temperature can also be measured for both telemetry data and motor protection, if desired.</p> Supply Units Notes: <code>Sensor power supply output 1:</code> 5 V Note <sup>1</sup> <code>Sensor power supply output 2:</code> 12 V Note <sup>1</sup> <code>Sensor power supply current maximum:</code> 100 mA <code>Sensor Power Supply isolation:</code> 1000 V Note <sup>2</sup> <code>BLDC motor position sensor input phase offset:</code> \u00b110 \u00b0 Note <sup>3</sup>,<sup>4</sup> <code>Induction motor encoder resolution minimum:</code> 250 ppr Note <sup>5</sup> <code>NTC Temperature sensor at 25\u00b0C:</code> 100 k\u03a9 Note <sup>6</sup> <p>NOTES:</p> <ol> <li> <p>The WaveSculptor provides isolated voltage supplies to operate the motor position sensors and motor temperature sensor.  These supplies are a regulated 5V and regulated 12V output.  Please check with your motor supplier for the acceptable operating voltage of the position sensors used in your motor.\u00a0\u21a9\u21a9</p> </li> <li> <p>The sensor output supply, position inputs, and temperature input have an isolation barrier between them and both the DC bus and the CAN bus voltages.\u00a0\u21a9</p> </li> <li> <p>Motor position sensors are only required when driving a AC Permanent Magnet motor.  Motor position sensors should be aligned such that the phase angle offset between each sensor\u2019s output changing state, and the zero-crossing point of it\u2019s appropriate motor phase, is no more than the specified maximum. This implies that the sensors are 120\u00b0 offset (electrically, per motor pole) from each other under ideal conditions.\u00a0\u21a9</p> </li> <li> <p>The polarity and arrangement of the position input signals does not matter. The WaveSculptor detects relative alignment of position signals to motor phases, as well as the polarity of each input, when the Phasorsense algorithm is run during motor controller configuration and setup.  The WaveSculptor can store this information for multiple motors, thus allowing motor changes in your vehicle without having to re-run the configuration program.  Please refer to the communications and programming Appendix in the User Manual for more information.\u00a0\u21a9</p> </li> <li> <p>The motor shaft encoder is only required when driving a induction motor.\u00a0\u21a9</p> </li> <li> <p>The WaveSculptor expects a 100k\u03a9 (at 25\u00b0C) NTC thermistor embedded in the motor to detect motor temperature.  The thermistor B model constants (generally available in the thermistor datasheet) can be programmed into the WaveSculptor during configuration / setup to exactly match the temperature response of your thermistor.\u00a0\u21a9</p> </li> </ol>"},{"location":"Motor_Controllers/WaveSculptor22/Datasheet/Operating_Power_And_Cooling.html","title":"Operating Power and Cooling","text":"<p>The maximum instantaneous output power from the WaveSculptor is limited by internal hardware restrictions, as detailed in previous sections.  However, the continuous power capability of the controller is limited by thermal performance, and is therefore affected by conditions external to the controller such as ambient temperature and cooling system performance.</p> <p>The WaveSculptor 22 is supplied uncooled, and uses an external customer-supplied heatsink or waterblock to provide cooling for the system.  This allows the end-user to optimise the cooling performance, weight, power consumption and drag of their cooling solution.</p> <p>Please refer to the Cooling section in the User Manual for calculations regarding cooling capacity and performance.</p> Supply Units Notes: <code>Maximum instantaneous power output:</code> 20 kVA Note <sup>1</sup> <code>Maximum cold plate design temperature:</code> 70 \u00b0C Note <sup>2</sup> <code>Maximum cold plate shutdown temperature:</code> 80 \u00b0C Note <sup>2</sup> <code>Maximum continuous power output at 30\u00b0C ambient:</code> 20 kVA Note <sup>3</sup> <code>Thermal interface surface length:</code> 250 mm Note <sup>4</sup> <code>Thermal interface surface width:</code> 117 mm Note <sup>4</sup> <code>Thermal interface thread size:</code> M4 Note <sup>5</sup> <code>Thermal interface fastener maximum depth:</code> 14 mm Note <sup>5</sup> <p>NOTES:</p> <ol> <li> <p>Maximum software current limit multiplied by maximum DC bus voltage limit.\u00a0\u21a9</p> </li> <li> <p>The controller is thermally limited to maintain the junction temperature of the main silicon devices below a safe operating point.  Design your cooling solution to keep the cold plate of the motor controller below the design temperature.  The controller will reduce motor current linearly above this point, derating to 0A output current at the shutdown temperature.\u00a0\u21a9\u21a9</p> </li> <li> <p>With a water-cooled heatsink of 0.6Kcm<sup>2</sup>/W attached to the cold plate, and a water temperature of 30\u00b0C, the WaveSculptor22 is capable of operating at its instantaneous power output continuously.  This represents the best case cooling solution possible.\u00a0\u21a9</p> </li> <li> <p>The base of the WaveSculptor22 is a flat aluminium surface, of these dimensions.  A flat area of at least this size should be provided on whatever cooling solution the customer chooses to provide.\u00a0\u21a9\u21a9</p> </li> <li> <p>The WaveSculptor22 provided 8x M4 tapped holes in the base of the product, for use in attaching the motor controller to the customer-provided heatsink or waterblock.  Screws longer than the max depth must not be used, to avoid damaging internal components in the motor controller.\u00a0\u21a9\u21a9</p> </li> </ol>"},{"location":"Motor_Controllers/WaveSculptor22/User_Manual/index.html","title":"WaveSculptor22 User Manual","text":"<p>This document describes the operation, connections, mounting, communications, cooling, and how to get started with and use the Prohelion WaveSculptor22 Motor Controller.</p> <p></p> WaveSculptor22 Motor Controller <p>Danger</p> <p>This Product processes and uses potentially lethal voltages and currents. Do not provide power or operate with the cover removed.  To be opened and connected to by authorised personnel only.</p>"},{"location":"Motor_Controllers/WaveSculptor22/User_Manual/Accessing_The_Controller.html","title":"Accessing the Controller","text":""},{"location":"Motor_Controllers/WaveSculptor22/User_Manual/Accessing_The_Controller.html#safety","title":"Safety","text":"<p>Opening the cover on the WaveSculptor will expose the high power terminals for battery and motor phase connections.  High voltages may be present inside this cover.  Before opening, make sure that the battery contactors are dis-engaged, so that high voltage is not present at the motor controller.  Allow one minute for the internal capacitors to discharge before working on the controller.</p>"},{"location":"Motor_Controllers/WaveSculptor22/User_Manual/Accessing_The_Controller.html#inspection-cover","title":"Inspection Cover","text":"<p>The lid of the controller is held closed against the base with stainless steel M3 button hex head screws, two at each end of the controller.  Use a 2mm allen (hex) key to loosen and remove all four screws.</p> <p>Lift off the lid and set it aside.  Use a multimeter to check across the battery connection terminals for high voltage.  If more than a few volts are present, wait additional time for the capacitors to discharge to a safe level. </p> <p>To avoid damage due to static discharge, touch the controller body before working inside the controller and touching any internal circuit boards.</p> <p>Be extremely careful to not drop loose fasteners into the motor controller, as they may move around while driving and short out the battery or motor phase connections.  </p> <p>When finished working inside the WaveSculptor, replace the lid and insert and tighten all four screws.</p>"},{"location":"Motor_Controllers/WaveSculptor22/User_Manual/Appendix_A.html","title":"Appendix A: Recommended Component Sources","text":""},{"location":"Motor_Controllers/WaveSculptor22/User_Manual/Appendix_A.html#can-cabling-low-voltage-connectors","title":"Can Cabling &amp; Low Voltage Connectors","text":"Part Manufacturer Manufacturer Part Number Suggested Supplier Supplier Part Number <code>DeviceNet Cable (per metre)</code> Lapp Cable 2170343 Farnell 161-7915 <code>6-way MicroFit connector housing (CAN Connectors)</code> Molex 43025-0600 Digikey WM1785-ND <code>14-way MicroFit connector housing (Motor Sense Connector)</code> Molex 43025-1400 Digikey WM2489-ND <code>MicroFit Crimps (20-24 AWG)</code> Molex 43030-0007 Digikey WM1837-ND"},{"location":"Motor_Controllers/WaveSculptor22/User_Manual/Appendix_A.html#high-power-cabling-connectors","title":"High Power Cabling &amp; Connectors","text":"Part Manufacturer Manufacturer Part Number Suggested Supplier Supplier Part Number <code>Motor Temperature Sensor - 100k 25\u00b0C NTC Thermistor</code> BethTherm 10KD6A372I Farnell 970-7298 <code>High Power 16mm&lt;sup&gt;2&lt;/sup&gt; M6 bolt lug connections</code> Cabac CAA 16-6 Local Electrical Supplier - <code>High Power Cabling - 16mm&lt;sup&gt;2&lt;/sup&gt; high temp orange</code> Tycab Australia ZDFX151102-OR Local Electrical supplier -"},{"location":"Motor_Controllers/WaveSculptor22/User_Manual/Appendix_B.html","title":"Appendix B: Guide to Successful Crimping","text":""},{"location":"Motor_Controllers/WaveSculptor22/User_Manual/Appendix_B.html#molex-microfit-30","title":"Molex MicroFit 3.0","text":"<p>At the bare minimum, use a quality hand crimp tool such as Molex part number 0638111000, available at a reasonable price from Digikey, part WM9999-ND.  The tool must be shaped to fold the crimp ears around and down through the centre of the wire conductor bundle \u2013 crimping with pliers or an 'automotive' barrel type crimp tool will not give a satisfactory result. </p> <p>Refer to the Molex Quality Crimping Handbook:</p> <p>Note the pictures in the \u201cTroubleshooting\u201d section for the visual differences between a good and a bad crimp.</p> <p>For higher volumes or critical applications such as racing, the extra expense of a dedicated MicroFit hand tool such as Molex part number 63819-0000 may be appropriate.  This tool is available from Digikey, part WM9022-ND.  Be aware that this tool does provide far superior results compared to the generic crimp tool.</p>"},{"location":"Motor_Controllers/WaveSculptor22/User_Manual/Appendix_B.html#high-power-bolt-lugs","title":"High Power Bolt Lugs","text":"<p>It is important to crimp the high power connections properly so that they remain reliable and low-resistance for a long time.  High power connections should not be soldered for vehicle applications, as the solder wicks up inside the copper strands and creates a stress point, which can fatigue and break due to the vibration present in a vehicle. Follow the steps below for a successful crimp</p> <p>Step 1:</p> <p>Cut the cable square and neatly, with no loose strands.  The best tool to use is a parrot-beak cable cutter, available at electricians supply stores.  </p> <p></p> Step 1 <p>Step 2:</p> <p>Strip the insulation to the correct distance for the crimp you are using.  When inserted into the crimp, the insulation should touch the barrel of the crimp with no large gaps and you should be able to see the ends of the copper strands through the inspection hole next to the lug of the crimp.</p> <p>Step 3:</p> <p>Put a small blob (6mm or 1/4\u201d diameter) of electrical jointing compound into the barrel of the crimp.  This compound prevents oxygen and moisture from getting into the crimp later on, and keeps it in good condition for a long time.  </p> <p></p> Step 3 <p>Step 4:</p> <p>Insert the wire into the crimp.  Hold your finger over the inspection hole to stop the jointing compound coming out, therefore forcing it up between the wire strands.  Push the wire all the way into the crimp barrel, so that the wire insulation touches the end of the barrel with no large gaps.</p> <p></p> Step 4 <p>Step 5:</p> <p>Set your hex crimp tool to the same size as the crimp lug.  In the example photos here, we have used 35mm<sup>2</sup> cable, lugs, and crimp tool.  To crimp with the proper force, you will need either a 'bolt cutter' type crimp tool, as shown in the photo above, with handles around 600mm (2') long, or a hydraulic tool with an appropriate crimp die set.</p> <p></p> Step 5 <p>Step 6:</p> <p>Crimp the barrel of the crimp.  For the tool used in these photos, it can be crimped three times along the length of the barrel.  A hydraulic tool may be similar. A high volume tool will probably only require a single action.  </p> <p>Step 7:</p> <p>Heatshrink both ends of the orange cable with red or black heatshrink to indicate DC polarity.  Red and Black cable should be reserved for low voltage (12V) wiring in the car.  Use other colour heatshrink for the motor phases.  </p> <p></p> Step 7"},{"location":"Motor_Controllers/WaveSculptor22/User_Manual/Appendix_C.html","title":"Appendix C: CAN Communications Protocol","text":""},{"location":"Motor_Controllers/WaveSculptor22/User_Manual/Appendix_C.html#hardware","title":"Hardware","text":"<p>The CAN hardware interface used is compatible with the CAN 2.0B standard.  The supported bit rates (bits per second) are 1 Mbps, 500 kbps (default), 250 kbps, 125 kbps, 100 kbps and 50 kbps.</p>"},{"location":"Motor_Controllers/WaveSculptor22/User_Manual/Appendix_C.html#software","title":"Software","text":"<p>The CAN protocol uses data frames for most communication.  Remote frames are also enabled.  The identifier field uses the standard frame definition length of 11 bits, with identifiers 0x7F0 to 0x7FF reserved for use by the WaveSculptor bootloader. The bootloader will send a message with identifier 0x7F1 at 500kbit after a system reset. All measurement data is transmitted using IEEE single-precision 32-bit format (IEEE 754) with most significant byte (MSB) sent first.</p> <p></p> Figure 1. CAN Data frame"},{"location":"Motor_Controllers/WaveSculptor22/User_Manual/Appendix_C.html#identifier","title":"Identifier","text":"<p>The identifier field has been split into two sections for Prohelion devices. Bits 10-5 contain the device identifier and bits 4-0 contains the message identifier associated with that device, as shown in Figure 2. This means that there is a maximum of 63 Prohelion device that can be on the CAN bus at any one time. The 64th location is reserved for the bootloader. Each Prohelion device can have 31 different types of messages. The first message identifier is used by the device identification message. Two device slots could be used if more messages per device were required, however this has not been required yet.</p> <p>The term Base Address is used instead of Device Identifier in the Windows configuration program. Base Address is simply the Device Identifier multiplied by 32. Using this term makes it more obvious what range of CAN identifiers have been used. As an example, there may be a Prohelion driver controls at base address 0x400, a left wheel WaveSculptor motor controller at 0x420 and a right wheel WaveSculptor motor controller at 0x440. So, address range 0x400 \u2013 0x45F would be used by this Prohelion system.</p> <p></p> Figure 2. CAN Device Identifier Address Format"},{"location":"Motor_Controllers/WaveSculptor22/User_Manual/Appendix_C.html#data-field","title":"Data Field","text":"<p>The data field in all frames is fixed at 8 bytes (64 bits) which allows space for two IEEE 754 32-bit floating point variables as shown in Figure 3.  The data field is sent and expected to be received least significant byte first. This allows a direct overlay of a float[2] array and char[8] array on a little endian processor, such as an Intel x86, the TI DSP in the WaveSculptor, or the MSP430 micro in the driver controls product.</p> <p></p> Figure 3. Format of the data field in a data frame"},{"location":"Motor_Controllers/WaveSculptor22/User_Manual/Appendix_C.html#units","title":"Units","text":"<p>Please note that variables described in the following packets with units of percent \u201c%\u201d should be sent with a minimum floating-point value of 0.0 and a maximum value of 1.0.  Do not send 100.0 as the maximum value.</p>"},{"location":"Motor_Controllers/WaveSculptor22/User_Manual/Appendix_C.html#drive-commands","title":"Drive Commands","text":"<p>These are data frames broadcast from the driver controls to any listening motor controller. These commands contain desired set points for the control software to operate the controller.  The commands are sent as required, however there is a maximum permissible delay between consecutive Motor Drive commands.</p> <p>The identifier of a received command will contain the base address of the device from which the message was sent and a message identifier offset.  The base address of the sending device is a preset value stored in internal memory, which can be set during initial configuration of the motor controller using the configuration utility.</p>"},{"location":"Motor_Controllers/WaveSculptor22/User_Manual/Appendix_C.html#motor-drive-command","title":"Motor Drive Command","text":"<p>ID: Driver Controls Base Address + 0x01 </p> <p>Interval: 100ms </p> Variable Bits Type Description <code>Motor Current</code> 63..32 % Desired motor current set point as a percentage of maximum current setting <code>Motor Velocity</code> 31..0 rpm Desired motor velocity set point in rpm <p>The WaveSculptor motor controller must receive a Motor Drive Command frame at least once every 250ms.  If this does not occur, the controller will assume that communications have failed and will halt all motor control functions, placing the system into neutral and coasting until another valid command is received.</p>"},{"location":"Motor_Controllers/WaveSculptor22/User_Manual/Appendix_C.html#motor-power-command","title":"Motor Power Command","text":"<p>ID: Driver Controls Base Address + 0x02 </p> <p>Interval: 100ms </p> Variable Bits Type Description <code>Bus Current</code> 63..32 % Desired set point of current drawn from the bus by the controller as a percentage of absolute bus current limit. <code>Reserved</code> 31..0 - -"},{"location":"Motor_Controllers/WaveSculptor22/User_Manual/Appendix_C.html#reset-command","title":"Reset Command","text":"<p>ID: Driver Controls Base Address + 0x03 </p> Variable Bits Type Description <code>Unused</code> 63..32 - - <code>Unused</code> 31..0 - - <p>Send a command from this address to reset the software in the WaveSculptor, not used during normal operation but can be used to reset the device if necessary.</p>"},{"location":"Motor_Controllers/WaveSculptor22/User_Manual/Appendix_C.html#drive-command-examples","title":"Drive Command Examples","text":"<p>Ignoring the added complexity of bus and thermal limiting, the WaveSculptor operates such that it will use the maximum available current (torque) to try and achieve the desired velocity.  This is true for both accelerating and decelerating operation, i.e. the WaveSculptor will automatically regeneratively brake if a setpoint velocity is provided that is slower than the current speed.</p> <p>Two main drive modes will be used in a normal vehicle setup: torque control; and velocity (cruise) control.  A conventional vehicle runs in torque control mode, where the position of the accelerator (gas) pedal controls the amount of torque produced by the engine.  In an electric system, the motor current is proportional to torque, and can be easily regulated, as can the velocity.</p> <p>To run the motor in torque control mode, set the velocity to an unobtainable value such as 20000rpm.  Set the current to a value that is proportional to your accelerator pedal position.  If you wish to drive in reverse, set the velocity to -20000rpm.  The motor will operate the same as a normal car, and will coast down to a stop if the driver removes their foot from the pedal.</p> <p>To run the motor in velocity (cruise) control mode, set the current to your maximum desired acceleration force (usually 100%), and set the velocity to the desired speed.  The WaveSculptor will use the setpoint current to keep the vehicle at the setpoint speed, and will use both drive and regenerative braking to do so.   Use this mode to regeneratively brake to a halt by setting current to your desired braking force, and setting velocity to zero.</p>"},{"location":"Motor_Controllers/WaveSculptor22/User_Manual/Appendix_C.html#motor-controller-broadcast-messages","title":"Motor Controller Broadcast Messages","text":"<p>Data frames containing telemetry values are periodically broadcast onto the bus by the WaveSculptor.  Broadcast of these values can be individually enabled and disabled via the Windows configuration software. </p> <p>Any of these telemetry values can be requested at any time (no matter if enabled or disabled) by sending the appropriate RTR packet on the CAN bus.  For example, with a WaveSculptor22 configured at base address 0x400, your device should send an empty packet onto the CAN bus with an ID of 0x402 and the RTR bit set.  The WaveSculptor22 will reply immediately with a packet from ID 0x402 containing the latest bus voltage and current readings.</p>"},{"location":"Motor_Controllers/WaveSculptor22/User_Manual/Appendix_C.html#identification-information","title":"Identification Information","text":"<p>ID: Motor Controller Base Address + 0x00 </p> <p>Interval: 1 Second </p> Variable Bits Type Description <code>Serial Number</code> 63..32 Uint32 Device serial number, allocated at manufacture. <code>Prohelion ID</code> 31..0 Uint32 Device identifier. 0x00004003 <p>The periodic broadcast of this message cannot be disabled. It is needed to find the motor controller on the network if the base address is lost or mis-configured.</p>"},{"location":"Motor_Controllers/WaveSculptor22/User_Manual/Appendix_C.html#status-information","title":"Status Information","text":"<p>ID: Motor Controller Base Address + 0x01 </p> <p>Interval: 200ms </p> Variable Bits Units Description <code>Receive Error Count</code> 63..56 Uint8 The DSP CAN receive error counter (CAN 2.0) <code>Transmit Error Count</code> 55..48 Uint8 The DSP CAN transmission error counter (CAN 2.0) <code>Active Motor</code> 47..32 Uint16 The index of the active motor currently being used. <code>Error Flags</code> 31..16 Uint16 Flags Indicate Error Bits Parameter 15..9876543210 ReservedMotor Over Speed (15% overshoot above max RPM)Desaturation Fault (IGBT desaturation, IGBT driver OVLO)15V Rail under voltage lock out (UVLO)Config read error (some values may be reset to defaults)Watchdog caused last resetBad motor position hall sequenceDC Bus over voltageSoftware over currentHardware over current <code>Limit Flags</code> 15..0 Uint16 Flags Indicate which control loop is limiting the output current of the motor controller Bits Parameter 15..76543210 ReservedIPM Temperature or Motor TemperatureBus Voltage Lower LimitBus Voltage Upper LimitBus CurrentVelocityMotor CurrentOutput Voltage PWM"},{"location":"Motor_Controllers/WaveSculptor22/User_Manual/Appendix_C.html#bus-measurement","title":"Bus Measurement","text":"<p>ID: Motor Controller Base Address + 0x02 </p> <p>Interval: 200ms </p> Variable Bits Units Description <code>Bus Current</code> 63..32 A Current drawn from the DC bus by the controller. <code>Bus Voltage</code> 31..0 V DC bus voltage at the controller."},{"location":"Motor_Controllers/WaveSculptor22/User_Manual/Appendix_C.html#velocity-measurement","title":"Velocity Measurement","text":"<p>ID: Motor Controller Base Address + 0x03 </p> <p>Interval: 200ms </p> Variable Bits Units Description <code>Vehicle Velocity</code> 63..32 m/s Vehicle velocity in metres/second. <code>Motor Velocity</code> 31..0 rpm Motor angular frequency in revolutions per minute."},{"location":"Motor_Controllers/WaveSculptor22/User_Manual/Appendix_C.html#phase-current-measurement","title":"Phase Current Measurement","text":"<p>ID: Motor Controller Base Address + 0x04 </p> <p>Interval: 200ms </p> Variable Bits Units Description <code>Phase C Current</code> 63..32 A<sub>rms</sub> RMS current in motor Phase C. <code>Motor Velocity</code> 31..0 A<sub>rms</sub> RMS current in motor Phase B. <p>While the motor is rotating at speed these two currents should be equal. At extremely low commutation speeds these two currents will only match in one third of the motor position, the other two thirds will involve current also flowing in Phase A.</p>"},{"location":"Motor_Controllers/WaveSculptor22/User_Manual/Appendix_C.html#motor-voltage-vector-measurement","title":"Motor Voltage Vector Measurement","text":"<p>ID: Motor Controller Base Address + 0x05 </p> <p>Interval: 200ms </p> Variable Bits Units Description <code>Vd</code> 63..32 V Real component of the applied non-rotating voltage vector to the motor. <code>Vq</code> 31..0 V Imaginary component of the applied non-rotating voltage vector to the motor."},{"location":"Motor_Controllers/WaveSculptor22/User_Manual/Appendix_C.html#motor-current-vector-measurement","title":"Motor Current Vector Measurement","text":"<p>ID: Motor Controller Base Address + 0x06 </p> <p>Interval: 200ms </p> Variable Bits Type Description <code>Id</code> 63..32 A Real component of the applied non-rotating current vector to the motor.  This vector represents the field current of the motor. <code>Iq</code> 31..0 A Imaginary component of the applied non-rotating current vector to the motor.  This current produces torque in the motor and should be in phase with the back-EMF of the motor."},{"location":"Motor_Controllers/WaveSculptor22/User_Manual/Appendix_C.html#motor-backemf-measurementprediction","title":"Motor BackEMF Measurement/Prediction","text":"<p>ID: Motor Controller Base Address + 0x07 </p> <p>Interval: 200ms </p> Variable Bits Type Description <code>BEMFd</code> 63..32 V By definition this value is always 0V. <code>BEMFq</code> 31..0 V The peak of the phase to neutral motor voltage."},{"location":"Motor_Controllers/WaveSculptor22/User_Manual/Appendix_C.html#15v-voltage-rail-measurement","title":"15V Voltage Rail Measurement","text":"<p>ID: Motor Controller Base Address + 0x08 </p> <p>Interval: 1 second </p> Variable Bits Type Description <code>15V supply</code> 63..32 V Actual voltage level of the 15V power rail. <code>Reserved</code> 31..0 - -"},{"location":"Motor_Controllers/WaveSculptor22/User_Manual/Appendix_C.html#33v-19v-voltage-rail-measurement","title":"3.3V &amp; 19.V Voltage Rail Measurement","text":"<p>ID: Motor Controller Base Address + 0x09 </p> <p>Interval: 1 second</p> Variable Bits Type Description <code>3.3V supply</code> 63..32 V Actual voltage level of the 3.3V power rail. <code>1.9V supply</code> 31..0 V Actual voltage level of the 1.9V DSP power rail."},{"location":"Motor_Controllers/WaveSculptor22/User_Manual/Appendix_C.html#reserved","title":"Reserved","text":"<p>ID: Motor Controller Base Address + 0x0A </p> <p>Interval: - </p> Variable Bits Type Description <code>Reserved</code> 63...32 - - <code>Reserved</code> 31...0 - -"},{"location":"Motor_Controllers/WaveSculptor22/User_Manual/Appendix_C.html#heat-sink-motor-temperature-measurement","title":"Heat-sink &amp; Motor Temperature Measurement","text":"<p>ID: Motor Controller Base Address + 0x0B </p> <p>Interval: 1 second </p> Variable Bits Type Description <code>Heat-sink Temp</code> 63..32 \u00b0C Internal temperature of Heat-sink (case) <code>Motor Temp</code> 31..0 \u00b0C Internal temperature of the motor."},{"location":"Motor_Controllers/WaveSculptor22/User_Manual/Appendix_C.html#dsp-board-temperature-measurement","title":"DSP Board Temperature Measurement","text":"<p>ID: Motor Controller Base Address + 0x0C </p> <p>Interval: 1 second </p> Variable Bits Type Description <code>Reserved</code> 63..32 - - <code>DSP Board Temp</code> 31..0 \u00b0C Temperature of the DSP board."},{"location":"Motor_Controllers/WaveSculptor22/User_Manual/Appendix_C.html#reserved_1","title":"Reserved","text":"<p>ID: Motor Controller Base Address + 0x0D </p> <p>Interval: 1 second </p> Variable Bits Type Description <code>Reserved</code> 63..32 - - <code>Reserved</code> 31..0 - -"},{"location":"Motor_Controllers/WaveSculptor22/User_Manual/Appendix_C.html#odometer-bus-amphours-measurement","title":"Odometer &amp; Bus AmpHours Measurement","text":"<p>ID: Motor Controller Base Address + 0x0E </p> <p>Interval: 1 second </p> Variable Bits Type Description <code>DC Bus AmpHours</code> 63...32 Ah Charge flow into the controller DC bus from the time of reset. <code>Odometer</code> 31...0 m Distance the vehicle has travelled since reset."},{"location":"Motor_Controllers/WaveSculptor22/User_Manual/Appendix_C.html#slip-speed-measurement","title":"Slip Speed Measurement","text":"<p>ID: Motor Controller Base Address + 0x17 </p> <p>Interval: 200ms </p> Variable Bits Type Description <code>Slip Speed</code> 63..32 Hz Slip speed when driving an induction motor. <code>Reserved</code> 31..0 \u00b0C -"},{"location":"Motor_Controllers/WaveSculptor22/User_Manual/Appendix_C.html#configuration-commands","title":"Configuration Commands","text":""},{"location":"Motor_Controllers/WaveSculptor22/User_Manual/Appendix_C.html#active-motor-change","title":"Active Motor Change","text":"<p>ID: Motor Control Base Address + 0x12 </p> Variable Bits Units Description <code>Active Motor</code> 63..48 WORD Desired active motor (0 to 9) <code>Configuration Access Key</code> 47..0 ASCII Must spell \u201cACTMOT\u201d in ASCII (0x54 4F 4D 54 43 41) <p>Send this command to change the active motor. Note that the controller will save the active motor to the EEPROM config memory, so what you send will survive a reset. This has a downside that you do not want to be sending it constantly, as you'll wear out the EEPROM.</p> <p>Example to set the active motor to motor slot 5:</p> <p>CAN ID = 0x412, Data = 0x00 05 54 4F 4D 54 43 41</p>"},{"location":"Motor_Controllers/WaveSculptor22/User_Manual/CAN_Bus_And_Low_Voltage.html","title":"CAN Bus and Low Voltage","text":"<p>The CAN bus is structured as a linear network, with short stubs branching from 'T' connectors on the main bus backbone to each device.  The CAN bus data lines must be terminated at each end of the main bus with 120 ohm resistors between the CAN-H and CAN-L signals.</p> <p>In the range of Prohelion EV products, including the WaveSculptor 22, EV Driver Controls, and Battery Management Systems, the CAN connections are implemented with an 'in' and an 'out' connector, therefore placing the 'T' on the device, resulting in a very short fixed-length stub on the circuit board of each device.  This is ideal from a signal integrity and network performance point of view.</p> <p></p> CAN Bus Network <p>The WaveSculptor motor controller uses the CAN bus to receive commands and transmit telemetry, as well as to provide low-voltage DC power to operate the controller electronics.</p> <p>Therefore, a basic system consists of three major components:</p> <p>1.  WaveSculptor motor controller</p> <p>2.  Driver controls interface to pedals, switches &amp; gauges</p> <p>3.  Power supply (nominally 12V DC) to operate the system</p> <p>Other components can also be added to the network. Items typically found in a solar electric vehicle would include:</p> <p>4.  LCD and other driver information displays</p> <p>5.  Battery management system</p> <p>6.  Multiple motor controllers</p> <p>7.  Datalogging and RF telemetry</p>"},{"location":"Motor_Controllers/WaveSculptor22/User_Manual/CAN_Bus_And_Low_Voltage.html#can-wiring","title":"CAN Wiring","text":"<p>The CAN data lines (CAN-H and CAN-L) must be implemented with twisted-pair wire for proper data integrity.  The wire should have a characteristic impedance of 120 ohms.</p> <p>Power should also be provided along the CAN cable, ideally with another twisted pair to minimise noise pickup.  An overall shield can also be advantageous.  </p> <p>From a performance perspective, the optimal choice of cable is 7mm Devicenet CANbus 'thin' cable, with 24AWG (data) + 22AWG (power) twisted pairs and a braided shield.  Using this cable will result in a robust installation.  </p>"},{"location":"Motor_Controllers/WaveSculptor22/User_Manual/CAN_Bus_And_Low_Voltage.html#can-connector","title":"CAN Connector","text":"<p>The connector used on the WaveSculptor22 and other Prohelion devices is a 6-way 3mm pitch Molex MicroFit connector.  The pinout is shown below, as viewed from the wire side \u2013 as you would look at it while inserting crimps. </p> <p>The colours shown match those in the standard DeviceNet CAN cabling pairs.  Please refer to Appendix B for an overview of correct crimping technique, as poor crimps will cause unreliable operation.</p> <p></p> CAN Connector"},{"location":"Motor_Controllers/WaveSculptor22/User_Manual/CAN_Bus_And_Low_Voltage.html#can-shielding","title":"CAN Shielding","text":"<p>If the recommended braided shield is used in the cable, then terminate it to the SHIELD pin (lower-left corner on the connector) on both CAN IN and CAN OUT connectors on each device.  </p> <p>On one device only in the network, instead of using the SHIELD pin, terminate the shield to the SHIELD GROUND pin (upper-left corner on the connector) on both CAN IN and CAN OUT connectors, to ground the shield for the entire network at this single point.  The usual place to do this is where power is fed into the network, typically at Prohelion 's EV Driver Controls product.</p>"},{"location":"Motor_Controllers/WaveSculptor22/User_Manual/CAN_Bus_And_Low_Voltage.html#can-termination","title":"CAN Termination","text":"<p>To implement the required 120 Ohm termination resistor at each end of the CAN bus, plug a connector into the unused CAN connector on the last device at each end of the network with a resistor crimped into the appropriate locations.  Leave the power, ground and shield pins unconnected.</p>"},{"location":"Motor_Controllers/WaveSculptor22/User_Manual/CAN_Bus_And_Low_Voltage.html#communications","title":"Communications","text":"<p>The CAN standard does not specify high-level message protocols. Prohelion devices use a custom protocol, outlined in the communication specification document for each device.</p> <p>By default, each device operates at 500 kbits/second, one step below the maximum possible data rate of 1 Mbit/second, and comes programmed from the factory with a CAN base address that will allow it to work without problems with other Prohelion devices. Using the Windows PC interface program and the Prohelion CAN-Ethernet bridge, both the data rate and the base address can be programmed to suit your network.</p> <p>WaveSculptor controllers also have a second programmable base address that they watch for command messages. This should be set to whatever base address is used by the driver controls node on the network.</p> <p>The WaveSculptor motor controller expects regular messages from the driver controls device.  If a message is not received within a set timeout period (refer to the communications specification in Appendix A for the exact value) then the controller will change to a safe mode and will stop driving the motor until a valid message is received again. This protects against faults where either a connector is loose or broken, the cable has been damaged, or the driver controls have failed.</p>"},{"location":"Motor_Controllers/WaveSculptor22/User_Manual/CAN_Bus_And_Low_Voltage.html#power-supply","title":"Power Supply","text":"<p>Each Prohelion device expects a DC supply on the CAN bus connection of between 9 and 15V.  13.8V from a small lead-acid battery charged by your vehicle's DC/DC converter is ideal.  Refer to each device\u2019s datasheet for CAN bus current consumption values, and make sure that the total is less than the rating on your chosen cable.</p> <p>Prohelion 's EV Driver Controls product provides a means to connect power from the battery into the CAN bus, to power other devices on the network.  It can switch power to the CAN bus based on the state of the ignition key.</p>"},{"location":"Motor_Controllers/WaveSculptor22/User_Manual/CAN_Bus_And_Low_Voltage.html#driver-controls","title":"Driver Controls","text":"<p>Prohelion can provide a CAN bus driver controls device.  This interfaces to pedals and switches, and provides the messages required to operate a WaveSculptor controller. The firmware for this device is open-source, allowing it to be easily customized to suit your vehicle.</p> <p>As the communications specification is open, the WaveSculptor can also be operated from custom driver controls hardware specific to your vehicle, or from a Windows PC running either the provided Prohelion software, or custom software of your choice.</p> <p>Please refer to the User Manual on our website for further details. </p>"},{"location":"Motor_Controllers/WaveSculptor22/User_Manual/CAN_Bus_And_Low_Voltage.html#system-expansion","title":"System Expansion","text":"<p>Prohelion can provide a CAN bus LCD display capable of showing up to four different telemetry values (one at a time) on a 3.5 digit sunlight-readable screen.  Multiple displays can be used if desired.  </p>"},{"location":"Motor_Controllers/WaveSculptor22/User_Manual/CAN_Bus_And_Low_Voltage.html#multiple-motors","title":"Multiple Motors","text":"<p>Multiple motors/controllers are accommodated easily with the CAN bus system. All that is required is for each WaveSculptor controller to be programmed to receive messages from the same driver controls base address, and then to run the vehicle in current-control mode (the default setup). Each motor will now operate at the same current, thus giving automatic wheel speed differences for cornering, with the system acting as an electronic differential.</p> <p>The base address of each WaveSculptor controller should be programmed to a different value. This allows viewing of separate telemetry data from each controller on the LCD displays or other telemetry systems in the vehicle.</p>"},{"location":"Motor_Controllers/WaveSculptor22/User_Manual/Controller_Function.html","title":"Controller Function","text":"<p>As a high-level description, the WaveSculptor takes high voltage DC from a battery pack, and converts it to a lower voltage 3-phase AC to drive a motor.  </p> <p>Power flow is bi-directional, so it can also perform regenerative braking (regen) where power flows from the motor back into the batteries.  It is a four-quadrant device, which means that it can drive or regen in both forwards and reverse directions.</p> <p>Ignoring the losses in the system (refer to the datasheet for efficiency curves for the WaveSculptor), total power through the motor controller is conserved.  It does not create energy, it just converts it from one form (DC) to another (AC).  </p>"},{"location":"Motor_Controllers/WaveSculptor22/User_Manual/Controller_Function.html#a-note-on-motor-and-battery-currents","title":"A Note on Motor and Battery Currents","text":"<p>Motor current is proportional to torque, whereas battery current is proportional to power.  </p> <p>Power = Torque x speed</p> <p>The effect of this is that battery current will only approach motor current as the motor speed approaches 100%.  At low motor speeds, the battery current will also be low, regardless of what the motor current is. </p> <p>This applies to most motor controllers, but with DC motor systems (where efficiency is much more variable) the effect is not usually as noticeable.  So, when reading this document (and the datasheet) make sure to note if the specification is talking about motor current or battery current.  They are very different quantities.</p>"},{"location":"Motor_Controllers/WaveSculptor22/User_Manual/Cooling.html","title":"Cooling","text":"<p>The WaveSculptor will usually require some form of external heatsinking.  The extent of this will depend on the ambient operating temperature, the motor current and duty cycle, and operating voltage.  Once these are known, the heat that is required to be removed from the controller can be calculated from its efficiency.</p> <p>There will be a wide variety of possible cooling solutions, which is why the WaveSculptor has been designed for technically qualified users to choose their own optimal solution for their exact vehicle and use scenario.</p> <p>The aim of the cooling solution provided by the end user is to keep the WaveSculptor cold plate temperature below the limit specified in the datasheet.  Above this point, the motor controller will automatically reduce the motor output current to protect itself, resulting in reduced performance for your vehicle.</p>"},{"location":"Motor_Controllers/WaveSculptor22/User_Manual/Cooling.html#efficiency","title":"Efficiency","text":"<p>The power electronic switching devices in the WaveSculptor are MOSFETs, and the majority of loss in the motor controller comes from these devices.</p> <p>All of these losses have a very strong relationship to input voltage and output current, and only a weak relationship (via ripple current) to output voltage.  This is an extremely useful observation for those wanting to produce a simple model of the losses in a MOSFET based motor controller.</p>"},{"location":"Motor_Controllers/WaveSculptor22/User_Manual/Cooling.html#test-methodology","title":"Test Methodology","text":"<p>To produce the efficiency curves in the datasheet, and the modelling information in this document, the switching losses in the WaveSculptor were measured directly, by analysing the current and voltage switching waveforms.  </p> <p>Conduction losses were simply derived from the measured phase to phase resistance of the WaveSculptor.</p> <p>A high bandwidth system was used to acquire the switching waveforms, and data showing switching loss versus load current was then extracted.  Semiconductor parameters were then calculated from this data, producing best fit curves and hence functions that can be used to create an efficiency map over the entire operating area of the controller.  </p>"},{"location":"Motor_Controllers/WaveSculptor22/User_Manual/Cooling.html#power-loss","title":"Power Loss","text":"<p>The power loss of the WaveScuptor operating with 160V DC bus voltage is shown in the diagram below:</p> <p></p> Power loss of WaveSculptor22"},{"location":"Motor_Controllers/WaveSculptor22/User_Manual/Cooling.html#predicting-loss","title":"Predicting Loss","text":"<p>To allow solar racing teams to predict the WaveSculptor power loss, both for heatsink calculations and for race strategy algorithms, the following estimate of controller losses can be used:</p> <p>P<sub>loss</sub> = R<sub>eq</sub>I<sub>o</sub><sup>2</sup> + (\u03b1I<sub>o</sub> + \u03b2)V<sub>bus</sub> + C\ud835\udc53<sub>eq</sub>V<sub>bus</sub><sup>2</sup></p> <p>where:</p> <ul> <li>I<sub>o</sub>: is the output current of the controller in A<sub>rms</sub></li> <li>V<sub>bus</sub>: is the bus voltage (battery voltage) of the controller</li> <li>R<sub>eq</sub>: is the equivalent resistance of the entire controller</li> <li>\u03b1: is the linear component of the switching loss (per unit of bus voltage)</li> <li>\u03b2: is the constant component of the switching loss (per unit of bus voltage)</li> <li>C\ud835\udc53<sub>eq</sub>: is the equivalent capacitance * frequency product of the entire controller</li> </ul> <p>The table below gives the constants for WaveSculptor22:</p> Constant WaveSculptor22 MOSFETs: <code>R</code><sub><code>eq</code></sub> 1.0800E-2 <code>\ud835\udefc</code> 3.3450E-3 <code>\u03b2</code> 1.8153E-2 <code>C\ud835\udc53</code><sub><code>eq</code></sub> 1.5625E-4"},{"location":"Motor_Controllers/WaveSculptor22/User_Manual/Cooling.html#heatsink-requirements","title":"Heatsink Requirements","text":"<p>Once the total motor controller loss can be calculated, an expected motor current and duty cycle is required to be able to calculate the heatsinking requirements of the controller.  This will depend on such things as the mass of the vehicle, rolling and aero resistance, and expected speeds and accelerations.  The more accurately this information is known, the more optimal the heatsink can be.</p> <p>Two scenarios are outlined below: the continuous use case; and the short term peak power use case.</p>"},{"location":"Motor_Controllers/WaveSculptor22/User_Manual/Cooling.html#continuous-use","title":"Continuous Use","text":"<p>Say your vehicle uses a 160V DC bus, and requires 30A motor current continuously to maintain cruising speed on the highway.  The ambient temperature is high, at 40\u00b0C, and the maximum cold plate temperature specified in the datasheet is 70\u00b0C \u2013 please check the datasheet for the correct value.</p> <p>The graph above shows that at this voltage and current, the motor controller will be producing around 35W of loss.</p> <p>To maintain the cold plate of the motor controller at or below the specified temperature, a cooling solution with a total thermal resistance to ambient of at least (70\u00b0 \u2013 40\u00b0) / 35W = 0.85\u00b0C/W is required.   </p> <p>Assuming 0.05\u00b0C/W for thermal grease between the cold plate and heatsink, this means that a heatsink with a thermal resistance of at least 0.80\u00b0C/W is required.</p> <p>This could be provided using an off-the-shelf comb section extruded aluminium heatsink with base dimensions approximately the same as the cold plate, and a 40mm fin depth, weighing around 1.5kg, using convection airflow only.</p> <p>However, significant weight savings are possible by using a smaller fin depth, and force cooling with a fan.  Careful placement of the motor controller in the vehicle so that there is ambient airflow could mean that the fan is not required to run continuously, therefore saving considerable power.</p> <p>Further improved alternatives are also available, requiring more integration with the vehicle.  An example would be an aluminium plate laminated into the skin of the vehicle, such that the outside is flush with the rest of the skin (to avoid turbulence), and having the motor controller fastened to the inside surface.  A plate of at least 2mm thick means that standard hex drive countersunk M4 screws can be used to fasten to the WaveSculptor, and remain flush with the outside surface.  The size of this plate can be chosen to give the required thermal resistance, with heat rejected directly to ambient air outside, flowing past at vehicle speed.  A solution like this can provide a very low mass cooling method.</p> <p>Note that the above calculations are the minimum requirement.  Allowance should be made for higher than expected ambient temperatures, higher than expected power use, and an amount of thermal headroom before the motor controller's thermal protection activates.</p>"},{"location":"Motor_Controllers/WaveSculptor22/User_Manual/Cooling.html#short-term-peak-power-use","title":"Short Term Peak Power Use","text":"<p>As a further example, say that your vehicle uses a 160V DC bus, and requires 80A motor current for two minutes to do a fast qualifying time.  The graph above shows that the motor controller will be producing around 120W of loss at this power level.  Ambient temperature is high, at 40 \u00b0C, and the maximum cold plate temperature specified in the datasheet is 70 \u00b0C \u2013 please check the datasheet for the correct value.  Assume that the vehicle begins the qualifying lap with a heatsink at ambient temperature.</p> <p>Heat from the controller in this type of scenario could possibly be stored, rather than immediately rejected to ambient.  In the situation above, the total energy required to be adsorbed by the heatsink is 120W * 120 seconds = 14.4kJ.  Using an aluminium block (specific heat = 0.897J/g \u00b0C) and a 30\u00b0C temperature rise would require a mass of m = Q/\u2206T.c =14.4kJ/30 \u00b0C * 0.897 = 535g.  Using a thin aluminium case containing water (specific heat = 4.186J/g \u00b0C, almost 5x better than aluminium) would reduce this mass to 115g.</p> <p>Combining this type of heat storage device with the continuous use heatsink to ambient air will result in a cooling solution suitable both for constant lower power operation, and with the heat capacity to absorb peaks of high current operation.  </p> <p>A combined system could be made with an all aluminium system, with a ~535g block mounted into the skin of the vehicle.  This provides a low-risk option.</p> <p>Alternatively, other types of system such as one using a small volume of circulating water are possible, with the water providing both heat transport from the motor controller to an ambient cooling plate in the skin of the car, and also thermal mass to absorb short term high power use.  </p>"},{"location":"Motor_Controllers/WaveSculptor22/User_Manual/Cooling.html#mechanical-interface","title":"Mechanical Interface","text":"<p>The WaveSculptor provides a large flat surface to attach to your cooling solution.  Refer to the mechanical drawing for dimensions and details.</p> <p>Use a thin layer of thermal grease or conformable thermal gap filler pad to fill any air gaps between the WaveSculptor cold plate and your heatsink, and provide the best thermal path between the two.  This material is not required to be electrically insulating.</p> <p>Attach the heatsink to the cold plate using eight M4 screws threading into the tapped inserts in the motor controller base, making certain to note the maximum screw depth specified in the datasheet.  </p> <p>Warning</p> <p>Exceeding this depth will force the screw into internal components of the motor controller, almost certainly damaging it.</p>"},{"location":"Motor_Controllers/WaveSculptor22/User_Manual/DBC.html","title":"Prohelion WaveSculptor 22 DBC File","text":"<p>The following DBC file can be used to decode the CAN Packets transmitted by this device.</p> <pre><code>VERSION \"\"\n\n\nNS_ : \n    NS_DESC_\n    CM_\n    BA_DEF_\n    BA_\n    VAL_\n    CAT_DEF_\n    CAT_\n    FILTER\n    BA_DEF_DEF_\n    EV_DATA_\n    ENVVAR_DATA_\n    SGTYPE_\n    SGTYPE_VAL_\n    BA_DEF_SGTYPE_\n    BA_SGTYPE_\n    SIG_TYPE_REF_\n    VAL_TABLE_\n    SIG_GROUP_\n    SIG_VALTYPE_\n    SIGTYPE_VALTYPE_\n    BO_TX_BU_\n    BA_DEF_REL_\n    BA_REL_\n    BA_DEF_DEF_REL_\n    BU_SG_REL_\n    BU_EV_REL_\n    BU_BO_REL_\n    SG_MUL_VAL_\n\nBS_:\n\nBU_: WaveSculptor22\n\n\nBO_ 128 IDInfo: 8 WaveSculptor22\n SG_ TritiumID : 0|32@1+ (1,0) [0|0] \"\" Vector__XXX\n SG_ SerialNumber : 32|32@1+ (1,0) [0|0] \"\" Vector__XXX\n\nBO_ 129 Status: 8 WaveSculptor22\n SG_ LimitReserved : 7|9@1+ (1,0) [0|511] \"On / Off\" Vector__XXX\n SG_ LimitIpmOrMotorTemp : 6|1@1+ (1,0) [0|1] \"On / Off\" Vector__XXX\n SG_ LimitBusVoltageLower : 5|1@1+ (1,0) [0|1] \"On / Off\" Vector__XXX\n SG_ LimitBusVoltageUpper : 4|1@1+ (1,0) [0|1] \"On / Off\" Vector__XXX\n SG_ LimitBusCurrent : 3|1@1+ (1,0) [0|1] \"On / Off\" Vector__XXX\n SG_ LimitVelocity : 2|1@1+ (1,0) [0|1] \"On / Off\" Vector__XXX\n SG_ LimitMotorCurrent : 1|1@1+ (1,0) [0|1] \"On / Off\" Vector__XXX\n SG_ LimitOutputVoltagePWM : 0|1@1+ (1,0) [0|1] \"On / Off\" Vector__XXX\n SG_ ErrorReserved : 25|7@1+ (1,0) [0|0] \"On / Off\" Vector__XXX\n SG_ ErrorMotorOverSpeed : 24|1@1+ (1,0) [0|1] \"On / Off\" Vector__XXX\n SG_ ErrorDesaturationFault : 23|1@1+ (1,0) [0|1] \"On / Off\" Vector__XXX\n SG_ Error15vRailUnderVoltage : 22|1@1+ (1,0) [0|1] \"On / Off\" Vector__XXX\n SG_ ErrorConfigRead : 21|1@1+ (1,0) [0|1] \"On / Off\" Vector__XXX\n SG_ ErrorWatchdogCausedLastReset : 20|1@1+ (1,0) [0|1] \"On / Off\" Vector__XXX\n SG_ ErrorBadMotorPositionHallSeq : 19|1@1+ (1,0) [0|1] \"On / Off\" Vector__XXX\n SG_ ErrorDcBusOverVoltage : 18|1@1+ (1,0) [0|1] \"On / Off\" Vector__XXX\n SG_ ErrorSoftwareOverCurrent : 17|1@1+ (1,0) [0|1] \"On / Off\" Vector__XXX\n SG_ ErrorHardwareOverCurrent : 16|1@1+ (1,0) [0|1] \"On / Off\" Vector__XXX\n SG_ ActiveMotor : 32|16@1+ (1,0) [0|0] \"\" Vector__XXX\n SG_ TxErrorCount : 48|8@1+ (1,0) [0|0] \"\" Vector__XXX\n SG_ RxErrorCount : 56|8@1+ (1,0) [0|0] \"\" Vector__XXX\n\nBO_ 130 BusMeasurement: 8 WaveSculptor22\n SG_ BusVoltage : 0|32@1- (1,0) [0|0] \"V\" Vector__XXX\n SG_ BusCurrent : 32|32@1- (1,0) [0|0] \"A\" Vector__XXX\n\nBO_ 131 VelocityMeasurement: 8 WaveSculptor22\n SG_ MotorVelocity : 0|32@1- (1,0) [0|0] \"rpm\" Vector__XXX\n SG_ VehicleVelocity : 32|32@1- (1,0) [0|0] \"m/s\" Vector__XXX\n\nBO_ 132 PhaseCurrentMeasurement: 8 WaveSculptor22\n SG_ PhaseCurrentB : 0|32@1- (1,0) [0|0] \"A_rms\" Vector__XXX\n SG_ PhaseCurrentC : 32|32@1- (1,0) [0|0] \"A_rms\" Vector__XXX\n\nBO_ 133 MotorVoltageVectorMeasurement: 8 WaveSculptor22\n SG_ Vq : 0|32@1- (1,0) [0|0] \"V\" Vector__XXX\n SG_ Vd : 32|32@1- (1,0) [0|0] \"V\" Vector__XXX\n\nBO_ 134 MotorCurrentVectorMeasurement: 8 WaveSculptor22\n SG_ Iq : 0|32@1- (1,0) [0|0] \"A\" Vector__XXX\n SG_ Id : 32|32@1- (1,0) [0|0] \"A\" Vector__XXX\n\nBO_ 135 BackEMFMeasurementPrediction: 8 WaveSculptor22\n SG_ BEMFq : 0|32@1- (1,0) [0|0] \"V\" Vector__XXX\n SG_ BEMFd : 32|32@1- (1,0) [0|0] \"V\" Vector__XXX\n\nBO_ 136 VoltageRail15VMeasurement: 8 WaveSculptor22\n SG_ Supply15V : 32|32@1- (1,0) [0|0] \"V\" Vector__XXX\n SG_ ReservedSupply15V : 0|32@1- (1,0) [0|0] \"\" Vector__XXX\n\nBO_ 137 VoltageRail3V31V9Measurement: 8 WaveSculptor22\n SG_ Supply1V9 : 0|32@1- (1,0) [0|0] \"V\" Vector__XXX\n SG_ Supply3V3 : 32|32@1- (1,0) [0|0] \"V\" Vector__XXX\n\nBO_ 138 Reserved0A: 8 WaveSculptor22\n SG_ Reserved0A0 : 0|32@1- (1,0) [0|0] \"\" Vector__XXX\n SG_ Reserved0A1 : 32|32@1- (1,0) [0|0] \"\" Vector__XXX\n\nBO_ 139 HeatsinkMotorTempMeasurement: 8 WaveSculptor22\n SG_ MotorTemp : 0|32@1- (1,0) [0|0] \"C\" Vector__XXX\n SG_ HeatsinkTemp : 32|32@1- (1,0) [0|0] \"C\" Vector__XXX\n\nBO_ 140 DspBoardTempMeasurement: 8 WaveSculptor22\n SG_ DspBoardTemp : 0|32@1- (1,0) [0|0] \"C\" Vector__XXX\n SG_ ReservedDspBoardTemp : 32|32@1- (1,0) [0|0] \"\" Vector__XXX\n\nBO_ 141 Reserved0D: 8 WaveSculptor22\n SG_ Reserved0D0 : 0|32@1- (1,0) [0|0] \"\" Vector__XXX\n SG_ Reserved0D1 : 32|32@1- (1,0) [0|0] \"\" Vector__XXX\n\nBO_ 142 OdometerBusAhMeasurement: 8 WaveSculptor22\n SG_ Odometer : 0|32@1- (1,0) [0|0] \"m\" Vector__XXX\n SG_ DCBusAh : 32|32@1- (1,0) [0|0] \"Ah\" Vector__XXX\n\nBO_ 151 SlipSpeedMeasurement: 8 WaveSculptor22\n SG_ SlipSpeed : 0|32@1- (1,0) [0|0] \"Hz\" Vector__XXX\n SG_ ReservedSlipSpeed : 32|32@1- (1,0) [0|0] \"\" Vector__XXX\n\n\n\nCM_ SG_ 128 TritiumID \"Device identifier. 0x00004003\";\nCM_ SG_ 128 SerialNumber \"Device serial number, allocated at manufacture.\";\nCM_ SG_ 129 ActiveMotor \"The index of the active motor currently being used.\";\nCM_ SG_ 129 TxErrorCount \"The DSP CAN transmission error counter (CAN 2.0)\";\nCM_ SG_ 129 RxErrorCount \"The DSP CAN receive error counter (CAN 2.0)\";\nCM_ SG_ 130 BusVoltage \"DC bus voltage at the controller.\";\nCM_ SG_ 130 BusCurrent \"Current drawn from the DC bus by the controller.\";\nCM_ SG_ 131 MotorVelocity \"Motor angular frequency in revolutions per minute.\";\nCM_ SG_ 131 VehicleVelocity \"Vehicle velocity in metres / second.\";\nCM_ SG_ 132 PhaseCurrentB \"RMS current in motor Phase B.\";\nCM_ SG_ 132 PhaseCurrentC \"RMS current in motor Phase C.\";\nCM_ SG_ 133 Vq \"Imaginary component of the applied non-rotating voltage vector to the motor.\";\nCM_ SG_ 133 Vd \"Real component of the applied non-rotating voltage vector to the motor.\";\nCM_ SG_ 134 Iq \"Imaginary component of the applied non-rotating current vector to the motor. This current produces torque in the motor and should be in phase with the back-EMF of the motor\";\nCM_ SG_ 134 Id \"Real component of the applied non-rotating current vector to the motor. This vector represents the field current of the motor.\";\nCM_ SG_ 135 BEMFq \"The peak of the phase to neutral motor voltage.\";\nCM_ SG_ 135 BEMFd \"By definition this value is always 0V.\";\nCM_ SG_ 136 Supply15V \"Actual voltage level of the 15V power rail.\";\nCM_ SG_ 137 Supply1V9 \"Actual voltage level of the 1.9V DSP power rail.\";\nCM_ SG_ 137 Supply3V3 \"Actual voltage level of the 3.3V power rail.\";\nCM_ SG_ 139 MotorTemp \"Internal temperature of the motor\";\nCM_ SG_ 139 HeatsinkTemp \"Internal temperature of Heat-sink (case).\";\nCM_ SG_ 140 DspBoardTemp \"Temperature of the DSP board.\";\nCM_ SG_ 142 Odometer \"Distance the vehicle has travelled since reset.\";\nCM_ SG_ 142 DCBusAh \"Charge flow into the controller DC bus from the time of reset.\";\nCM_ SG_ 151 SlipSpeed \"Slip speed when driving an induction motor.\";\nBA_DEF_ BO_  \"GenMsgCycleTime\" INT 2 50000;\nBA_DEF_ BU_  \"GenNodAutoGenSnd\" ENUM  \"No\",\"Yes\";\nBA_DEF_ BU_  \"GenNodAutoGenDsp\" ENUM  \"No\",\"Yes\";\nBA_DEF_  \"GenEnvVarEndingDsp\" STRING ;\nBA_DEF_  \"GenEnvVarEndingSnd\" STRING ;\nBA_DEF_  \"GenEnvVarPrefix\" STRING ;\nBA_DEF_DEF_  \"GenMsgCycleTime\" 100;\nBA_DEF_DEF_  \"GenNodAutoGenSnd\" \"Yes\";\nBA_DEF_DEF_  \"GenNodAutoGenDsp\" \"Yes\";\nBA_DEF_DEF_  \"GenEnvVarEndingDsp\" \"Dsp\";\nBA_DEF_DEF_  \"GenEnvVarEndingSnd\" \"Snd\";\nBA_DEF_DEF_  \"GenEnvVarPrefix\" \"Env\";\nBA_ \"GenMsgCycleTime\" BO_ 128 1000;\nBA_ \"GenMsgCycleTime\" BO_ 129 200;\nBA_ \"GenMsgCycleTime\" BO_ 130 200;\nBA_ \"GenMsgCycleTime\" BO_ 131 200;\nBA_ \"GenMsgCycleTime\" BO_ 132 200;\nBA_ \"GenMsgCycleTime\" BO_ 133 200;\nBA_ \"GenMsgCycleTime\" BO_ 134 200;\nBA_ \"GenMsgCycleTime\" BO_ 135 200;\nBA_ \"GenMsgCycleTime\" BO_ 136 1000;\nBA_ \"GenMsgCycleTime\" BO_ 137 1000;\nBA_ \"GenMsgCycleTime\" BO_ 138 0;\nBA_ \"GenMsgCycleTime\" BO_ 139 1000;\nBA_ \"GenMsgCycleTime\" BO_ 140 1000;\nBA_ \"GenMsgCycleTime\" BO_ 141 1000;\nBA_ \"GenMsgCycleTime\" BO_ 142 1000;\nBA_ \"GenMsgCycleTime\" BO_ 151 200;\nSIG_VALTYPE_ 130 BusVoltage : 1;\nSIG_VALTYPE_ 130 BusCurrent : 1;\nSIG_VALTYPE_ 131 MotorVelocity : 1;\nSIG_VALTYPE_ 131 VehicleVelocity : 1;\nSIG_VALTYPE_ 132 PhaseCurrentB : 1;\nSIG_VALTYPE_ 132 PhaseCurrentC : 1;\nSIG_VALTYPE_ 133 Vq : 1;\nSIG_VALTYPE_ 133 Vd : 1;\nSIG_VALTYPE_ 134 Iq : 1;\nSIG_VALTYPE_ 134 Id : 1;\nSIG_VALTYPE_ 135 BEMFq : 1;\nSIG_VALTYPE_ 135 BEMFd : 1;\nSIG_VALTYPE_ 136 Supply15V : 1;\nSIG_VALTYPE_ 136 ReservedSupply15V : 1;\nSIG_VALTYPE_ 137 Supply1V9 : 1;\nSIG_VALTYPE_ 137 Supply3V3 : 1;\nSIG_VALTYPE_ 138 Reserved0A0 : 1;\nSIG_VALTYPE_ 138 Reserved0A1 : 1;\nSIG_VALTYPE_ 139 MotorTemp : 1;\nSIG_VALTYPE_ 139 HeatsinkTemp : 1;\nSIG_VALTYPE_ 140 DspBoardTemp : 1;\nSIG_VALTYPE_ 140 ReservedDspBoardTemp : 1;\nSIG_VALTYPE_ 141 Reserved0D0 : 1;\nSIG_VALTYPE_ 141 Reserved0D1 : 1;\nSIG_VALTYPE_ 142 Odometer : 1;\nSIG_VALTYPE_ 142 DCBusAh : 1;\nSIG_VALTYPE_ 151 SlipSpeed : 1;\nSIG_VALTYPE_ 151 ReservedSlipSpeed : 1;\n</code></pre>"},{"location":"Motor_Controllers/WaveSculptor22/User_Manual/Driver_Controls.html","title":"Driver Controls","text":"<p>Wire and install the hardware driver controls as described in the Driver Controls User's Manual or use your own driver control that provide the necessary capabilities to run the WaveSculptor.</p> <p>Test the driver controls as described in the User Manual.  </p>"},{"location":"Motor_Controllers/WaveSculptor22/User_Manual/Driving.html","title":"Driving","text":"<p>Warning</p> <p>Perform the following tests in a location off public roads, in an area free of obstructions.  Take all appropriate safety precautions when performing this testing. Using the Windows configuration software, set the vehicle mass to the actual mass of the vehicle, so that the velocity control loop will be tuned optimally.</p>"},{"location":"Motor_Controllers/WaveSculptor22/User_Manual/Driving.html#ev-driver-controls","title":"EV Driver Controls","text":"<p>Wire and install the hardware driver controls as described in the EV Driver Controls User's Manual.</p> <p>Test the driver controls as described in the EV Driver Controls User's Manual</p>"},{"location":"Motor_Controllers/WaveSculptor22/User_Manual/Driving.html#procedure","title":"Procedure","text":"<p>Perform the same checks that were performed with the vehicle off the ground.</p> <ul> <li> Driving forwards</li> <li> Car coasts to a stop when accelerator pedal is lifted</li> <li> Driving in reverse</li> <li> Car coasts to a stop when accelerator pedal is lifted</li> <li> Appropriate action happens when brake pedal is pushed</li> <li> If your driver controls is configured to use regen, it works correctly in forwards</li> <li> If your driver controls is configured to use regen, it works correctly in reverse</li> <li> Selecting Neutral on the driver controls makes the car coast to a stop</li> <li> Turning off the key makes the car coast to a stop</li> </ul>"},{"location":"Motor_Controllers/WaveSculptor22/User_Manual/Driving.html#on-road-testing","title":"On Road Testing","text":"<p>After meeting all the relevant regulations in your country for vehicle registration and safety checks, you should be ready to drive your car out in the real world!  We suggest gradually building up your confidence in the new drive system with a series of tests, at increasing speeds and power levels.  </p>"},{"location":"Motor_Controllers/WaveSculptor22/User_Manual/Getting_Started.html","title":"Getting Started","text":"<p>Work through this manual in sequence, using this checklist as you go:</p> <ul> <li> Items arrived in good condition</li> <li> Read and understood the datasheet</li> <li> Read and understood this document</li> <li> A good mounting location chosen</li> <li> Cooling system designed</li> <li> Controller mounted into place</li> <li> CAN Bus &amp; 12V supply wiring installed</li> <li> PC software installed</li> <li> 12V supply and CAN communications functioning</li> <li> Motor sense connections completed</li> <li> Motor phase cables connected</li> <li> Precharge system working</li> <li> HV DC cables connected</li> <li> PhasorSense routines run and saved</li> <li> Motor test at low voltage, wheels off ground, using PC software</li> <li> Motor test at low voltage, wheels off ground, using driver controls hardware</li> <li> Motor test at high voltage, wheels off ground, using PC software</li> <li> Motor test at high voltage, wheels off ground, using driver controls hardware</li> <li> Private road test</li> <li> On-road vehicle test</li> </ul> <p>Check that all items on the packing list are in the box and undamaged.  Contact the shipping company and Prohelion if there is obvious outer box damage during transport.  Contact Prohelion immediately if there is a discrepancy with the items or other damage.  </p> <p>You will require the following specialised tools for installing the WaveSculptor motor controller:</p> <ul> <li> Allen (hex) keys</li> <li> Molex MicroFit crimp tool</li> <li> Cable cutters</li> <li> Hex lug or hydraulic crimp tool</li> <li> Various electronics hand tools for low power cable cutting &amp; stripping</li> </ul>"},{"location":"Motor_Controllers/WaveSculptor22/User_Manual/High_Power_Connections.html","title":"High Power Connections","text":"<p>It is important to correctly terminate the high power wiring for successful long-term operation of the controller.  DC battery and AC motor phase connections should be crimped to bolt lug crimp terminals.  The bolts in the WaveSculptor22 have a metric M6 thread, so use a lug designed for this size bolt, with a 6.5mm hole.  </p> <p>High power connections should not be soldered for vehicle applications, as the solder wicks up inside the copper strands and creates a stress point, which can fatigue and break due to the vibration present in a vehicle.</p> <p>For a guide to good quality crimping of the high power connections, please read Appendix B of this document.</p> <p>Copper oxidation is a threat to the long-term reliability of both the crimp and the bolted joint to the controller.  Use a thin smear of anti-oxidation electrical jointing compound on the contact surface of the crimp lug when bolting the cable to the controller, as shown in the diagram below.  </p> <p></p> Anti Oxidation Compound Application <p>The bolts are permanently assembled into the motor controller, and are prevented from rotating by a nylon holder.  </p> <p>To assemble the bolted joint follow these steps:</p> <ul> <li>Route the cable in through the rubber grommet and locate the crimp lug down over the stud.  It is easiest to push the cable through with the lug vertical, and rotate it down over the top of the bolt.</li> <li>Place a plain washer on top of the lug</li> <li>Place a spring washer on top of the lug</li> <li>Thread a nut over the stud</li> <li>Use a torque wrench to tighten the nut to no more than 6Nm.</li> </ul>"},{"location":"Motor_Controllers/WaveSculptor22/User_Manual/High_Power_Connections.html#cable","title":"Cable","text":"<p>The cable used to connect to the high-power terminals must be rated for the full DC battery voltage as a minimum. The current rating of the cable will depend on your expected load and duty cycle for your driving habits in your vehicle.  The WaveSculptor bolt terminal area is designed to accept up to 16mm<sup>2</sup> cable with an outside diameter of up to 10mm.  Prohelion suggests the use of at least 110\u00b0C rated PVC cable (note that standard PVC is 90\u00b0C rated) to allow a longer duration of peak power output without exceeding the cable temperature rating \u2013 this may allow the use of a smaller cross-section cable, saving some weight.</p> <p>The cable should have orange coloured insulation.  This is required by the NCOP14 standard for EV conversions in Australia, but is a good idea in any case.  This is what is used in the Prius and other hybrid vehicles, and emergency response personnel are trained to not cut through orange cables.  Use a short piece of red or black insulation at the ends of the orange cable to indicate polarity.</p> <p>Use of flexible cable with a high number of fine strands is advised, to help with cable routing and reduce strain and fatigue on the terminations.  Prohelion recommends using \u201cZDFX\u201d double-insulated 0.6/1kV 110\u00b0C rated cable from Tycab Australia, which is made with a high number of 0.2mm strands, resulting in a flexible cable.  It is available in orange insulation.  Similar cable will be available from alternative suppliers in other countries.</p>"},{"location":"Motor_Controllers/WaveSculptor22/User_Manual/High_Power_Connections.html#motor-inductance","title":"Motor Inductance","text":"<p>The WaveSculptor requires a minimum of 50\u00b5H inductance (phase \u2013 neutral) per phase to operate correctly. Please ensure that sufficient external inductance has been added if your motor does not have at least this amount of inductance already.  External inductors will most likely only be required on ultra-high efficiency ironless BLDC type motors.</p> <p>These external inductors must be rated to the full motor current and have windings insulated to the full DC bus voltage.</p>"},{"location":"Motor_Controllers/WaveSculptor22/User_Manual/High_Power_Connections.html#high-power-connections_1","title":"High Power Connections","text":"<p>The positions of the various connections are shown on the front panel of the controller, and also labelled next to the bolt terminal on the PCB.  Make certain that the DC+ and DC\u2013 connections are the correct polarity.</p>"},{"location":"Motor_Controllers/WaveSculptor22/User_Manual/High_Power_Connections.html#testing","title":"Testing","text":"<p>At this point, do not connect the other end of the high power DC NEG and DC POS cables to your precharge circuit or batteries.  You will need to connect them to a low-voltage supply of power for initial testing, which is detailed in the Motor Setup &amp; Testing section of this document.</p>"},{"location":"Motor_Controllers/WaveSculptor22/User_Manual/High_Power_Connections.html#precharge","title":"Precharge","text":"<p>The WaveSculptor22 has 270\u00b5F of extremely low-impedance capacitance across the DC bus input connections. An external precharge circuit is mandatory.</p> <p>When not driving a motor, the WaveSculptor draws minimal power from the DC bus, with only a high-value discharge resistor to bleed charge. Therefore, careful attention should be given when working on the controller to ensure that the capacitors have been discharged first.  Note that these capacitors hold around 3 Joules of energy and take around one minute to discharge to safe levels.</p> <p>Prohelion can provide a circuit to implement the precharge function, as part of our  BMS system.  Please refer to the product webpage for more information.  There are a variety of other ways to implement precharge but many do not automatically check for faults and may overheat themselves in the event of a problem.</p>"},{"location":"Motor_Controllers/WaveSculptor22/User_Manual/High_Power_Connections.html#fusing","title":"Fusing","text":"<p>At least one appropriately rated fuse must be installed in the high voltage DC circuit.  This fuse must be rated to the highest expected DC voltage.  AC rated fuses are not appropriate, unless they have a DC rating as well.  </p> <p>Choosing the current rating of the fuse depends on your expected load, the maximum fault current in the battery system, duration of loads, cable sizes, and several other factors.  It is beyond the scope of this document to detail fuse selection for your vehicle.</p> <p>Note that the WaveSculptor can be programmed to limit the current it draws from the DC bus connection, which may simplify fuse, contactor and wiring selection.    However, this will also have the effect of limiting total system power throughput, so be aware that when setting it to less than 100% that you may compromise your vehicle performance.</p>"},{"location":"Motor_Controllers/WaveSculptor22/User_Manual/High_Power_Connections.html#hv-isolation","title":"HV Isolation","text":"<p>The WaveSculptor has an isolation barrier rated to 1kV continuously between the CAN bus, the DC bus, and the Motor position connection. This helps minimise damage in the event of a fault, and also allows safe connection of the high voltage battery pack.</p> <p>Prohelion recommends that the CAN bus be operated at the system ground potential, with CAN Ground connected to the vehicle chassis at some point in your system.</p> <p>The battery ground, high-voltage DC connections, and motor phases should be isolated from the vehicle chassis. This is so that a single fault anywhere in the high voltage system will not result in a high voltage potential being present between any wiring and the chassis of the vehicle.</p> <p>Please refer to any relevant regulations governing this type of connection.</p>"},{"location":"Motor_Controllers/WaveSculptor22/User_Manual/Motor_Sense_Connections.html","title":"Motor Sense Connections","text":"<p>The WaveSculptor22 requires a position sensor to be able to control the motor.  It can also measure the temperature of the motor, and gradually reduce the motor current if this temperature rises towards a user-programmable threshold. </p> <p>Since there are a large variety of possible combinations of position and temperature sensors, Prohelion has implemented the interface on the motor controller in a generic manner.  Small adapter circuit boards, suitable for mounting directly inside the motor terminal box, are used to adapt the sensors in that motor to the interface required by the WaveSculptor22.  This also provides a robust signalling mechanism (isolated, differential) for the longest length of cable possible.  The WaveSculptor provides isolated, regulated +5V and +12V DC to power the external adapter.  Refer to the datasheet for specifications on these supplies.</p> <p>The WaveSculptor provides four isolated differential inputs for information from the motor.  Three of these are routed to timer/capture peripherals in the main processor, and are normally used for three Hall-effect position sensors.  The fourth channel is routed to a UART serial receiver, and expects digital data.  Depending on the adapter board, this data may contain temperature, position, velocity, or a combination of all three.  </p> <p>A brief datasheet for each adapter option is available in the Motor Sense Documentation.  If your motor requires an adapter that is not yet available, please contact Prohelion to enquire about development, as new adapters are simple and low-cost to design.</p>"},{"location":"Motor_Controllers/WaveSculptor22/User_Manual/Motor_Sense_Connections.html#connector-pinout","title":"Connector Pinout","text":"<p>The connector used on the WaveSculptor22 for motor sense signals is a 14-way 3mm pitch Molex MicroFit connector.  The pinout is shown below, as viewed from the wire side \u2013 as you would look at it while inserting crimps.  Please refer to Appendix B for an overview of correct crimping technique, as poor crimps will cause unreliable operation.</p> <p></p> Connector Pinout <p>The wiring for this connector should be implemented with twisted pairs, as the signal inputs are differential.  Prohelion recommends using Belden 9506 type cable (shielded 6 pair) for this connection, with suggested cable colours shown above.</p>"},{"location":"Motor_Controllers/WaveSculptor22/User_Manual/Motor_Sense_Connections.html#motor-position-sense","title":"Motor Position Sense","text":"<p>For operating Brushless DC (BLDC) and Permanent Magnet Synchronous (PMSM) type motors, the WaveSculptor requires three motor position sensing inputs, commonly provided using Hall-effect switches embedded in the motor.</p> <p>Please note that the relation between each Hall-effect input and a motor output phase, as well as the polarity of the Hall-effect input signal, does not matter. The WaveSculptor will detect these relationships when running its initial setup and configuration routine (PhasorSense). The only requirement for these signals is that they have a fixed alignment (ideally, a 0\u00b0 offset) with the zero-crossing point of the back-EMF waveform of the motor, and that the signals are offset from each other by 120\u00b0. This is where most motors will be configured by default.  Use an oscilloscope to check that this angle is close to 0\u00b0 for your motor.</p>"},{"location":"Motor_Controllers/WaveSculptor22/User_Manual/Motor_Sense_Connections.html#motor-temperature-sense","title":"Motor temperature Sense","text":"<p>Prohelion's motor adapters are currently available for use with NTC thermistor and Pt100 temperature sensor elements.  Variations are possible to accommodate thermocouple and LM35-type semiconductor sensors also.</p>"},{"location":"Motor_Controllers/WaveSculptor22/User_Manual/Motor_Setup_And_Testing.html","title":"Motor Setup and Testing","text":""},{"location":"Motor_Controllers/WaveSculptor22/User_Manual/Motor_Setup_And_Testing.html#low-power-setup","title":"Low Power Setup","text":"<p>At this stage, put the car on a vehicle lift, or use a secure method to lift the drive wheels from the ground. </p> <p>A low voltage supply should be connected to perform the next stage of testing.  Note that if it is necessary to run these tests again later, they may be run from the high voltage pack \u2013 it is not necessary to disconnect everything and use a low voltage setup.  At this point however, the low voltage supply should be used as a safer option until it is known that everything in the system is working correctly.</p> <p>A suitable low voltage supply is a pair of 12V batteries in series.  Make sure to fuse them correctly, and use your precharge circuit.  A power supply with current limiting is the best option if one is available.</p> <p>Run the PC software, and provide 12V along the CAN cable to power up the motor controller electronics.  You should see telemetry values updating on the PC.  Connect the 24V to the high power section of the motor controller.  You should see the reported battery voltage on the PC show the correct value.</p> <p>If you are using a BLDC or other permanent magnet motor, refer to the software user's manual for the procedure to run PhasorSense.  This routine identifies the relationship between motor phases and hall position sensors.</p> <p>Next, run the parameter extraction routine, which calculates motor parameters.  Save the results into one of the ten available motor configuration slots.  In the general configuration screen, set this motor slot as the \u201cActive Motor\u201d.</p> <p>For bench testing with an unloaded motor, set the vehicle mass in the config screen to 30kg.  Using the actual vehicle mass when running with an unloaded motor will cause the velocity control loop to overshoot and oscillate around the setpoint.</p>"},{"location":"Motor_Controllers/WaveSculptor22/User_Manual/Motor_Setup_And_Testing.html#low-power-testing","title":"Low Power Testing","text":""},{"location":"Motor_Controllers/WaveSculptor22/User_Manual/Motor_Setup_And_Testing.html#pc-software-control","title":"PC Software Control","text":"<p>This test will check that the motor spins and is configured correctly.  </p> <p>Open the controls screen in the PC software (View \u2192 Controls). There are three sliders, setting Motor Current, Motor Velocity, and Bus (battery) current respectively.  The motor controller will use up to whatever motor current you have set to try and achieve the requested velocity.  The motor current will be limited if the battery current reaches the bus current setpoint.</p> <p>If using batteries as the power source, regenerative braking (regen) can also be tested.  DO NOT test regen braking if using a power supply for the 24V source, as you will force current back into the supply and damage it.</p> <p>The motor controller will regen if the velocity is set to a lower speed than the motor is actually moving, and motor current is above zero. </p> <p>To stop without regen braking:</p> <p>1.  Zero the motor current, then 2.  Zero the velocity</p> <p>To stop with regen braking:</p> <p>1.  Set motor current to your desired regen current, then 2.  Zero the velocity</p> <p>Now that the motor is configured correctly, set the Bus Current to 100%, if it is not already.  Change the Velocity slider to around 10%.  Now, gradually increase the Motor Current slider, and the motor should smoothly accelerate to a moderate speed.</p> <p>Zero the motor current, then zero the velocity, and the motor should smoothly coast to a stop.</p> <p>Now set the velocity slider to 100%.  Once again, gradually increase the motor current.  The motor should smoothly accelerate to a faster speed than before.  Zero the motor current, then zero the velocity.  </p> <p>If using batteries, now test regen braking.  Set velocity to 100%.  Gradually increase motor current.  Now, with the motor spinning, set motor current to around 10%.  Zero the velocity.  The motor will regen brake to a halt.  Since it does not have the mass of a vehicle to damp the system, it may then oscillate slightly forwards and backwards \u2013 this should be relatively minimal if the vehicle mass was set to 30kg as outlined in the previous section.  Zero the motor current when near zero speed to stop this happening.</p>"},{"location":"Motor_Controllers/WaveSculptor22/User_Manual/Motor_Setup_And_Testing.html#driver-controls-hardware","title":"Driver Controls Hardware","text":"<p>Remove the CAN cable and termination resistor from the CAN-Ethernet bridge, and connect them both to the EV Driver Controls hardware.  </p> <p>Provide 12V power to the driver controls.  Go through the startup sequence as described in the Driver Controls User's Manual.  Depending on the exact firmware you have this will usually involve turning the key to the start position, and selecting forward gear in the driver controls. </p> <p>Use the accelerator (gas) pedal to run the motor.  Complete the following checks:</p> <ul> <li> Driving forwards</li> <li> Car coasts to a stop when accelerator pedal is lifted</li> <li> Driving in reverse</li> <li> Car coasts to a stop when accelerator pedal is lifted</li> <li> Appropriate action happens when brake pedal is pushed</li> <li> If your driver controls is configured to use regen, it works correctly in forwards</li> <li> If your driver controls is configured to use regen, it works correctly in reverse</li> <li> Selecting Neutral on the driver controls makes the car coast to a stop</li> <li> Turning off the key makes the car coast to a stop</li> </ul>"},{"location":"Motor_Controllers/WaveSculptor22/User_Manual/Motor_Setup_And_Testing.html#high-power-testing","title":"High Power Testing","text":"<p>Make sure your precharge circuit, contactors, and fusing are in place.  Check the polarity of the supply cables to the WaveSculptor.  Take all appropriate safety precautions when working on the HV circuitry.  Depending on the legislation in your country, you may require a licensed electrician to work on the high voltage parts of the system.</p> <p>Making sure that all contactors are off, in the safe state, make the bolt connections to the DC POS and DC NEG terminals of the WaveSculptor.</p>"},{"location":"Motor_Controllers/WaveSculptor22/User_Manual/Motor_Setup_And_Testing.html#pc-software-control_1","title":"PC Software Control","text":"<p>Move the CAN cable and termination resistor from the hardware driver controls and reconnect it to the CAN-Ethernet bridge.  Run the PC software.  Run through the same checks as outlined in the previous 24V low voltage testing section.  </p>"},{"location":"Motor_Controllers/WaveSculptor22/User_Manual/Motor_Setup_And_Testing.html#driver-controls-hardware_1","title":"Driver Controls Hardware","text":"<p>Reconnect the CAN cable and termination resistor to the hardware driver controls.  Run through the same checks as listed above in the 24V driver controls hardware testing.  </p> <p>Test at least the following functionality:</p> <ul> <li> Driving forwards</li> <li> Car coasts to a stop when accelerator pedal is lifted</li> <li> Driving in reverse</li> <li> Car coasts to a stop when accelerator pedal is lifted</li> <li> Appropriate action happens when brake pedal is pushed</li> <li> If your driver controls is configured to use regen, it works correctly in forwards</li> <li> If your driver controls is configured to use regen, it works correctly in reverse</li> <li> Selecting Neutral on the driver controls makes the car coast to a stop</li> <li> Turning off the key makes the car coast to a stop</li> </ul>"},{"location":"Motor_Controllers/WaveSculptor22/User_Manual/Mounting.html","title":"Mounting","text":""},{"location":"Motor_Controllers/WaveSculptor22/User_Manual/Mounting.html#choosing-a-location","title":"Choosing a Location","text":"<p>Careful attention should be paid to positioning the WaveSculptor correctly, to ensure optimum performance.</p> <p>The main criteria for choosing a good mounting location are environment, heatsinking, and cable positioning.</p> <p>The WaveSculptor may be mounted in any orientation including upside-down.</p> <p>Tool access (2mm hex key) is required at both ends of the motor controller to be able to remove the lid and make the high power bolt connections.</p>"},{"location":"Motor_Controllers/WaveSculptor22/User_Manual/Mounting.html#environmental","title":"Environmental","text":"<p>The WaveSculptor is not rated to withstand water spray or drips.  Mount it in a dry location.  A good location will probably also have some ambient airflow, to help with heatsinking.</p>"},{"location":"Motor_Controllers/WaveSculptor22/User_Manual/Mounting.html#heatsinking","title":"Heatsinking","text":"<p>The WaveSculptor22 does not contain any internal fans or active cooling components. For most uses, external cooling will have to be provided. Refer to the Cooling chapter later in this document for details.</p>"},{"location":"Motor_Controllers/WaveSculptor22/User_Manual/Mounting.html#cable-positioning","title":"Cable Positioning","text":"<p>The WaveSculptor has been designed with all cables and connections to the device at the front edge, to allow simplified positioning in your vehicle. The DC bus and motor phase cables can be quite stiff, make sure to allow enough room in front of the controller so that they can bend at greater than minimum radius.  </p>"},{"location":"Motor_Controllers/WaveSculptor22/User_Manual/PC_Software.html","title":"PC Software","text":"<p>WaveSculptor Software is now bundled in Prohelion Profinity</p> <p>To download the PC Software to configure your WaveSculptor, download Profinity and configure a WaveSculptor in your Profile.</p> <p>Refer to the Software Download section on the Prohelion Website for the Configuration &amp; Setup software tool download, while you can download the Configuration Tools separately, we recommend Prohelion Profinity, which integrates the tools as well as a number of other useful utilities.</p> <p>Refer to the Software User's Manual for installation and usage instructions.</p>"},{"location":"Motor_Controllers/WaveSculptor22/User_Manual/PC_Software.html#ethernet-bridge-installation","title":"Ethernet Bridge Installation","text":"<p>Refer to the CAN-Ethernet bridge User's Manual for installation and setup of this piece of hardware.</p> <p>Connect the Ethernet bridge via a CAN bus cable to the WaveSculptor. Use 120 ohm termination resistors between the CAN-H and CAN-L lines at both items.</p> <p></p> CAN Network"},{"location":"Motor_Controllers/WaveSculptor22/User_Manual/PC_Software.html#low-voltage-and-can-bus-testing","title":"Low Voltage and CAN Bus Testing","text":"<p>Provide 12V DC to the CAN bus adapter at the CAN-Ethernet Bridge, to power up both the Ethernet Bridge and the WaveSculptor control electronics.  </p> <p>If everything is connected correctly, you should see telemetry values appearing and updating several times per second in the PC software window.</p>"},{"location":"Profinity_Software/index.html","title":"Prohelion Profinity","text":"<p>Profinity is our comprehensive CAN bus management platform, designed to connect your CAN-based solutions to modern cloud, API, and big data technologies. Choose your version below to get started.</p>"},{"location":"Profinity_Software/index.html#available-versions","title":"Available Versions","text":"<ul> <li> <p> Profinity V2</p> <p>The latest version of Profinity, featuring:</p> <ul> <li>Modern container and API-centric architecture</li> <li>Enhanced cloud connectivity</li> <li>Improved user interface</li> <li>Advanced device management</li> </ul> <p> Modern web-based interface of Profinity V2 </p> <p> Profinity V2 Documentation</p> <p>Profinity V2 IS NOW IN EARLY ADOPTER RELEASE</p> <p>Profinity V2 is available now in Early Adopter Release.  To support this release we are making the product available to our Early Adopter Community.  If you have any issues or feedback please report them via our support portal or via the Feedback form in the Profinity Admin menu.</p> </li> <li> <p> Profinity V1 (Retired Soon)</p> <p>The original version of Profinity, supporting:</p> <ul> <li>Basic CAN bus management</li> <li>Device configuration</li> <li>Data logging</li> <li>Simple cloud integration</li> </ul> <p> Classic interface of Profinity V1 </p> <p> Profinity V1 Documentation</p> </li> </ul>"},{"location":"Profinity_Software/index.html#key-features-of-profinity","title":"Key Features of Profinity","text":""},{"location":"Profinity_Software/index.html#device-management","title":"Device Management","text":"<ul> <li>Connect and configure CAN bus devices</li> <li>Support for multiple device types</li> <li>Real-time monitoring and control</li> </ul> Adding and configuring devices in Profinity"},{"location":"Profinity_Software/index.html#data-integration","title":"Data Integration","text":"<ul> <li>Cloud connectivity options</li> <li>API access for custom integrations</li> <li>Advanced data logging capabilities</li> </ul> Advanced data logging and analysis features"},{"location":"Profinity_Software/index.html#security-v2-only","title":"Security (V2 Only)","text":"<ul> <li>Role-based access control</li> <li>Secure credential management</li> <li>Audit logging</li> </ul> Secure user management and access control"},{"location":"Profinity_Software/index.html#support","title":"Support","text":"<p>Need help? We're here to assist:</p> <ul> <li>Visit our Support Portal</li> <li>Contact Us directly</li> </ul>"},{"location":"Profinity_Software/Profinity_Version_1/index.html","title":"Prohelion Profinity","text":"<p>Profinity is a modern CAN Bus management platform designed to enable the connection of CAN Bus based solution to modern Cloud, APIs and Big Data technologies.</p> <p>Download Profinity </p> <p>Originally developed by Prohelion to manage our own products it has evolved over time to be multi-platform solution, capable of running on Windows, Linux, MacOS and Docker, with a core engine, easily extendable via Restful APIs.</p> <p>Profinity is built around the concept of profiles, which is a set of configured devices in your system.  By switching between profiles you can support multiple configurations across different sites of different combinations of technologies.  The configuration of the system is largely driven by the Profinity GUI, but once configured, the solution can run as a service, providing continuous data streams off servers or embedded devices, or run from the cloud.</p> <p></p> Profinity <p>Profinity can connect to CAN Bridges, which translate CAN Bus traffic from your network to the Profinity solution, you can send and receive and view CAN Bus messages either raw or using DBC, log messages and replay them.  You can also use Profinity to share CAN Bus data from your system to your team, either in near real time via a Prohelion Cloud Connect data stream, or via the logs to cloud data logging platforms. </p> <p>It provides specialised tools for managing Prohelion Batteries and chargers, MPPT systems from Elmar Solar and WaveSculptors as well as any device that can be defined by a CAN DBC file.  </p>"},{"location":"Profinity_Software/Profinity_Version_1/index.html#profinity-server-rest-apis-web-and-docker","title":"Profinity Server (Rest APIs, Web and Docker)","text":"<p>As of Profinity 1.11, Prohelion has migrated to a modern container and API centric architecture.  You will find information on our Restful APIs and Swagger Support in the documentation as well as our out of the box Cloud connectivity for InfluxDB and Prometheus to support cloud based Big Data capture and analytics of CAN Bus based solutions.  </p> <p>In addition we now support for Profinity running as a Server on Windows, Docker, Linux and MacOS.</p> <p>If you require support or assistance, please Contact Us via the Prohelion Website or you can log bugs, requests for help or requests for improvement on our Support Portal.</p>"},{"location":"Profinity_Software/Profinity_Version_1/Adding_New_Items.html","title":"Adding new items to your Profile","text":"<p>Items can be added to your profile by right mouse clicking on the profile and selecting 'Add / New Item', at which point a panel is shown with all of the available items that can be added.</p> <p></p> Add a new item to the Profile <p>Adding a new item is as simple as selecting what you want to add to your profile, changing the properties to whatever you require and then pressing the add button.  </p> <p>If the profile already has an item with the same name as what you are proposing, then a digit will be added to the item name to keep the profile item names unique.</p> <p></p> Adjust Item Properties <p>You can add multiple items of the same type to your profile, but they must have unique names and the base address of the item is also generally unique.</p>"},{"location":"Profinity_Software/Profinity_Version_1/Battery_Charging.html","title":"Profinity Battery Charging","text":"<p>Profinity can manage charging of your pack by controlling your Prohelion BMU and a charger to put charge in the pack.</p> <p>Profinity Charging supports four charging products as well as balancing capabilities to ensure that your pack cells remain balanced and in good condition.</p> <p></p> Siglent Charger"},{"location":"Profinity_Software/Profinity_Version_1/Battery_Charging.html#supported-chargers","title":"Supported Chargers","text":"<p>TDK Power Supplies</p> <p>Profinity supports TDK Programmable Power Supplies such as the Genesys family.  Profinity supports the TDK Power Supplies via their TCP interface.  For TDK Power supplies that only have a serial interfaces for programming it is necessary to add a TCP to Serial Converter in to the solution so that Profinity can communicate via TCP.</p> <p>Elcon Chargers</p> <p>Elcon Chargers are widely used in the EV industry and Profinity supports controlling the Elcon Charger via its CAN bus interface. To operate a Elcon Charger via CAN bus the charger must be connected to a CAN bus interface that is configured in Profinity.</p> <p>Signet Power Supplies</p> <p>The Signet Power Supplies that support a programmable TCP interface can be controlled by Profinity.  Units such as the Siglent SPD3303X-E are widely used by Prohelion clients for desktop testing scenarios.</p> <p>ITech Power Supplies</p> <p>ITech provides a large range of bi-directional power supplies that are supported by the Profinity solution.  Profinity uses ITech's TCP interface for controlling the supply at this time we do not support the ITech CAN bus interface.</p>"},{"location":"Profinity_Software/Profinity_Version_1/Battery_Charging.html#charging-steps","title":"Charging Steps","text":""},{"location":"Profinity_Software/Profinity_Version_1/Battery_Charging.html#step-1-add-a-charger-to-your-profile","title":"Step 1 - Add a Charger to your Profile","text":"<p>A charger is configured as a device in Profinity so the first step to charging your pack is to add a charger to your Profile.  Note your Profile needs to also include a Prohelion BMU so that the battery can be controlled by Profinity</p>    Your browser does not support the video tag.  <p></p>"},{"location":"Profinity_Software/Profinity_Version_1/Battery_Charging.html#step-2-connect-to-your-charger","title":"Step 2 - Connect to your Charger","text":"<p>By default chargers in Profinity do not auto connect (this can be changed in the charger Profile settings if you do want to auto connect your charger).  Once your charger is connected and the light is green, click the charge button. </p>    Your browser does not support the video tag.  <p></p>"},{"location":"Profinity_Software/Profinity_Version_1/Battery_Charging.html#step-3-engage-contactors-start-charging","title":"Step 3 - Engage Contactors, Start Charging","text":"<p>Once everything is configured, charging the pack is a three step process;</p> <p>1. Set the max charge current that you want to apply to the pack</p> <p>2. Engage the contactors using the \"Engage Contactors\" button</p> <p>3. Press the \"Start Charge\" button</p> <p>Charge will then flow to the pack from the charger.</p>    Your browser does not support the video tag."},{"location":"Profinity_Software/Profinity_Version_1/Battery_Charging.html#troubleshooting-charging","title":"Troubleshooting Charging","text":"<p>Charging can be complex to setup at times as it requires both the charger and Prohelion BMU to be managed to operate as expected.</p> <p>Key things to considering if you are troubleshooting a charging setup.</p>"},{"location":"Profinity_Software/Profinity_Version_1/Battery_Charging.html#are-your-devices-working-independently","title":"Are your devices working independently?","text":"<p>Make sure all devices in the configuration are showing the Green circle in the Profile window.  If a device is grey or red then it should be fixed so that it is working fully before you start charging</p>"},{"location":"Profinity_Software/Profinity_Version_1/Battery_Charging.html#make-sure-your-pack-engages-as-expected","title":"Make sure your pack engages as expected","text":"<p>A common issue we see with charging is where there is current flow from the battery in to the charger during pre-charge.   If this is occurring it can cause the pre-charge sequence to fail and the pack will not engage.  </p> <p>This issue can be tested outside of charging by simply trying to engage the pack with the \"Engage Contactors\" button, while connected to the charger.  If the contactors do not engage while connected to the charger then the issue exists.</p> <p>This problem can typically be solved by putting a suitably sized diode in to the charger circuit to ensure that current can only flow from the charger to the pack and not the other way.</p>"},{"location":"Profinity_Software/Profinity_Version_1/Battery_Charging.html#be-aware-of-maximum-currents-and-voltages","title":"Be aware of maximum currents and voltages","text":"<p>The Profile configuration for your charger sets the maximum voltages and currents that the charger and wall circuit can supply.</p> <p>Be aware of these values when configuring your charger as it may be possible to overload the wall circuit if you are drawing too much power from your charger for the circuit.</p> <p>It is also very important to be aware of the maximum current that you battery can take during a charge process.  </p> <p>Profinity is not aware of your battery configuration beyond the information provided by the BMU.  Keep the maximum current at or below the recommended currents for your cells to ensure that your batteries are not damaged in the charge process.</p>"},{"location":"Profinity_Software/Profinity_Version_1/CAN_Bus_Adapters.html","title":"CAN Bus Adapters","text":"<p>An adapter is the technology that you use to connect Profinity to your CAN Bus network.  </p> <p>Profinity on Windows supported adapters include the Prohelion and Tritium CAN Bus bridges as well as SocketCAN using the SocketCanD technology and the Peak CAN to USB Adapter.</p> <p>When running the Peak CAN to USB Adapter</p> <p>It is necessary to install the driver for the device before starting Profinity.  Use the supplied Peak tools to ensure your adapter is working as expected before starting Profinity and then AutoDiscovered the adapter as per normal</p> <p>When running Profinity on Docker or Linux additional support is also provided for the native SocketCAN Adapter.</p> <p>Adapters can be added in one of two ways, either via Auto Discovery or Manually.</p>"},{"location":"Profinity_Software/Profinity_Version_1/CAN_Bus_Adapters.html#adapter-auto-discovery","title":"Adapter Auto Discovery","text":"<p>The supported CAN Bus adapters can be automatically found via the Auto Discovery mechanism.  If an adapter is defined and visible on the network then clicking the CAN Adapters button on the menu or right clicking on the Profile and selecting 'Add Adapter Via Autodiscovery' will work.</p> <p>In the Autodiscovery window you will find all of the adapters that are currently visible to Profinity.  If your adapter does not show up here then you may have configuration issues that need to be addressed.</p> <p></p> Add an Adapter via AutoDiscovery <p>Having trouble finding a CAN over Ethernet Bridge with Autodiscovery?</p> <p>The CAN over Ethernet Bridges have a number of configuration options and at times may not behave as expected.  Check out our guide on the CAN to Ethernet Bridges for tips and tricks on getting them working.</p>"},{"location":"Profinity_Software/Profinity_Version_1/CAN_Bus_Adapters.html#adapter-manual-configuration","title":"Adapter Manual Configuration","text":"Add an Adapter"},{"location":"Profinity_Software/Profinity_Version_1/CAN_Bus_Adapters.html#adapter-status","title":"Adapter Status","text":"<p>Once your adapter has been added to the Profile then the colour of the circle indicates the health of the adapter.  Ideally your adapter should have a green circle, the colour signals for the adapters are as follows;</p> Colour Meaning <code>Green</code> Good, adapter is connected and we are getting data <code>Yellow</code> Warning, adapter is connected but no data is arriving <code>Red</code> Error, see the logs for more details <code>Grey</code> N/A, adapter is not connected"},{"location":"Profinity_Software/Profinity_Version_1/CAN_Bus_DBC.html","title":"CAN Bus DBC","text":"<p>DBC is a file format that can be used to describe the format and nature of CAN Bus data.  With a DBC file CAN data can be understood more clearly and broken down in to Signals and Messages, the fundamental building blocks of a DBC file.</p> <p>For the moment, Profinity provides a DBC Viewer that can be used to take a DBC file and will show the CAN Bus traffic travelling through the Profinity system as Messages and Signals.</p> <p></p> CAN DBC Viewer <p>To use the DBC viewer with a third party DBC file you need to create a new item in your Profile and in the configuration properties for that new item provide the DBC file.  </p> <p>Once this has been done then you will see the item in your profile and by right mouse clicking on it you can access information about its Messages and Signals.</p> <p>Many of the other components supported by Profinity such as the Elmar Solar MPPT and the WaveSculptor have support for DBC built in to the component and also allow you to view Messages and Signals, without requiring a separate DBC file.</p>"},{"location":"Profinity_Software/Profinity_Version_1/Elmar_Solar_MPPT.html","title":"Elmar Solar MPPT","text":""},{"location":"Profinity_Software/Profinity_Version_1/Elmar_Solar_MPPT.html#elmar-solar-mppt","title":"Elmar Solar MPPT","text":"<p>Elmar Solar some of the worlds most efficient Peak Power Trackers (MPPT).  These trackers are used to optimize the power output of Solar Arrays.  You can purchase Elmar Solar MPPT devices through the Prohelion website.</p> <p>You can manage an Elmar Solar MPPT using Profinity by adding a new Elmar MPPT tracker through your Profile and once the MPPT is available right mouse clicking on the item will show you a menu option for the 'Elmar MPPT Dashboard'.</p> <p></p> Elmar Solar MPPT <p>The Elmar Solar MPPT devices also give you the ability to see the raw CAN data via the DBC view.  To access this you need to right mouse click on the item and select 'Show Messages and Signals'.</p>"},{"location":"Profinity_Software/Profinity_Version_1/InfluxDB_Prometheus_Integration.html","title":"InfluxDB and Prometheus Logging","text":"<p>Profinity provides the ability to both log and replay messages off your CAN Bus network as well as the ability to log CAN Bus data to timeseries databases like InfluxDB and Prometheus.</p> <p></p> Data Log Replayer <p>InfluxDB is an all in one solution with data storage and visualisation included in a single tool.  Prometheus just provides data storage and is typically coupled with Grafana for visualisation.  </p> <p>All of these tools are available in commercially supported and Open Source (community supported) editions.</p>"},{"location":"Profinity_Software/Profinity_Version_1/InfluxDB_Prometheus_Integration.html#influxdb","title":"InfluxDB","text":"<p>To log your CAN Bus data to InfluxDB v1 or v2 firstly install InfluxDB and get it up and running.</p> <p>InfluxDB Versions are Important</p> <p>Make sure you are using the right version of the InfluxDB Logger as Profinity's v1 and v2 logger support Influx v1 and v2 which use different protocols.</p> <p>Logging the data is simple, just add a InfluxDB device to your profile and configure the following options. </p> Setting Purpose InfluxDB Bucket What InfluxDB bucket do you want to store your data in? InfluxDB Organisation What InfluxDB organisation do you want to use? InfluxDB Token Security token for the user you are connecting to InfluxDB as InfluxDB URL Endpoint URL that InfluxDB is running on InfluxDB Health Check Asks the logger to regularly perform a health check on the connection <p>Once these settings have been set correctly you should be able to see data flowing in to InfluxDB, if you do not check the Logs for more details.  </p> <p>InfluxDB Cloud HealthCheck Warning</p> <p>InfluxDB cloud does not support the InfluxDB Health Check API and therefore you need to switch InfluxDB Health Check to false when using the cloud solution for storing your data.</p>"},{"location":"Profinity_Software/Profinity_Version_1/InfluxDB_Prometheus_Integration.html#prometheus","title":"Prometheus","text":"<p>Prometheus logging works in a completely different manner to InfluxDB logging.  </p> <p>Where InfluxDB expects its data to be pushed to it, Prometheus treats Profinity as a source of data, calling it and asking for the latest values.  Prometheus also does not have graphing capability out of the box, rather it is usually coupled with a tool like Grafana to provide the graphing capability.</p> <p>Adding a Prometheus device to Profinity is all that is required on the Profinity side to set it up for Prometheus logging.  There are three configuration values that can be set :</p> Setting Purpose Data Endpoint URL What URL within the hostname and port should the Prometheus data be served on Server Hostname What adapter should the logger connect to on the local machine (could be an IP address) Server Port What port should the end point run on <p>Once the device is active then Prometheus can call Profinity on this URL to receive data.</p> <p>For example if you left everything as the default, the Profinity instance would be available on </p> <pre><code>http://localhost:7065/metrics\n</code></pre> <p>Information on how to configure Prometheus to receive and display this data is covered in the Prometheus documentation.</p>"},{"location":"Profinity_Software/Profinity_Version_1/Logging_Replaying_CAN_Bus_Messages.html","title":"Log / Replay CAN Bus Messages","text":"<p>Profinity provides the ability to both log and replay messages off your CAN Bus network as well as the ability to log CanBUS data to timeseries databases like InfluxDB and Prometheus.  </p> <p>To log a set of CAN Bus messages first add an adapter to your Profile and then connect to the adapter.  </p> <p>It's always worth checking that you are actually receiving CAN Bus messages by using the Receive CAN Bus window first.  Once you have got CAN Bus messages coming in to Profinity you are read to log.</p>"},{"location":"Profinity_Software/Profinity_Version_1/Logging_Replaying_CAN_Bus_Messages.html#logging-can-bus","title":"Logging CAN Bus","text":"<p>There are two distinct types of loggers available in Profinity, loggers to log to file and loggers that log to timeseries databases such as InfluxDB and Prometheus.</p> <p>All loggers are configured in the same manner, by adding a logging device to the Profile.</p>"},{"location":"Profinity_Software/Profinity_Version_1/Logging_Replaying_CAN_Bus_Messages.html#file-ftp-sftp-based-loggers","title":"File / FTP / SFTP Based Loggers","text":"<p>File based loggers in Profinity have three potential modes of operation, you can either</p> Log Mode Details <code>Log Locally to Disk</code> Writes the log files to your local file system. <code>Log Remotely via FTP</code> As well as logging locally this option takes the log file and places it on a remote FTP server for off site analysis. <code>Log Remotely via SFTP</code> As per FTP, but this time a Secure FTP (SFTP) end point is used as the destination. <p>Depending on the item you select, Profinity will present you with different destination options.  For FTP and SFTP it is necessary to provide the destination server, username and password.  For local logging only a directory is required.</p> <p>The logger also gives you the ability to manage Archive and Compression settings, if you wish to archive your messages you must provide an archive directory.</p> Setting Purpose <code>Compress Logs</code> Once a log file has reached the size limit, then it is compressed. <code>Archive Old Logs</code> Older log files are rotated to an archive directory based on a rotation policy <code>Limit Archive Size To</code> Maintains a maximum number of log files at this number, older logs are deleted <p>Finally the logger allows you to set the frequency of rotation.  Rotation means that the old log file is closed and a new one is created and Profinity allows you to define a minute based log rotation or a size base log rotation depending on your preference.</p> <p></p> Data Logger <p>Logging configurations are stored as part of your profile so when you load a profile, if you have the logger setup to automatically start then it will start logging automatically.</p>"},{"location":"Profinity_Software/Profinity_Version_1/Logging_Replaying_CAN_Bus_Messages.html#data-validation","title":"Data Validation","text":"<p>Profinity uses data entry validation to ensure the information you provide is valid.  </p> <p>When an invalid value is entered in this screen the field will turn to an orange colour, indicating an issue.  If the field is white then the data is fine.</p> <p></p> Data Logger Error"},{"location":"Profinity_Software/Profinity_Version_1/Logging_Replaying_CAN_Bus_Messages.html#data-log-replayer","title":"Data Log Replayer","text":"<p>The Profinity data log replayer allows you to replay log files that have previously been recorded in Profinity.</p> <p>To use this tool simply select the log file and it will start replaying.  There are also a number of options available that can change the way the log file is replayed.</p> Setting Purpose <code>Include / Exclude IDs</code> Instruct the log replayer to only include or exclude values between these two CAN Bus IDs <code>Loop log file replay</code> When the log file reaches the end, automatically loop back to the start <code>Transmit CAN Bus over Network</code> Normally the log file is only replayed locally, by selecting the Transmit option the log file is transmitted over any active CAN-Ethernet Bridges <p>Sliding the slider back and forth allows you to easily move to new locations in the CAN Bus replay file.</p> <p></p> Data Log Replayer"},{"location":"Profinity_Software/Profinity_Version_1/Logging_Replaying_CAN_Bus_Messages.html#time-series-based-loggers","title":"Time Series Based Loggers","text":"<p>Profinity supports two time series databases for logging, InfluxDB and Prometheus.  For more information on setting up theses tools see the InfluxDB and Prometheus documentation.</p>"},{"location":"Profinity_Software/Profinity_Version_1/Profiles.html","title":"Profinity Profiles","text":"<p>A Profile is the core mechanism by which Profinity maintains the configuration of your system.  Profiles typically consist of one or more CAN-Ethernet Bridges, which are used to connect to the CAN network as well as devices that you might be managing.</p> <p>Profinity keeps track of your profile and loads the most recently used one each time you start the tool.</p> <p>The Profile panel is typically located on the left side of your screen and if you close the profile you can open it again by pressing the Profile button on the menu.</p> <p></p> Profinity Profile <p>The colours in a profile indicate the state of the device.  </p> Colour Meaning <code>Green</code> The device is available, sending valid data and is a valid state <code>Yellow</code> The device is available, but is either not sending data or is a warning state <code>Red</code> The device is in an error state <code>Grey</code> The device is not available, connected or not visible on the network <p>Profinity ships with an example profile called the PET Profile (Prohelion / Elmar / Tritium) which contains all the necessary configuration to support a vehicle based on Prohelion, Elmar and Tritium technologies.  If you wish to use this profile as a basis for your own work we would suggest copying it to a new file name as the file is overwritten each time you install a new version of Profinity. </p> <p>Otherwise you can create your own Profiles or a new Profile, by pushing the New Profile button on the menu.</p>"},{"location":"Profinity_Software/Profinity_Version_1/Profiles.html#profile-files","title":"Profile Files","text":"<p>In Profinity the profiles themselves are stored by default as files in the directory</p> <p><code>/Documents/Prohelion/Profinity/Profiles</code></p> <p>While it is possible to edit the profile file directly in a text we do not recommend you do so. </p> <p>Storing the file in this way makes it easy to share a Profile and if it makes sense if your environment, profiles can be stored on network drives or other shares such as Google Drive or Dropbox, you can also share a read only version of your Profile via Prohelion Cloud Connect</p>"},{"location":"Profinity_Software/Profinity_Version_1/Profiles.html#profile-properties","title":"Profile Properties","text":"<p>Each item in the profile has a set of properties that define the configuration of the item.  These properties can be accessed by selecting the item or right mouse clicking on the item and selecting properties.  The properties then appear at the bottom of the profile panel, changing a property will set it in the profile.</p> <p>Properties can also be set when the item is first created in the New Items window.  </p> <p>However, not all devices are configured directly via Properties, some devices that have more complex configuration setups like the Prohelion Loggers are configured via wizards that set the underlying properties correctly for you.  </p> <p></p> Profile Properties <p>The properties shown will depend on the device.  Some devices have a range of values that are allowed for a property and if an invalid property is entered then an error will be shown.  Information on the property is shown at the very bottom of the property panel.</p>"},{"location":"Profinity_Software/Profinity_Version_1/Profinity_Log.html","title":"Profinity Log","text":"<p>Profinity has a built in logging mechanism that captures information about the operation of the system.  Typically this log appears at the bottom of the Profinity screen.  If you close the log and wish to view it again, then the log button on the menu bar will make it reappear.</p> <p></p> Prohelion Log <p>The level of debugging shown in the log file can be varied by changing the log level.  If you are trying to diagnose a problem then setting the log level to a lower level (like debug), may assist.</p> <p>Log levels are persisted</p> <p>Once a log level is set, it will remain persisted across restarts of Profinity</p>"},{"location":"Profinity_Software/Profinity_Version_1/Profinity_Rest_APIs.html","title":"Rest APIs, Swagger and Hosting","text":"<p>Prohelion is actively developing the Profinity Rest APIs as part of a transition of Profinity to a next generation management solution.  In doing this we taking a very widely used but tradition solution of CAN Bus and bringing it in to the modern world of Cloud, Docker, Rest and other technologies that are used to build modern, leading edge, user interfaces and applications.</p> <p>As well as supporting Restful APIs, Profinity's overall solution allows you to build completely custom User Interfaces based on Profinity and host those interfaces either externally or within the Profinity solution.</p> <p>Important Information Regarding Profinity Rest APIs</p> <p>Prohelions API solution is currently evolving rapidly as we develop new capabilities. Please be aware of this when developing solutions based on Profinity's APIs, as available APIs and models may evolve rapidly from release to release. </p> <p>Profinity APIs are unsecured on Public Network Interfaces</p> <p>Our Profinity API's do not currently support API security and are designed to be used behind a user interface and in a secured environment.  If you are planning to expose these APIs via outside of the server or directly to clients we would suggest front ending them with a API gateway for enhanced security.</p>"},{"location":"Profinity_Software/Profinity_Version_1/Profinity_Rest_APIs.html#enabling-rest-apis","title":"Enabling Rest APIs","text":"<p><code>/Documents/Prohelion/Profinity/Config/Config.yaml</code></p> <p>Or if you are running on MacOs or Linux under your home directory.</p> <p><code>$home/Prohelion/Profinity/Config/Config.yaml</code></p> <p>To access the APIs you will need to both enable the Profinity integrated web server and API's.  To do so, set the WebSite to be enabled as well as both the RestAPI's and for development purposes we would also suggest enabling Swagger.</p> <pre><code>  WebServer:\n    Urls: http://localhost:5000\n    HttpsRedirect: false\n    WebSite:\n      Enabled: true\n    RestAPI:\n      Enabled: true\n      Swagger: true\n</code></pre> <p>Restart Profinity and you should now be able to go to the Rest APIs Swagger Interface at http://localhost:5000/swagger, or whatever port and interface combination you have setup followed by /swagger and from there you will be able to see the specifications for the API's and test their capabilities.</p> <p>Requests to retrieve CAN Packet information allow you to retrieve the packet either via CAN Id or using a DBC Message and Signal.</p> <p></p>"},{"location":"Profinity_Software/Profinity_Version_1/Profinity_Rest_APIs.html#testing-with-swagger","title":"Testing with Swagger","text":"<p>Prohelions API solution allows you to test your API calls in Swagger before developing any code.  </p>    Your browser does not support the video tag.  <p></p>"},{"location":"Profinity_Software/Profinity_Version_1/Profinity_Rest_APIs.html#accessing-historical-data-via-apis","title":"Accessing Historical Data via APIs","text":"<p>APIs can provide both realtime and historical data, when a InfluxDB database is configured in the profile.  If no InfluxDB is setup, then only realtime data is available.</p> <p>The /api/v1/CAN/{Message}/{Signal} api is used to get historical data.  To use this API request a DBC Message and Signal as well as a InfluxDB time range that you wish to retrieve the data for.  The API will then call InfluxDB and retrieve all of the data stored across that time frame for this signal.</p> <p>For more information on configuring InfluxDB see the InfluxDB and Prometheus Integration section of this documentation.</p>"},{"location":"Profinity_Software/Profinity_Version_1/Profinity_Rest_APIs.html#hosting-custom-web-user-interfaces","title":"Hosting Custom Web User Interfaces","text":"<p>As well as hosting the Rest APIs and Swagger interface, Profinity supports an integrated Web Server that can provide hosting for a custom build application based on these APIs in any modern web technology.  This includes language and frameworks such as ReactJS and Angular as well as traditional HTML / Javascript etc.</p> <p><code>/Documents/Prohelion/Profinity/Webroot</code></p> <p>Or if you are running on MacOs or Linux under your home directory.</p> <p><code>$home/Prohelion/Profinity/Webroot</code></p> <p>By default the Profinity web server will serve the index.html file from this directory if no URL is provided by the calling web browser.</p>"},{"location":"Profinity_Software/Profinity_Version_1/Profinity_Rest_APIs.html#production-configuration-and-https","title":"Production Configuration and HTTPs","text":"<p>The Profinity Web Server supports SSL / TLS style certificates for Production environments.  There are two options available for certificates, either using a Windows Certificate Store or providing a Certificate file and Password, which works on either Windows or MacOS &amp; Linux.</p> <p>HttpsRedirect can be set for force all HTTP traffic to the HTTPs interface and second HTTPs interface should be provided in the Urls option in this case. We would generally also recommend disabling Swagger in a production environment.</p> <p>When using a certification from a Windows Certificate store you will need to provide the CertStoreName, CertStoreLocation and CertStoreSubject properties in the configuration file</p> <pre><code>  WebServer:\n    Urls: http://localhost:5000:https://localhost:5001\n    HttpsRedirect: true\n    CertStoreName: ProductionStore\n    CertStoreLocation: CurrentUser\n    CertStoreSubject: Profinity\n    WebSite:\n      Enabled: true\n    RestAPI:\n      Enabled: true\n      Swagger: false\n</code></pre> <p>Alternatively you can provide a cert file and cert password</p> <pre><code>  WebServer:\n    Urls: http://localhost:5000:https://localhost:5001\n    HttpsRedirect: true\n    CertFile: C:\\Storage\\MyX509Certificate.cer\n    CertPassword: Th!sIsThe5assword    \n    WebSite:\n      Enabled: true\n    RestAPI:\n      Enabled: true\n      Swagger: false\n</code></pre>"},{"location":"Profinity_Software/Profinity_Version_1/Profinity_Server.html","title":"Profinity Server Mode","text":"<p>As of version 1.11 Profinity is now available to run in server mode on Windows, Docker, MacOS and Linux (64 bit Intel and Arm chips only).  </p> <p>In this mode, the Profinity GUI is replaced by a Custom UI you can develop and extend, supported by our REST APIs.</p> <p>Why Profinity Server?</p> <p>Do you have a CAN Bus based platform and want to provide modern API centric front ends to support user kiosks or other advanced user interfaces, sophisticated modern data analytics and reporting, remote logging or to run your solution in the cloud, desktop, or embedded hardware?  Profinity Server supports this need.</p> <p>Prohelion provides the Windows Profinity release for general public use.  It is designed for developers who are using the Rest API and Kiosk / Web Hosting capabilities of Profinity to develop and test their solutions.  </p> <p>This Windows release can be used for development and testing without any additional licensing.</p> <p>Profinity Server does not require any additional Prohelion Hardware to run. It can be used as a general purpose development framework for anyone writing modern web UI's for CAN Bus based architectures or wanting to provide a modern server style interface to your CAN infrastructure with native cloud connectivity.  </p> <p>However, if you are not using Prohelion hardware, you will still need some way to connect to your CAN Bus network, see the CAN Adapters page for information on supported CAN Bus adapters that you can use.</p> <p>Licensing for Production Environments</p> <p>Use of Profinity server in production environments on Windows, Docker, Linux or MacOS may require an additional license key depending on your commercial status with Prohelion.</p> <p>If you are interested in using the tools for your Production environments and do not currently have a Profinity Server arrangement with us, please contact Prohelion on the Contact Us Page of our website and we would be happy to assist with additional information.</p>"},{"location":"Profinity_Software/Profinity_Version_1/Profinity_Server.html#platform-support","title":"Platform Support","text":"<p>Profinity supports operating in service mode on Windows, Linux, MacOS and inside a Docker container.  </p> <p>Support for other Environments</p> <p>If you would like access to our docker, Linux and MacOS software you will need to contact us first as we do not currently provide these downloads directly to the public.</p> <p>Please contact Prohelion on the Contact Us Page of our website and we would be happy to assist with additional information.</p>"},{"location":"Profinity_Software/Profinity_Version_1/Profinity_Server.html#running-as-a-service","title":"Running as a Service","text":"<p>In the 'headless' service mode, Profinity continues to operate as normal with some minor differences in behaviour.</p> <ul> <li> <p>There is no GUI, the server can only be accessed via the APIs and Web Interfaces.</p> </li> <li> <p>Profile files if they need to be chanced, are edited directly rather than through the GUI.  When a Profile file is changed Profinity detects this change and automatically reloads the Profile.</p> </li> <li> <p>Config files are also edited directly, changing a Config file requires a service restart.</p> </li> <li> <p>Profinity Logs are logged as normal and available in the Log directory under</p> </li> </ul> <p><code>[user]/Documents/Prohelion/Profinity/Logs</code></p>"},{"location":"Profinity_Software/Profinity_Version_1/Profinity_Server.html#installing-profinity-as-a-windows-service","title":"Installing Profinity as a Windows Service","text":"<p>In the installation directory of Profinity you will find a file called ProfinityService.cmd.  If default configuration options have been selected for the installation directory, the file is typically found here.</p> <p><code>C:\\Program Files (x86)\\Prohelion\\Profinity\\ProfinityService.cmd</code></p> <p>In order to run the script, you will need to be an administrator.  Open a cmd window as an administrator by searching for cmd, right clicking on it, selecting 'Run As Administrator'.</p> <p>While a default installation of the service can be performed to install the service under the service user of LocalSystem.  We would generally recommend installing Profinity under a different user account, for two reasons.</p>"},{"location":"Profinity_Software/Profinity_Version_1/Profinity_Server.html#security","title":"Security","text":"<p>By running Profinity as a user you are reducing the security level and hence exposure</p>"},{"location":"Profinity_Software/Profinity_Version_1/Profinity_Server.html#profile-files","title":"Profile files","text":"<p>When running as a service, the Prohelion home directory of the service user is</p> <p><code>C:\\Windows\\SysWOW64\\Prohelion\\Profinity</code></p> <p>This can be hard to work with in some environments and generally we would not want to be regularly modifying files stored in the Windows directory.  As such you are generally better off installing Profinity under a user account using a command such as.</p> <pre><code>ProfinityService.cmd install [Username to install under]\n</code></pre> <p>As the Profile files then get created in that users account directories.</p> <p>If you do wish to install Profinity under the LocalSystem user, then simply run.</p> <pre><code>ProfinityService.cmd install\n</code></pre> <p>Once this is done you will find Profinity in your Windows Services list and it can be managed as per any other service.</p> <p>Port Conflicts</p> <p>Once Profinity is started as a service, if you are serving API or Web content then there will be a conflict on those ports if you try to start another instance of Profinity on the machine with the same configuration.  If you want to both serve content and develop on one machine at the same time, we suggest installing Profinity under a separate user account to keep these instances from conflicting and use different ports for your development and production instances, by changing the port in the Config file.</p>"},{"location":"Profinity_Software/Profinity_Version_1/Profinity_Server.html#uninstall-profinity-as-a-windows-service","title":"Uninstall Profinity as a Windows Service","text":"<p>To uninstall Profinity as a Windows Service, run the command below as an administrator from the cmd window.</p> <pre><code>ProfinityService.cmd uninstall\n</code></pre>"},{"location":"Profinity_Software/Profinity_Version_1/Prohelion_Batteries.html","title":"Prohelion Batteries","text":"<p>Prohelion design and sells Battery Management Systems (BMS) designed for both automotive and fixed location environments.</p> <p>The Prohelion Battery Management technology is built around three main components.  The Battery Management Unit (BMU) which consists of a master board and a number of Cell Management Units (CMU)'s.  In addition to the BMU and CMUs a typical Prohelion battery may also contain a 12v Control System which monitors the onboard 12v capabilities.  For more information on these products, please see the main Prohelion Website.</p> <p>Profinity supports the management and monitoring of the BMUs, CMUs and 12v systems via your profile.  </p> <p>A typical battery will generally only have one BMU, but larger packs or split packs like the ones used in racing can involve two or more BMUs.  If your pack is configured like that then you simply add multiple BMUs to your profile with different base CAN addresses.</p>"},{"location":"Profinity_Software/Profinity_Version_1/Prohelion_Batteries.html#bmu-management","title":"BMU Management","text":"<p>The top section shows data from the BMU, while the lower section shows CMU data \u2013 one row per CMU.</p> <p></p> Prohelion BMU"},{"location":"Profinity_Software/Profinity_Version_1/Prohelion_Batteries.html#bmu-data","title":"BMU DATA","text":"<p>The top row of BMU data presents the following information (left to right):</p> Cell Meaning <code>Min mV</code> Minimum voltage cell in the pack, and its voltage. The example shows Node (CMU) 8, Cell 0 is minimum, at 3699mV <code>Max mV</code> Maximum voltage cell in the pack, and its voltage. The example shows Node (CMU) 14, Cell 7 is maximum, at 3799mV <code>Min C</code> Minimum temperature cell in the pack, and it's temperature <code>Max C</code> Maximum temperature cell in the pack, and it's temperature <code>Pack mV</code> Total pack voltage <code>Pack mA</code> Total pack current <code>Balance +</code> Balance threshold voltage <code>Balance -</code> Balance threshold minimum voltage (balance voltage \u2013 hysteresis) <code>CMU Count</code> CMU count in system <p>The next row shows Precharge status information on the left:</p> Cell Meaning <code>Prechrg Status</code> Current state (Idle, Precharge, Run, etc) Contactor 12V supply voltage presence (mV on v4 or older BMUs) <p>The buttons in the BMU section shows the various status flags, some flags are normal and show green when engaged, if buttons are showing orange or red then consult the BMU manual for more information.</p> <p>Note that when not engaged or receiving messages from the control module the BMU will drop back to its safe precharge state which is the error state.  </p> <p>Consult the BMU documentation for more information but note that that error state can be part of normal operation.</p> <ul> <li> <p>CMU Power supply OK</p> </li> <li> <p>Any cell OverVoltage</p> </li> <li> <p>Any cell UnderVoltage</p> </li> <li> <p>Any cell OverTemperature</p> </li> <li> <p>Any cell untrusted</p> </li> <li> <p>CMU and vehicle timeout errors </p> </li> </ul> <p>The right-hand side shows:</p> <ul> <li> <p>Fan speed for both fans</p> </li> <li> <p>SoC and Balance SoC in Ah</p> </li> <li> <p>SoC and Balance SoC in %</p> </li> </ul>"},{"location":"Profinity_Software/Profinity_Version_1/Prohelion_Batteries.html#cmu-data","title":"CMU DATA","text":"<p>The lower section of the program shows telemetry data from the CMUs, one row per CMU.  The information shown is:</p> Cell Meaning <code>Serial</code> CMU Serial Number <code>PCB C</code> CMU circuit board (PCB) temperature <code>Cell C</code> CMU external (cell) temperature <code>PCB C</code> CMU circuit board (PCB) temperature <code>Cell 0 ~ 8 mV</code> 1\u20138 cell voltage measurements <p>The data is highlighted in various ways to quickly understand the system status</p> <ul> <li> <p>Cells currently balancing have a blue background</p> </li> <li> <p>The minimum and maximum cells have bold text and are colour coded (green shows highest voltage, brown lowest)</p> </li> <li> <p>Cell in yellow have trust errors</p> </li> <li> <p>Cells not present (where the CMU has been programmed to monitor less than 8 cells) have no text, and a mid-gray background</p> </li> </ul>"},{"location":"Profinity_Software/Profinity_Version_1/Prohelion_Batteries.html#prohelion-12-volt-control-system","title":"Prohelion 12 Volt Control System","text":"<p>Prohelion also offers a 12 volt control module that can be used to provide power to onboard 12 volt systems and is typically used in a racing environment.  This module has a separate control panel that can be added to the profile and provides additional data on the performance of the 12 volt system.</p> <p></p> Prohelion 12 Volt"},{"location":"Profinity_Software/Profinity_Version_1/Prohelion_Batteries.html#updating-the-bmu-configuration","title":"Updating the BMU Configuration","text":"<p>To update the configuration of your Battery Management Unit, right mouse click on the BMU in the Profinity menu and select Configure Prohelion BMU.  This will load the BMU configuration from the firmware and allow you to change it as desired.</p> <p>Be Careful!</p> <p>Changing the configuration of your BMU can lead to dangerous situations if you set the wrong values for your pack.  Be careful and only make these changes if you know what you are doing and understand the purpose of these values.</p>    Your browser does not support the video tag."},{"location":"Profinity_Software/Profinity_Version_1/Prohelion_Batteries.html#flashing-the-bmu-firmware","title":"Flashing the BMU Firmware","text":"<p>To flash the BMU firmware, right mouse click on the Update Firmware menu item on the BMU.  A CAN to Ethernet bridge or a Virtual CAN Adapter is required for this operation.</p>"},{"location":"Profinity_Software/Profinity_Version_1/Prohelion_Cloud_Connect.html","title":"Prohelion Cloud Connect","text":"<p>Profinity provides support for sharing your CAN Bus data in a secure manner to your whoever you want (including teams of people) in near real time via Prohelion Cloud Connect.</p> <p>When you add a Cloud Connect device to your profile Profinity will start automatically streaming CAN Bus data to the Prohelion Cloud, it will also provide you with a URL that when shared will automatically connect another Profinity instance to the same stream and display your profile.  Within seconds you can be sharing and collaborating your CAN Bus with anyone or teams of people, anywhere in the world, using an encrypted and compressed CAN Bus stream.</p> <p>Prohelion Cloud Connect is a great solution for allow teams to work remotely and jointly analyse and diagnose problems.  </p> <p>A core concept of Prohelion Cloud Connect is the idea of the transmitting node and the receiving nodes.</p>"},{"location":"Profinity_Software/Profinity_Version_1/Prohelion_Cloud_Connect.html#transmitting-node","title":"Transmitting Node","text":"<p>When Prohelion Cloud Connect is added to a profile, the machine on which this first occurs is marked as the transmitting instance of Profinity. Any data transmitted in to this Prohelion Cloud Connect stream must be transmitted from this instance of Profinity.</p> <p>Sharing the Cloud Connect URL not only shares the data it allow enables a copy of the transmitting nodes Profile to be sent to anyone who has the URL and is using it to connect to via Profinity.</p> <p>If a change is made to the Profile on the transmitting node, for example a new device is configured or a change is made to one of the configuration parameters, then that change is automatically sent to each of the receiving nodes of Profinity and within a few seconds you should see the profiles of the receiving nodes update as well.</p>"},{"location":"Profinity_Software/Profinity_Version_1/Prohelion_Cloud_Connect.html#receiving-node","title":"Receiving Node","text":"<p>A receiving node is one that has used a received URL to connect to the Prohelion Cloud Connect Steam.</p> <p>If you are monitoring a CAN Bus stream on a receiving node, then the Profile will be automatically sent to you, but the Profile will be read only.  On the receiving node you will often find devices have they grey dot rather than a green dot.  This is because devices like loggers and Adapters are disabled by default as if they ran then the behaviours would not make sense, for example an adapter can not run locally on the receiving node as their is likely no Can BUS adapter for it to connect to.</p>"},{"location":"Profinity_Software/Profinity_Version_1/Prohelion_Cloud_Connect.html#cloud-connect-transmission-protocol","title":"Cloud Connect Transmission Protocol","text":"<p>CAN Bus is a protocol designed to be used to highly reliable very low latency networks such as vehicle control networks, as such it is a noisy and chatty network protocol, not well suited to being transmitted over long distances or a potentially low speed internet connection.</p> <p>Prohelion Cloud Connect addresses this issue through a custom CAN Bus transmission protocol created by a code library we call the 'CANpressor'.  The CANpressor takes advantage of a couple of behaviours in CAN Bus traffic to substantially reduce the amount of traffic that needs to be sent.  You can adjust the behaviours of the CANpressor in Profinity to tune the performance of the transmission and find a balance between performance and the fidelity of the data being sent.</p> <p>CAN Bus has a number of behaviours that lend itself to compression.</p> <ol> <li> <p>CAN Bus packets are often sent many times a second.  However, the data being transmitted often doesn't change that much or at all.  Consider a battery voltage CAN Packet being sent 10 times a second, it's quite lightly that the voltage will not change from one packet to the next.</p> </li> <li> <p>For many situations we do not need to capture every CAN Packet.  It might be perfectly acceptable to send all the last values of all the packets at regular intervals and send those most recent values rather than every single value.</p> </li> </ol> <p>The CANpressor uses a combination of approaches as well as a more efficient transmission structure and traditional zip compression to substantially reduce the amount of data required to be transmitted to send CAN Bus data.  </p> <p>Using these approaches in a typical configuration we can achieve around a 200x reduction in data over traditional CAN Bus logs.  This level of compression allows us to transmit CAN Bus in near real time over low latency links.</p> <p>When a CANpressed stream is received by a Profinity instance via a Prohelion Cloud Connect data stream the CANpressor simply works in reverse to decompress the stream and replay it locally.</p> <p>However, there are some downsides to this approach.  Unless the sampling rate for the CANpressor is set at the same frequency as the most frequently sent CAN Packet, then the CANpressor will not capture every packet being transmitted.  This is generally not an issue as CAN Bus by its nature transmits constantly, but if you need to capture absolutely every packet then the sampling rate needs to be very low. </p>"},{"location":"Profinity_Software/Profinity_Version_1/Send_Receive_CAN_Bus_Messages.html","title":"Send / Receiving CAN Bus Messages","text":"<p>Profinity can monitor CAN Bus traffic on your network and also allows you to transmit message back on the CAN network from within the Profinity toolset.</p> <p>Messages can be transmitted either via the Send CAN window which is documented below or also via the CAN Replay tool.</p>"},{"location":"Profinity_Software/Profinity_Version_1/Send_Receive_CAN_Bus_Messages.html#receive-can-packets","title":"Receive CAN Packets","text":"<p>Click on the Receive CAN Packets menu item to see a view of all the CAN Bus messages currently travelling across your network.</p> <p></p> Receive CAN Packets <p>The options at the bottom of this window allow you to filter the messages by CAN ID and change various other settings like the Endian representation of the message (Big Endian vs Little Endian) and exclude local traffic (traffic from Profinity) if the adapter supports that (not all adapters support local filtering).</p>"},{"location":"Profinity_Software/Profinity_Version_1/Send_Receive_CAN_Bus_Messages.html#send-can-message-like-this","title":"Send CAN Message like this","text":"<p>Right mouse clicking on a line allows you to select an option to 'Send Can Message like this', clicking this option will open the Send CAN Packet window and pre-populate it with the data from the message that you have received.</p> <p></p> Send CAN Packet like this"},{"location":"Profinity_Software/Profinity_Version_1/Send_Receive_CAN_Bus_Messages.html#send-can-packet","title":"Send CAN Packet","text":"<p>The Send CAN Packet window allows you to transmit messages back on to the CAN Bus Network from Profinity.  From this tool you can set the CAN ID, endian as well as the values for either Bytes, Int16, Int32, Floats or the raw packet data.</p> <p>When you change one of these values the raw data updates to reflect that.  Likewise when you change the raw data the values update to reflect that change.</p> <p>Using the loop option will send your CAN packet at your chosen loop rate, so 100 send the packet every 100ms or ten times a second.</p> <p>Note that as Profinity is currently a Windows only tool, the default byte order used is little endian to align with Windows / Intel.  Little endian is also used by most of the Prohelion technologies.</p> <p></p>"},{"location":"Profinity_Software/Profinity_Version_1/Virtual_CAN_Adapter.html","title":"Prohelion Virtual CAN Bus Adapter","text":"<p>The Prohelion Virtual CAN Bus Adapter is a special type of adapter in Profinity in that it is designed to relay information to one or more another CAN adapters while presenting itself to other clients as a Tritium / Prohelion adapter that can be connected to.</p> <p>In the diagram below, a client on the left connects to the Virtual Adapter which is being used in conjunction with a Peak USB adapter to provide connectivity to the actual CAN Network.  Traffic is routed bi-directionally.</p> <p></p> Virtual Adapter <p>The Virtual adapter serves an important role in helping tools that have previously been developed to support the Tritium and Prohelion CAN to Ethernet bridges work, in the absence of an actual physical bridge.  Instead, a different CAN connection technologies such as SocketCAN or the Peak USB adapter can be used to actually connect to the CAN network and the virtual bridge supports connectivity to the legacy technologies.</p> <p>To add a Virtual Adapter to your configuration, simply add one to your Profile and select which Network Interface will be used along with the Bridge ID for your configuration.</p> <p>Take care with your BridgeID</p> <p>Having two bridges with the same ID on a single network causes the two bridges to start relaying data from one bridge to the other bridge.  This is a designed behaviour that allows to separate CAN Bus networks to be spanned over Ethernet.  Just be aware of it when using the Virtual Adapter, see the CAN to Ethernet documentation for more information.</p> <p>Generally, the configuration options for the Virtual Bridge are similar to that of the Tritium bridge.  </p> <p>However, there are several key areas in which the virtual bridge behaves differently than the physical bridge and these are noted below.</p>"},{"location":"Profinity_Software/Profinity_Version_1/Virtual_CAN_Adapter.html#multi-protocol-support","title":"Multi-Protocol Support","text":"<p>Tritium and Prohelion CAN to Ethernet Bridges have been shipped in two versions that speak generally incompatible protocols v1 and v2.  More recent bridges were v2, but we still see lots of v1 bridges around from older customers. </p> <p>Tritium software tools where generally shipped in either a v1 or v2 variant to talk the correct protocol version, which means that a v1 Bridge, could not talk to a v2 version of the software.</p> <p>The Virtual Bridge resolves this issue by speaking both the v1 and v2 protocol at the same time.  It does this by representing itself as two bridges one a v1 bridge and the other a v2.  The older tools will generally discover the version of the bridge that that can speak to.</p> <p></p> Multi-Protocol Support <p>One very useful scenario for the Virtual Bridge is to use it in conjunction with a physical v1 bridge to talk to tools that were designed for the v2 protocols.  </p> <p>In the scenario below Tritium v1 Bridge is front ended by the Virtual adapter / router, allowing it to communicate with tools that support the v2 protocol.</p> <p></p> v1 and v2 Protocol Support"},{"location":"Profinity_Software/Profinity_Version_1/Virtual_CAN_Adapter.html#multi-client-tcp-support","title":"Multi-Client TCP Support","text":"<p>The physical bridge can only handle a single client at a time in TCP mode.  The virtual bridge can handle multiple clients simultaneously.  This allows the virtual bridge to act as a form of TCP based CAN Bridge server, where many clients can connect at once over TCP and sustain the connection to get CAN data from this interface.  This may be a useful tool for people looking to establish real time CAN monitoring in remote locations.</p> <p></p> Multi-Client Support"},{"location":"Profinity_Software/Profinity_Version_1/Virtual_CAN_Adapter.html#features-no-longer-available","title":"Features no longer available","text":"<p>As the Virtual CAN Bridge is running inside Profinity, the IP address of the adapter should be set at an OS level on that machine and cannot be changed remotely via the CAN Bridge Config tools or Profinity.</p>"},{"location":"Profinity_Software/Profinity_Version_1/WaveSculptor.html","title":"WaveSculptor","text":"<p>Tritium initially created the WaveSculptor Motor Inverter, used by racing teams around the world.  With 99.2% cruising efficiency the WaveSculptor family is a go to choice for most high efficiency electric vehicle racing teams.  In 2021 Prohelion took over the design, manufacturing and support for this product.</p> <p>Profinity provides integrated management of the WaveSculptor products and you can access the WaveSculptor dashboard by adding a WaveSculptor to your Profile. </p> <p>From there right mouse client to access the WaveSculptor Dashboard or to access the CAN Bus Messages and Signals.</p> <p></p> Prohelion WaveSculptor <p>Prohelion is currently migrating all of the Tritium WaveSculptor supporting software in to Profinity, in this release the configuration of the WaveSculptor tools is still handed by the Tritium software and we expect to migrate all of that functionality to Profinity over time.</p>"},{"location":"Profinity_Software/Profinity_Version_1/WaveSculptor.html#updating-the-wavesculptor-configuration","title":"Updating the WaveSculptor Configuration","text":"<p>To update the configuration of your WaveSculptor, right mouse click on the WaveSculptor in the Profinity menu and select Setup and Configuration.  This will load the WaveSculptor setup and configuration utilities.</p> <p>Tritium / Prohelion Adapter</p> <p>The WaveSculptor configuration tools were developed by Tritium and rely on a CAN to Ethernet Bridge being present in the configuration.  If you do not have such a bridge, you can create a virtual one using the Virtual CAN Adapter in conjunction with another bridge.</p>    Your browser does not support the video tag."},{"location":"Profinity_Software/Profinity_Version_1/WaveSculptor.html#flashing-the-wavesculptor-firmware","title":"Flashing the WaveSculptor Firmware","text":"<p>To flash the WaveSculptor firmware, right mouse click on the Update Firmware menu item on the WaveSculptor.  As per the configuration tools a CAN to Ethernet bridge or a Virtual CAN Adapter is required for this operation.</p>"},{"location":"Profinity_Software/Profinity_Version_2/index.html","title":"Prohelion Profinity V2","text":"<p>Profinity is a modern CAN bus management platform designed to enable the connection of CAN bus based solutions to modern Cloud, APIs and Big Data technologies.  </p> <p>Profinity V2 IS NOW IN EARLY ADOPTER RELEASE</p> <p>Profinity V2 is available now in Early Adopter Release.  To support this release we are making the product available to our Early Adopter Community.  If you have any issues or feedback please report it via our support portal or via the Feedback form in the Profinity Admin menu.</p> <p>Download Profinity V2 Early Adopter Release </p> <p>Profinity V2, completely updates the capabilities of Prohelion's Profinity suite by adding:</p> <ul> <li>Native run anywhere capabilities, use Profinity on your PC, Server, Embedded Device or run in the Cloud</li> <li>Fully web enabled user interface that runs on desktop, mobile or Kiosk.</li> <li>Full API integration to allow easy extensions to Profinity's features and to build your own custom applications</li> <li>Inbuilt Scripting support</li> </ul> <p></p> Profinity V2 - Showing a Motor Controller Dashboard <p>Profinity is built around the concept of Profiles, which is a set of configured devices in your system.  By switching between Profiles you can support multiple configurations across different sites or different combinations of technologies. The configuration of the system is largely driven by the Profinity GUI, but once configured, the solution can run as a service, providing continuous data streams off servers or embedded devices, or run from the cloud.</p> <p>Profinity can connect to CAN bridges, which translate CAN bus traffic from your network to the Profinity solution. You can send, receive, and view CAN bus messages either raw or using DBC, log messages and replay them. You can also use Profinity to share CAN bus data from your system to your team via cloud data logging platforms. </p> <p>Profinity provides specialised tools for managing Prohelion batteries and chargers, MPPT systems from Elmar Solar, and WaveSculptors, as well as any device that can be defined by a CAN DBC file.  </p>"},{"location":"Profinity_Software/Profinity_Version_2/index.html#profinity-server-rest-apis-web-and-docker","title":"Profinity Server (Rest APIs, Web, and Docker)","text":"<p>As of Profinity 2, Prohelion has fully migrated to a modern container and API centric architecture.  You will find information on our Restful APIs and Swagger Support in the documentation, as well as our out-of-the-box cloud connectivity for InfluxDB and Prometheus to support cloud based Big Data capture and analytics of CAN bus based solutions. </p> <p>Profinity can be run native on Windows, Unix, MacOS and cloud (via Docker) from V2 onward, see the Installation Guide for more information on how to install Profinity.</p> <p>If you require support or assistance, please Contact Us via the Prohelion Website. You can also log bugs, or requests for improvement on our built in Feedback Form.  </p> <p>Support Requests should be submitted to the Prohelion Support Portal.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Administration/Feedback.html","title":"Feedback","text":"<p>Profinity V2 IS NOW IN EARLY ADOPTER RELEASE</p> <p>Profinity V2 is available now in Early Adopter Release.  To support this release we are making the product available to our Early Adopter Community.  If you have any issues or feedback please report it via our support portal or via the Feedback form in the Profinity Admin menu.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Administration/Feedback.html#profinity-feedback","title":"Profinity Feedback","text":"<p>Profinity includes a built-in feedback system to help us improve our software and better support our users. This system allows you to share your suggestions, report issues, or provide general feedback about your experience with Profinity.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Administration/Feedback.html#accessing-the-feedback-form","title":"Accessing the Feedback Form","text":"<p>The feedback form is accessible through the <code>ADMIN</code> tab in the Profinity interface. To access the form, open Profinity and navigate to the <code>ADMIN</code> tab in the navigation menu. From there, select the \"Feedback\" option to open the feedback interface.</p> <p></p> Profinity feedback form interface"},{"location":"Profinity_Software/Profinity_Version_2/Administration/Feedback.html#providing-effective-feedback","title":"Providing Effective Feedback","text":"<p>To help us process your feedback effectively, we need some essential information. Your feedback should include your name and contact information, along with a clear description of your feedback or issue. If you're reporting a problem, please include any relevant error messages or screenshots that can help us understand the situation better.</p> <p>When submitting feedback, please provide the following information:</p> <ul> <li>Your full name</li> <li>Your contact email address</li> <li>A detailed description of your feedback or issue</li> </ul> <p>Additional information that can help us better understand your feedback includes: - Steps to reproduce any issues you're experiencing - Your operating system and Profinity version - Any relevant error messages</p>"},{"location":"Profinity_Software/Profinity_Version_2/Administration/Feedback.html#what-happens-next","title":"What Happens Next?","text":"<p>After you submit your feedback our team will review your submission and may contact you for additional information if needed. </p>"},{"location":"Profinity_Software/Profinity_Version_2/Administration/Feedback.html#alternative-support-options","title":"Alternative Support Options","text":"<p>If you need immediate assistance or have urgent issues, we provide several support channels. You can visit our Support Portal for comprehensive support resources, Contact Us directly through the Prohelion website.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Administration/Logs_Config.html","title":"Logs","text":"<p>Profinity V2 IS NOW IN EARLY ADOPTER RELEASE</p> <p>Profinity V2 is available now in Early Adopter Release.  To support this release we are making the product available to our Early Adopter Community.  If you have any issues or feedback please report it via our support portal or via the Feedback form in the Profinity Admin menu.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Administration/Logs_Config.html#profinity-system-logs","title":"Profinity System Logs","text":"<p>Profinity has a built in logging mechanism that captures information about the operation of the system and is designed to assist in system issue diagnosis.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Administration/Logs_Config.html#viewing-the-logs","title":"Viewing the Logs","text":"<p>To access the system logs, navigate to the <code>ADMIN</code> tab, then select <code>Logs</code>.</p> <p></p> Profinity system logs <p>Each log entry contains a timestamp, a message level (e.g., <code>Info</code>, <code>Warn</code>, <code>Error</code>, etc.), and a message description. To help diagnose particular issues, the scope of the system logs can be changed to only include particular message levels.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Administration/Logs_Config.html#system-logs-configuration","title":"System Logs Configuration","text":"<p>From the <code>ADMIN</code> tab, selecting <code>System Configuration</code> then <code>Logging</code> brings up a menu containing options for modifying the log level, logs rollover size, and number of retained logs.</p> Option Description <code>Log Level</code> The scope of messages shown in the system logs <code>Log Rollover Size</code> The maximum file size for each log file created, in MB <code>Retained Logs</code> The number of log files that can be created before overwriting the oldest file <p>Changes to the system config</p> <p>Modifying any parameters in the <code>System Configuration</code> menu will trigger a reboot of Profinity. If using the web client, wait around 15 seconds after saving the changes before reloading the page.</p> <p></p> Profinity logs configuration menu <p>Logging levels are a standard industry term and define the types of messages that are displayed to the user in the system logs. Each progressive logging level also encompasses all entries of the previous levels. A brief description of the various log levels is given below.</p> Logging Level Description <code>Fatal</code> Used when the application encounters an error that prevents the critical functionality from working <code>Error</code> Used when the application encounters an error that prevents particular functionality from working, but other parts of the application may remain functional <code>Warn</code> Indicates something unexpected has happened, but the application continues to function <code>Info</code> Standard log level containing informative messages indicating the actions of the application. E.g., when changing states, connecting to the web API, etc. <code>Debug</code> Intermediate level of visibility that is helpful for debugging. Details some of the underlying application processes <code>Trace</code> Grants full visibility of underlying application execution. Only necessary when performing debugging <p>Log levels are persistent</p> <p>Once a log level is set, it will remain persistent across restarts of Profinity</p>"},{"location":"Profinity_Software/Profinity_Version_2/Administration/Manage_Users.html","title":"Managing Users","text":"<p>Profinity V2 IS NOW IN EARLY ADOPTER RELEASE</p> <p>Profinity V2 is available now in Early Adopter Release.  To support this release we are making the product available to our Early Adopter Community.  If you have any issues or feedback please report it via our support portal or via the Feedback form in the Profinity Admin menu.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Administration/Manage_Users.html#managing-users","title":"Managing Users","text":"<p>Desktop Mode</p> <p>When using Profinity in Windows Desktop Mode no user is required as a special admin user is used for this environment that has full permissions.  Only when accessing Profinity via the Web or API interface are user profiles required.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Administration/Manage_Users.html#overview","title":"Overview","text":"<p>Before using Profinity, it's recommended to create a new user account tailored to your specific needs. This guide will walk you through the process of creating a user and assigning appropriate security roles.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Administration/Manage_Users.html#creating-a-new-user","title":"Creating a New User","text":"<ol> <li>Navigate to the user management section:<ul> <li>Click the <code>ADMIN</code> tab</li> <li>Select <code>Users</code></li> <li>Click <code>+ ADD USER</code></li> </ul> </li> <li>Fill in the user details in the form that appears</li> </ol> New User Creation Form"},{"location":"Profinity_Software/Profinity_Version_2/Administration/Manage_Users.html#security-roles","title":"Security Roles","text":"<p>Administrator Privileges</p> <p>Users with the administrator role automatically receive all other role privileges.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Administration/Manage_Users.html#available-roles","title":"Available Roles","text":"<p>Profinity supports different security roles to control access to system functionality, note this mainly controls what APIs the user is able to call, so if you are using the APIs these security restrictions also apply there.</p> <ul> <li>Administrator: Full system access</li> <li>Read System Settings: Use can read the system settings but can't change things</li> <li>Change System Settings: Use can modify system settings and update component settings</li> <li>Charge Battery Packs: Users require special permissions to be able to control the charging of battery packs</li> <li>Send and Receive CAN: Users can send and receive CAN bus packets at in individual packet level.  This is not required to see the dashboards etc, only Read System Settings is required</li> </ul>"},{"location":"Profinity_Software/Profinity_Version_2/Administration/Manage_Users.html#role-selection-guidelines","title":"Role Selection Guidelines","text":"<p>Consider these factors when assigning roles:</p> <ul> <li>User's technical expertise</li> <li>Required access level</li> <li>System security requirements</li> </ul> <p>Send and Receive CAN is Powerful and can be Dangerous</p> <p>A user with the ability to send and receive CAN Packets can inject CAN Packets in to your network, use this setting carefully.</p> <p>Best Practice</p> <p>Create dedicated 'Read System Settings' accounts for monitoring purposes. These accounts can view system information without the risk of accidental configuration changes.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Administration/Manage_Users.html#next-steps","title":"Next Steps","text":"<p>After creating a user:</p> <ol> <li>Share the login credentials securely with the intended user</li> <li>Have them change their password on first login</li> <li>Verify they can access the required functionality</li> </ol> <p>Security Notice</p> <p>Always follow your organization's security policies when creating and sharing user credentials.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Administration/Profiles.html","title":"Profinity Profiles","text":"<p>Profinity V2 IS NOW IN EARLY ADOPTER RELEASE</p> <p>Profinity V2 is available now in Early Adopter Release.  To support this release we are making the product available to our Early Adopter Community.  If you have any issues or feedback please report it via our support portal or via the Feedback form in the Profinity Admin menu.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Administration/Profiles.html#profiles","title":"Profiles","text":"<p>A Profile is the core mechanism by which Profinity maintains the configuration of your system. Any component that you add to your system becomes associated with the active Profile, and the configuration for each device is retained after Profinity is shut down. Profinity keeps track of your Profiles and loads the most recently used one each time you start the tool.</p> <p>The <code>Profile</code> menu is located in the <code>ADMIN</code> tab.</p> <p></p> Profinity Profiles menu <p>To create a new Profile you can either select the <code>+ ADD PROFILE</code> button and then build your system from scratch, or if you have already prepared a Profile Pack on another instance of Profinity, you can upload it from your computer using the <code>UPLOAD PROFILE PACK</code> button. </p> <p>To download a particular Profile Pack, including all associated DBC files, scripts, battery cell profiles, etc., click on the download button next to the Profile in the Profile list.</p> <p>From this menu it is also possible to change the active Profile using the radio buttons. Each Profile must have a unique name and can optionally have a description to help inform users as to the purpose/application for that Profile. To modify the name or description of a particular Profile, click on the name of the Profile in the Profile list.</p> <p>Renaming the active Profile</p> <p>You cannot rename the active Profile in Profinity. In order to rename the active Profile, you must change to a different Profile, rename the desired Profile, and then change back. It may help to create a temporary Profile for this purpose, which can be deleted after you have renamed your desired Profile.</p> <p>Profinity ships with an example Profile called the PET Profile (Prohelion / Elmar / Tritium) which contains all the necessary configuration to support a vehicle based on Prohelion, Elmar, and Tritium technologies.  If you wish to use this Profile as a basis for your own work, we would suggest copying it to a new file name as the file is overwritten each time you install a new version of Profinity. </p>"},{"location":"Profinity_Software/Profinity_Version_2/Administration/Profiles.html#profinity-profile-packs","title":"Profinity Profile Packs","text":"<p>Profinity Profile Packs are a new introduction to Profinity V2 and serve as an extension to the Profile-based structure of Profinity Classic. A Profile Pack packages everything related to your instance of Profinity, allowing you to easily configure multiple machines to run the same system.</p> <p>Depending on the configuration of your system, a Profile Pack could contain:</p> <ul> <li>The Profile and configured devices</li> <li>DBC files</li> <li>Scripts</li> <li>CAN Logs</li> </ul> <p>Profile packs can be downloaded from Profinity as as Zip file, containing all the contents of the Profile.  They can then be uploaded on to a different version of Profinity, if you want share information between Profile instances.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Administration/Profiles.html#profile-files","title":"Profile Files","text":"<p>In Profinity the Profiles and all the related files are stored by default in directories under the the directory</p> <p><code>/Documents/Prohelion/Profinity/Profiles</code></p> <p>While it is possible to edit the Profile files directly in a text editor we do not recommend you do so. </p> <p>Storing the file in this way makes it easy to share a Profiles between machines. If it makes sense in your environment, Profiles can be stored on network drives or other shares such as Google Drive or Dropbox.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Administration/System_Config.html","title":"System Configuration","text":"<p>Profinity V2 IS NOW IN EARLY ADOPTER RELEASE</p> <p>Profinity V2 is available now in Early Adopter Release.  To support this release we are making the product available to our Early Adopter Community.  If you have any issues or feedback please report it via our support portal or via the Feedback form in the Profinity Admin menu.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Administration/System_Config.html#system-configuration","title":"System Configuration","text":"<p>The <code>System Configuration</code> menu is located in the <code>ADMIN</code> tab and contains all the configuration options for the core Profinity instance.</p> <p>Changes to the system config</p> <p>Modifying any parameters in the <code>System Configuration</code> menu will trigger a reboot of Profinity. If using the web client, wait around 15 seconds after saving the changes before reloading the page, on the desktop client the page should automatically reload after the engine reboots.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Administration/System_Config.html#application-configuration","title":"Application Configuration","text":"Parameter Description <code>Maximum number of retained Packets</code> Profinity retains CAN Packets for use in the CAN Utilities, you can adjust the size of the number of retained packets if required. <code>Custom Update Server</code> Profinity supports the use of Custom Update Servers for release management, if you are running the standard version of Profinity, this field should be left blank. <code>Enable Scripting</code> If you want your Profinity instance to support scripting, this field must be selected.  Scripting requires security considerations and as such is not activated by default. Profinity System Configuration"},{"location":"Profinity_Software/Profinity_Version_2/Administration/System_Config.html#profinity-web","title":"Profinity Web","text":"<p>The Profinity Web menu allows you to configure all the parameters that control how Profinity offers its web server connections to the users.  Profinity supports both Http and Https connections as well as custom Https certificates.</p> <p></p> Profinity web menu Parameter Description <code>IP Address for Http</code> What IP address do you want Profinity to run on for HTTP, by default this is localhost (127.0.0.1) or all IP Addresses (0.0.0.0), however if required a specific IP Address can be set. <code>IP Port for Http</code> What port should be used for http (default is 18080), setting this below 1024 requires admin permissions <code>IP Address for Https</code> Same as the Http address but for Https (127.0.0.1 or 0.0.0.0) <code>IP Port for Https</code> Same as the Http port but for Https <code>Redirect all Http traffic to Https</code> Force the system to use Https for all traffic <code>Windows Cert Store</code> When using HTTPS on Windows, you can specify a certificate from the Windows Certificate Store. This is typically used when you have a certificate installed in your system's certificate store. <code>Windows Cert Store Location</code> The location of the certificate store. Common values are: <code>CurrentUser</code> (for user-specific certificates) or <code>LocalMachine</code> (for system-wide certificates). <code>Windows Cert Store Subject</code> The subject name of the certificate as it appears in the Windows Certificate Store. This should match exactly with the certificate's subject name. <code>Cert File</code> Alternative to using the Windows Certificate Store, you can specify a certificate file (typically .pfx or .p12 format) for HTTPS. <code>Cert File Password</code> If using a certificate file, provide the password used to protect the certificate file. <p>Finding Certificate Information on Windows</p> <p>To find the correct certificate store location and subject name: 1. Open Windows Certificate Manager (certmgr.msc) 2. Navigate to the appropriate store (Personal, Trusted Root, etc.) 3. Find your certificate and double-click it 4. The subject name is listed in the \"Subject\" field 5. The store location is shown in the certificate manager's navigation tree</p>"},{"location":"Profinity_Software/Profinity_Version_2/Administration/System_Config.html#extensions-web","title":"Extensions Web","text":"<p>Profinity's web server can be extended to run your custom applications and provides access to the same APIs that Profinity itself uses for all functionality.  This extension is handed through the Extension Web configuration options. </p> <p>By using the Extensions Web, Profinity can be configured to run custom Kiosk applications, support custom web applications for vehicles and many more applications.</p> <p></p> Extensions web menu Parameter Description <code>Enable Profinity Web Server</code> Enable or disable the Profinity web server for extensions <code>Enable Profinity API</code> Enable or disable the Profinity API in that instance of the Web Server for extensions <code>Enable Swagger on API</code> Enable or disable Swagger UI for API documentation <code>IP Address for Http</code> What IP address do you want Profinity to run on for HTTP, by default this is localhost (127.0.0.1) or all IP Addresses (0.0.0.0), however if required a specific IP Address can be set. <code>IP Port for Http</code> What port should be used for http (default is 18080), setting this below 1024 requires admin permissions <code>IP Address for Https</code> Same as the Http address but for Https (127.0.0.1 or 0.0.0.0) <code>IP Port for Https</code> Same as the Http port but for Https <code>Redirect all Http traffic to Https</code> Force the system to use Https for all traffic <code>Windows Cert Store</code> When using HTTPS on Windows, you can specify a certificate from the Windows Certificate Store. This is typically used when you have a certificate installed in your system's certificate store. <code>Windows Cert Store Location</code> The location of the certificate store. Common values are: <code>CurrentUser</code> (for user-specific certificates) or <code>LocalMachine</code> (for system-wide certificates). <code>Windows Cert Store Subject</code> The subject name of the certificate as it appears in the Windows Certificate Store. This should match exactly with the certificate's subject name. <code>Cert File</code> Alternative to using the Windows Certificate Store, you can specify a certificate file (typically .pfx or .p12 format) for HTTPS. <code>Cert File Password</code> If using a certificate file, provide the password used to protect the certificate file."},{"location":"Profinity_Software/Profinity_Version_2/Administration/System_Info.html","title":"System Information","text":"<p>Profinity V2 IS NOW IN EARLY ADOPTER RELEASE</p> <p>Profinity V2 is available now in Early Adopter Release.  To support this release we are making the product available to our Early Adopter Community.  If you have any issues or feedback please report it via our support portal or via the Feedback form in the Profinity Admin menu.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Administration/System_Info.html#system-information","title":"System Information","text":"<p>To see which version of Profinity you are running, select the <code>System Information</code> option in the <code>ADMIN</code> tab.</p> <p></p> System information page <p>This page also contains notes about the latest Profinity releases and the software credits.</p>"},{"location":"Profinity_Software/Profinity_Version_2/CAN_Utilities/CAN_Bus_DBC.html","title":"CAN Bus DBC","text":"<p>Profinity V2 IS NOW IN EARLY ADOPTER RELEASE</p> <p>Profinity V2 is available now in Early Adopter Release.  To support this release we are making the product available to our Early Adopter Community.  If you have any issues or feedback please report it via our support portal or via the Feedback form in the Profinity Admin menu.</p>"},{"location":"Profinity_Software/Profinity_Version_2/CAN_Utilities/CAN_Bus_DBC.html#can-bus-dbc","title":"CAN Bus DBC","text":"<p>DBC is a file format that can be used to describe the format and nature of CAN Bus data.  With a DBC file CAN data can be understood more clearly and broken down in to Signals and Messages, the fundamental building blocks of a DBC file.</p> <p>For the moment, Profinity provides a DBC Viewer that can be used to take a DBC file and will show the CAN Bus traffic travelling through the Profinity system as Messages and Signals.</p> <p></p> CAN DBC Viewer <p>To use the DBC viewer with a third party DBC file you need to create a new item in your Profile and in the configuration properties for that new item provide the DBC file.  </p> <p>Once this has been done then you will see the item in your profile and by right mouse clicking on it you can access information about its Messages and Signals.</p> <p>Many of the other components supported by Profinity such as the Elmar Solar MPPT and the WaveSculptor have support for DBC built in to the component and also allow you to view Messages and Signals, without requiring a separate DBC file.</p>"},{"location":"Profinity_Software/Profinity_Version_2/CAN_Utilities/Logging_Replaying_CAN_Bus_Messages.html","title":"Log / Replay CAN","text":"<p>Profinity V2 IS NOW IN EARLY ADOPTER RELEASE</p> <p>Profinity V2 is available now in Early Adopter Release.  To support this release we are making the product available to our Early Adopter Community.  If you have any issues or feedback please report it via our support portal or via the Feedback form in the Profinity Admin menu.</p>"},{"location":"Profinity_Software/Profinity_Version_2/CAN_Utilities/Logging_Replaying_CAN_Bus_Messages.html#log-replay-can-bus-messages","title":"Log / Replay CAN Bus Messages","text":"<p>Profinity provides the ability to both log and replay messages off your CAN Bus network as well as the ability to log CanBUS data to timeseries databases like InfluxDB and Prometheus.  </p> <p>To log a set of CAN Bus messages first add an adapter to your Profile and then connect to the adapter.  </p> <p>It's always worth checking that you are actually receiving CAN Bus messages by using the Receive CAN Bus window first.  Once you have got CAN Bus messages coming in to Profinity you are read to log.</p>"},{"location":"Profinity_Software/Profinity_Version_2/CAN_Utilities/Logging_Replaying_CAN_Bus_Messages.html#logging-can-bus","title":"Logging CAN Bus","text":"<p>There are three distinct types of loggers available in Profinity, loggers to log to file and loggers that log to timeseries databases such as InfluxDB and Prometheus and finally MQTT Loggers</p> <p>All loggers are configured in the same manner, by adding a logger as a component to the Profile.</p> <p>Replaying Logs Requires a File Logger</p> <p>It is not possible to replay log files using the CAN Data Log Replayer below from Influx or Prometheus data, only a File log of the CAN Message from a File, FTP or SFTP logger can be used.</p>"},{"location":"Profinity_Software/Profinity_Version_2/CAN_Utilities/Logging_Replaying_CAN_Bus_Messages.html#can-data-log-replayer","title":"CAN Data Log Replayer","text":"<p>The Profinity data log replayer allows you to replay log files that have previously been recorded in Profinity.</p> <p>To use this tool simply select the log file and it will start replaying.  There are also a number of options available that can change the way the log file is replayed. Sliding the slider back and forth allows you to easily move to new locations in the CAN Bus replay file, Pausing causes the log file to pause replaying and you can restart the log file later if required.  Pressing the trashcan icon will delete the log.  Log files that you have recorded earlier or on other Profinity instances can be uploaded to this Profinity instance via the <code>UPLOAD CANBUS LOG</code> button.</p> <p></p> Data Log Replayer"},{"location":"Profinity_Software/Profinity_Version_2/CAN_Utilities/Send_Receive_CAN_Bus_Messages.html","title":"Send / Receive CAN","text":"<p>Profinity V2 IS NOW IN EARLY ADOPTER RELEASE</p> <p>Profinity V2 is available now in Early Adopter Release.  To support this release we are making the product available to our Early Adopter Community.  If you have any issues or feedback please report it via our support portal or via the Feedback form in the Profinity Admin menu.</p>"},{"location":"Profinity_Software/Profinity_Version_2/CAN_Utilities/Send_Receive_CAN_Bus_Messages.html#send-receiving-can-bus-messages","title":"Send / Receiving CAN Bus Messages","text":"<p>Profinity can monitor CAN Bus traffic on your network and also allows you to transmit message back on the CAN network from within the Profinity toolset.</p> <p>Messages can be transmitted either via the <code>SEND &amp; RECEIVE CAN</code> window which is documented below or also via the CAN Replay tool.</p> <p>Check user privileges</p> <p>Before trying to send or receive any CAN packets, ensure that the current user has the associated privilege enabled.</p>"},{"location":"Profinity_Software/Profinity_Version_2/CAN_Utilities/Send_Receive_CAN_Bus_Messages.html#receive-can-packets","title":"Receive CAN Packets","text":"<p>Click on the <code>SEND &amp; RECEIVE CAN</code> menu item to see a view of all the CAN Bus messages currently travelling across your network.</p> <p></p> Receive CAN Packets <p>Clicking on the <code>CAN Activity</code> table headers allow you to filter and/or sort the messages by CAN ID, direction, flags, etc. </p> <p>There are two additional controls available at the top of the window, named <code>Spaced data</code> and <code>Heatmap</code>. Toggling on the <code>Spaced data</code> option will break the CAN traffic data into individual hex bytes to make it easier to read. With the <code>Heatmap</code> option toggled, bytes that change value frequently are highlighted with warmer colours and bytes that remain relatively constant are highlighted with  cooler colours. </p> <p>Both these options are selected by default but can be switched off if required.</p>"},{"location":"Profinity_Software/Profinity_Version_2/CAN_Utilities/Send_Receive_CAN_Bus_Messages.html#scheduled-can-packets","title":"Scheduled CAN Packets","text":"<p>At the bottom of the screen is your scheduled CAN Packets, you can add additional scheduled CAN Packets to send by clicking on the <code>+</code> icon.  Packets can be sent only once or can be saved and Profinity will add the packet to a list of scheduled Packets and continue to send the pack in the background.</p> <p>Note Logging Off Does Not Stop Packets Sending</p> <p>If you setup a CAN Packet in Profinity to regularly send and then log off from Profinity, the packet will continue to send.  To stop a packet sending, delete it in the Scheduled CAN Packet list.</p>"},{"location":"Profinity_Software/Profinity_Version_2/CAN_Utilities/Send_Receive_CAN_Bus_Messages.html#adding-a-scheduled-packet","title":"Adding a Scheduled Packet","text":"<p>Click on the <code>+</code> symbol to schedule a new CAN Packet to be sent.</p> <p>Default is little endian</p> <p>The default byte order used is little endian to align with Windows / Intel systems.  Little endian is used by most of the Prohelion technologies.</p> <p></p> Send CAN Packet <p>The Scheduled CAN Packet window allows you to transmit messages back on to the CAN Bus Network from Profinity. From this tool you can set the CAN ID, endian as well as the values for either Bytes, Int16, Int32, Floats or the raw packet data.</p> <p>When you change one of these values the raw data updates to reflect that.  Likewise when you change the raw data the values update to reflect that change.</p> <p>Setting and interval will cause Profinity send your CAN packet at your chosen loop rate, so setting the Interval (ms) to 100 sends the packet every 100ms.</p>"},{"location":"Profinity_Software/Profinity_Version_2/CAN_Utilities/Send_Receive_CAN_Bus_Messages.html#sending-a-packet-on-demand","title":"Sending a Packet on Demand","text":"<p>If your packet is not setup on a schedule then you can run it manually at any time by clicking on the send Arrow in the Scheduled CAN Packets window or selecting the line of the CAN Packet and pressing the space bar.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Components/Adaptors/CAN_Bus_Adapters.html","title":"CAN Bus Adapters","text":"<p>Profinity V2 IS NOW IN EARLY ADOPTER RELEASE</p> <p>Profinity V2 is available now in Early Adopter Release.  To support this release we are making the product available to our Early Adopter Community.  If you have any issues or feedback please report it via our support portal or via the Feedback form in the Profinity Admin menu.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Components/Adaptors/CAN_Bus_Adapters.html#can-bus-adapters","title":"CAN Bus Adapters","text":"<p>An adapter is the technology that you use to connect Profinity to your CAN bus network.  </p> <p>Profinity on Windows supports the Prohelion and Tritium CAN bus bridges, SocketCAN using the SocketCanD technology, and the Peak CAN to USB Adapter.</p> <p>When running the Peak CAN to USB Adapter</p> <p>It is necessary to install the driver for the device before starting Profinity.  Use the supplied Peak tools to ensure your adapter is working as expected before starting Profinity and then AutoDiscovered the adapter as per normal</p> <p>When running Profinity on Docker or on macOS / Unix, additional support is also provided for the native SocketCAN adapter.</p> <p>Adapters can be added in one of two ways, either via Auto Discovery or Manually.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Components/Adaptors/CAN_Bus_Adapters.html#adapter-auto-discovery","title":"Adapter Auto Discovery","text":"<p>In many cases the supported CAN bus adapters can be automatically found via the Auto Discovery mechanism. </p> <p>If an adapter is defined and visible on the network but is not currently associated with the current Profile, then a <code>Discovered</code> category will appear in the <code>ADD COMPONENT</code> window. In the <code>Discovered</code> category you will find all of the adapters that are currently visible to Profinity.  If your adapter does not show up here then you may have configuration issues that need to be addressed manually, or may not currently be discoverable.</p> <p></p> Add an Adapter via AutoDiscovery <p>Having trouble finding a CAN over Ethernet bridge with Autodiscovery?</p> <p>The CAN over Ethernet bridges have a number of configuration options and at times may not behave as expected.  See our documentation on the CAN to Ethernet bridges for troubleshooting advice.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Components/Adaptors/CAN_Bus_Adapters.html#adapter-manual-configuration","title":"Adapter Manual Configuration","text":"<p>Configuring a CAN bus adapter manually follows a very similar process to other components. </p> <p>First, add the adapter to your Profile. When adding a CAN bus adapter to your Profile, you will be then be prompted to fill in the following information about your device. </p> <p>Note that these details can be changed later from <code>Change Settings</code> button at the top-right of the adapter dashboard.</p> Parameter Description <code>Name</code> The name of the component. Must be unique. <code>Auto Connect</code> Automatically enables the device when starting Profinity. <code>Allow Loopback Traffic</code> On the Tritium adapters there is an option to allow Loopback traffic, effectively allowing the system to echo traffic back to itself.  Other adapter do not support this option."},{"location":"Profinity_Software/Profinity_Version_2/Components/Adaptors/CAN_Bus_Adapters.html#adapter-status","title":"Adapter Status","text":"<p>Once your adapter has been added to the Profile, a coloured status indicator will be displayed in the sidebar next to the device name.  Ideally your adapter should have a green circle. The colour signals for the adapters are as follows;</p> Colour Meaning <code>Green</code> Good, adapter is connected and we are getting data <code>Yellow</code> Warning, adapter is connected but no data is arriving <code>Red</code> Error, see the logs for more details <code>Grey</code> N/A, adapter is not connected <p>CAN bus bitrate</p> <p>In order for all of the devices on your CAN bus to communicate, they must all be operating at the same bitrate, including the CAN bus adapter that connects Profinity to your CAN bus. Some devices allow you to configure the bitrate (can be done through the component configuration menus), but some devices only offer a specific bitrate that will put constraints on the other devices in the network. This should be a consideration when designing your system.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Components/Adaptors/Virtual_CAN_Adapter.html","title":"Virtual CAN Bus Adapter","text":"<p>Profinity V2 IS NOW IN EARLY ADOPTER RELEASE</p> <p>Profinity V2 is available now in Early Adopter Release.  To support this release we are making the product available to our Early Adopter Community.  If you have any issues or feedback please report it via our support portal or via the Feedback form in the Profinity Admin menu.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Components/Adaptors/Virtual_CAN_Adapter.html#prohelion-virtual-can-bus-adapter","title":"Prohelion Virtual CAN Bus Adapter","text":"<p>The Prohelion Virtual CAN Bus Adapter is a special type of adapter in Profinity in that it is designed to relay information to one or more other CAN adapters, while presenting itself to other clients as a Tritium / Prohelion adapter that can be connected to.</p> <p>In the diagram below, a client on the left connects to the Virtual Adapter which is being used in conjunction with a Peak USB adapter to provide connectivity to the actual CAN Network.  Traffic is routed bi-directionally.</p> <p></p> Virtual Adapter <p>The Virtual Adapter serves an important role in helping tools that have previously been developed to support the Tritium and Prohelion CAN to Ethernet bridges, in the absence of an actual physical bridge. Instead, a different CAN connection technology such as SocketCAN or the Peak USB adapter can be used to actually connect to the CAN network, and the Virtual Adapter supports connectivity to the legacy technologies.</p> <p>To add a Virtual Adapter to your configuration, simply add one to your Profile and select which <code>Network Protocol</code> will be used along with the <code>Bridge ID</code> for your configuration.</p> <p>Setting the Virtual Bridge IP Address</p> <p>As the Virtual CAN Bridge is running inside Profinity, the IP address of the Virtual Bridge Adapter should be set at an OS level on that machine, it cannot be changed remotely via the CAN Bridge Config tools or Profinity, only the network interface can be selected.</p> <p>Take care with your BridgeID</p> <p>Having two bridges with the same ID on a single network causes the two bridges to start relaying data from one bridge to the other bridge.  This is a designed behaviour that allows to separate CAN bus networks to be spanned over Ethernet.  Just be aware of it when using the Virtual Adapter, see the CAN to Ethernet documentation for more information.</p> <p>Generally, the configuration options for the Virtual Bridge are similar to that of the Tritium bridge.  </p> <p>However, there are several key areas in which the virtual bridge behaves differently than the physical bridge and these are noted below.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Components/Adaptors/Virtual_CAN_Adapter.html#multi-protocol-support","title":"Multi-Protocol Support","text":"<p>Tritium and Prohelion CAN to Ethernet Bridges have been shipped in two versions that speak generally incompatible protocols v1 and v2.  More recent bridges were v2, but we still see lots of v1 bridges around from older customers. </p> <p>Tritium software tools where generally shipped in either a v1 or v2 variant to talk the correct protocol version, which means that a v1 Bridge, could not talk to a v2 version of the software.</p> <p>The Virtual Bridge resolves this issue by speaking both the v1 and v2 protocol at the same time.  It does this by representing itself as two bridges one a v1 bridge and the other a v2.  The older tools will generally discover the version of the bridge that that can speak to.</p> <p></p> Multi-Protocol Support <p>One very useful scenario for the Virtual Bridge is to use it in conjunction with a physical v1 bridge to talk to tools that were designed for the v2 protocols.  </p> <p>In the scenario below Tritium v1 Bridge is front ended by the Virtual adapter / router, allowing it to communicate with tools that support the v2 protocol.</p> <p></p> v1 and v2 Protocol Support"},{"location":"Profinity_Software/Profinity_Version_2/Components/Adaptors/Virtual_CAN_Adapter.html#multi-client-tcp-support","title":"Multi-Client TCP Support","text":"<p>The physical bridge can only handle a single client at a time in TCP mode.  The virtual bridge can handle multiple clients simultaneously.  This allows the virtual bridge to act as a form of TCP based CAN Bridge server, where many clients can connect at once over TCP and sustain the connection to get CAN data from this interface.  This may be a useful tool for people looking to establish real time CAN monitoring in remote locations.</p> <p></p> Multi-Client Support"},{"location":"Profinity_Software/Profinity_Version_2/Components/Battery_Management_Systems/index.html","title":"Prohelion BMS","text":"<p>Profinity V2 IS NOW IN EARLY ADOPTER RELEASE</p> <p>Profinity V2 is available now in Early Adopter Release.  To support this release we are making the product available to our Early Adopter Community.  If you have any issues or feedback please report it via our support portal or via the Feedback form in the Profinity Admin menu.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Components/Battery_Management_Systems/index.html#prohelion-battery-management-systems","title":"Prohelion Battery Management Systems","text":""},{"location":"Profinity_Software/Profinity_Version_2/Components/Battery_Management_Systems/index.html#table-of-contents","title":"Table of Contents","text":"<ul> <li>BMU Management</li> <li>BMU Data</li> <li>CMU / Node Data</li> <li>Updating the BMU Configuration</li> <li>Flashing the BMU Firmware</li> </ul>"},{"location":"Profinity_Software/Profinity_Version_2/Components/Battery_Management_Systems/index.html#introduction","title":"Introduction","text":"<p>Prohelion design and sells Battery Management Systems (BMS) designed for both automotive and fixed location environments.</p> <p>The Prohelion Battery Management technology is built around three main components. All systems will include the Battery Management Unit (BMU) master board and a number of Cell Management Units (CMUs) or Nodes, in some of our Battery Management Systems the master board and Cell Management Units are integrated in to a single board solution.</p> <p>For more information on these products, please see the main Prohelion Website.</p> <p>Profinity supports the management and monitoring of all our Battery Management Systems via your Profile.</p> <p>CMUs and Nodes are managed by the BMU</p> <p>Prohelion CMUs utilise a second CAN network organised by the BMU, and thus do not need to be added as components to your Profile. By adding the BMU to your Profile, you are able to control and see data from the entire BMS. For more information, see Prohelion BMS documentation.</p> <p>A typical battery will generally only have one BMU, but larger packs or split packs like the ones used in racing can involve two or more BMUs.  If your pack is configured as such, then you simply add multiple BMUs to your Profile with different base CAN addresses.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Components/Battery_Management_Systems/index.html#bmu-management","title":"BMU Management","text":"<p>You can manage a Prohelion BMU using Profinity by adding a new Prohelion BMU to your Profile. When adding a Prohelion BMU to your Profile, you will be prompted to fill in the following information about your device. Note that these details can be changed later from <code>Change Settings</code> button at the top-right of the BMU dashboard.</p> Parameter Description <code>Name</code> The name of the component. Must be unique. <code>Control Pack</code> Some of our BMS units can be software controlled from Profinity, to enable this you need to enable the Control Pack option. <code>Milliseconds Valid</code> The timeout time of the device. If the network has not received any traffic from this device after this many milliseconds, it is assumed that the connection has been lost. <code>Base Address</code> The CAN address of the BMU (See BMU documentation). <p>The BMU dashboard contains several sections each with different information about your system. The top section shows data from the BMU, whilst clicking on the <code>MORE DETAILS</code> banner will expand the dashboard to display telemetry data from the CMUs.</p> <p></p> Prohelion BMU <p>The top right of the window contains several controls related to the BMS, allowing you to monitor CAN signals and messages from the BMS using the DBC viewer.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Components/Battery_Management_Systems/index.html#bmu-data","title":"BMU Data","text":"<p>The top row of BMU data presents a summary of the following information (left to right):</p> Cell Meaning <code>BATTERY VOLTAGE</code> Total voltage of the battery pack, in volts. <code>CURRENT</code> Current being supplied to/from the battery pack, in amps. Negative current indicates current flowing into the battery. <code>SOC %</code> Estimation of the remaining charge in the battery, as a percentage of the user-set total pack capacity. <code>MAX CELL</code> Maximum cell voltage within the battery pack, in volts. <code>MIN CELL</code> Minimum cell voltage within the battery pack, in volts. <code>MAX CELL TEMP</code> Maximum cell temperature within the battery pack, in degrees Celsius. <code>MIN CELL TEMP</code> Minimum cell temperature within the battery pack, in degrees Celsius. <p>Below the summary are two graphs depicting the cell temperatures and node voltages observed by the CMUs. Hovering your cursor over the graphs showcases the data in greater resolution.</p> <p>The lower left side of the window features numerous status indicators for battery events. These events will change depending on the BMS you are running, examples shown here include:</p> <ul> <li>Any cell Over/under voltage</li> <li>Any cell Over temperature</li> <li>Any measurement untrusted</li> <li>CMU and vehicle timeout errors</li> <li>CMU Power supply OK</li> <li>Invalid SoC estimation</li> </ul> <p>For a full list of battery pack status flags, see the Communications Protocol section of the BMU documentation.</p> <p>The right-hand side depicts the battery state as a flowchart, showing the progression of the BMU's internal state machine. </p> <p>The current battery state is indicated by the gray box. For more information regarding the different battery states and the internal state machine, see the BMU documentation.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Components/Battery_Management_Systems/index.html#cmu-or-node-data","title":"CMU or Node Data","text":"<p>Older Prohelion BMS units refer to the Cell Management Units as CMUs, newer units use the term Nodes, both mean the same thing and each CMU correlates to a node in the network. The <code>Node Telemetry</code> table displays the currently connected CMUs and the voltages for each collection of cells being monitored by the specific CMU. </p> <p>The exact information shown will depend on the model of BMS that you are running, in the case of this D1000 Gen1 unit, the information shown is:</p> Cell Meaning <code>Node Number</code> CMU Serial Number <code>PCB C</code> CMU circuit board (PCB) temperature <code>Cell C</code> CMU external (cell) temperature <code>PCB C</code> CMU circuit board (PCB) temperature <code>Cell 1 - 8 mV</code> 1 \u2013 8 cell voltage measurements <p></p> Prohelion CMU <p>Various additional information about the system is highlighted by the colour of the voltage readings:</p> <ul> <li>Cells currently balancing have a blue background</li> <li>The minimum and maximum cells are colour coded (green shows highest voltage, orange lowest)</li> <li>Cell in yellow have trust errors</li> <li>Cells not present (where the CMU has been programmed to monitor less than 8 cells) have no text, and a pale-yellow background</li> </ul>"},{"location":"Profinity_Software/Profinity_Version_2/Components/Battery_Management_Systems/index.html#updating-the-bmu-configuration","title":"Updating the BMU Configuration","text":"<p>Be Careful!</p> <p>Changing the configuration of your BMU can lead to dangerous situations if you set the wrong values for your pack.  Be careful and only make these changes if you know what you are doing and understand the purpose of these values.</p> <p>To update the configuration of your Battery Management Unit, click on the <code>Setup and Configuration</code> button in the top-right of the BMU dashboard. The BMU firmware options will only be present if the BMU is physically connected to the network. Once you have finished changing the BMU configuration, the settings will be saved to the device.</p> <p>Why is the Firmware Settings or Firmware Utilities tab not visible?</p> <p>Profinity will only let you set the firmware on your device if it believes the device is in a suitable configuration to do so.  </p> <p>If the Firmware Settings or Firmware Utilities tabs are not visible, this is because Profinity is unable to see your device or it is not in a suitable state to have its firmware changed.</p> <p></p> Updating the BMU Firmware Config <p></p>"},{"location":"Profinity_Software/Profinity_Version_2/Components/Battery_Management_Systems/index.html#flashing-the-bmu-firmware","title":"Flashing the BMU Firmware","text":"<p>To flash the BMU firmware, select the <code>Firmware Utilties</code> button on the top-right of the BMU dashboard.  </p> <p>For Gen1 BMU units a CAN to Ethernet bridge or a Virtual CAN Adapter is required for this operation, for Gen2 units the device can be flashed with any supported CAN Adapter.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Components/Chargers_and_Power/index.html","title":"Battery Charging","text":"<p>Profinity V2 IS NOW IN EARLY ADOPTER RELEASE</p> <p>Profinity V2 is available now in Early Adopter Release.  To support this release we are making the product available to our Early Adopter Community.  If you have any issues or feedback please report it via our support portal or via the Feedback form in the Profinity Admin menu.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Components/Chargers_and_Power/index.html#profinity-battery-charging","title":"Profinity Battery Charging","text":""},{"location":"Profinity_Software/Profinity_Version_2/Components/Chargers_and_Power/index.html#table-of-contents","title":"Table of Contents","text":"<ul> <li>Profinity Battery Charging</li> <li>Supported Chargers</li> <li>Charging Steps</li> <li>Troubleshooting Charging</li> </ul>"},{"location":"Profinity_Software/Profinity_Version_2/Components/Chargers_and_Power/index.html#introduction","title":"Introduction","text":"<p>Profinity can manage charging of your pack by controlling your Prohelion BMU and a charger to put charge in the pack.</p> <p>Profinity Charging supports four charging products (listed below) as well as balancing capabilities to ensure that your pack cells remain balanced and in good condition.</p> <p></p> Siglent Charger"},{"location":"Profinity_Software/Profinity_Version_2/Components/Chargers_and_Power/index.html#supported-chargers","title":"Supported Chargers","text":"<p>TDK Power Supplies</p> <p>Profinity supports TDK Programmable Power Supplies such as the Genesys family. Profinity supports the TDK Power Supplies via their TCP interface.  For TDK Power supplies that only have a serial interfaces for programming it is necessary to add a TCP to Serial Converter into the solution so that Profinity can communicate via TCP.</p> <p>Elcon Chargers</p> <p>Elcon Chargers are widely used in the EV industry and Profinity supports controlling the Elcon Charger via its CAN bus interface. To operate a Elcon Charger via CAN bus the charger must be connected to a CAN bus interface that is configured in Profinity.</p> <p>Signet Power Supplies</p> <p>The Signet Power Supplies that support a programmable TCP interface can be controlled by Profinity.  Units such as the Siglent SPD3303X-E are widely used by Prohelion clients for desktop testing scenarios.</p> <p>ITech Power Supplies</p> <p>ITech provides a large range of bi-directional power supplies that are supported by the Profinity solution.  Profinity uses ITech's TCP interface for controlling the supply at this time we do not support the ITech CAN bus interface.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Components/Chargers_and_Power/index.html#charging-steps","title":"Charging Steps","text":""},{"location":"Profinity_Software/Profinity_Version_2/Components/Chargers_and_Power/index.html#step-1-add-a-charger-to-your-profile","title":"Step 1 - Add a Charger to your Profile","text":"<p>A charger is configured as a device in Profinity so the first step to charging your pack is to add a charger to your Profile.  Note your Profile needs to also include a Prohelion BMU so that the battery can be controlled by Profinity</p> <p></p> Add an Charger <p></p>"},{"location":"Profinity_Software/Profinity_Version_2/Components/Chargers_and_Power/index.html#step-2-connect-to-your-charger","title":"Step 2 - Connect to your Charger","text":"<p>By default chargers in Profinity do not auto connect (this can be changed in the charger Profile settings if you do want to auto connect your charger).  Once your charger is connected and the light is green, click the charge button. </p> <p></p> Connect the Charger <p></p>"},{"location":"Profinity_Software/Profinity_Version_2/Components/Chargers_and_Power/index.html#step-3-engage-contactors-start-charging","title":"Step 3 - Engage Contactors, Start Charging","text":"<p>Once everything is configured, charging the pack is a three step process;</p> <p>1. Set the max charge current that you want to apply to the pack</p> <p>2. Engage the contactors using the \"Engage Contactors\" button</p> <p>3. Press the \"Start Charge\" button</p> <p>Charge will then flow to the pack from the charger.</p> <p></p> Connect the Charger"},{"location":"Profinity_Software/Profinity_Version_2/Components/Chargers_and_Power/index.html#troubleshooting-charging","title":"Troubleshooting Charging","text":"<p>Charging can be complex to setup at times as it requires both the charger and Prohelion BMU to be managed to operate as expected.</p> <p>Key things to considering if you are troubleshooting a charging setup:</p> <p>Are your devices working independently?</p> <p>Make sure all devices in the configuration are showing the Green circle in the Profile window.  If a device is grey or red then it should be fixed so that it is working fully before you start charging</p> <p>Make sure your pack engages as expected</p> <p>A common issue we see with charging is where there is current flow from the battery into the charger during pre-charge.  If this is occurring it can cause the pre-charge sequence to fail and the pack will not engage.  </p> <p>This issue can be tested outside of charging by simply trying to engage the pack with the \"Engage Contactors\" button, while connected to the charger.  If the contactors do not engage while connected to the charger then the issue exists.</p> <p>This problem can typically be solved by putting a suitably sized diode in to the charger circuit to ensure that current can only flow from the charger to the pack and not the other way.</p> <p>Be aware of maximum currents and voltages</p> <p>The Profile configuration for your charger sets the maximum voltages and currents that the charger and wall circuit can supply.</p> <p>Be aware of these values when configuring your charger as it may be possible to overload the wall circuit if you are drawing too much power from your charger for the circuit.</p> <p>It is also very important to be aware of the maximum current that you battery can take during a charge process.  </p> <p>Profinity is not aware of your battery configuration beyond the information provided by the BMU.  Keep the maximum current at or below the recommended currents for your cells to ensure that your batteries are not damaged in the charge process.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Components/Cloud_Dashboard/index.html","title":"Prohelion Cloud Dashboard","text":"<p>Prohelion Cloud is a comprehensive IoT platform that provides robust device monitoring, management, and data storage solutions for field devices. </p> <p>Our platform enables organizations to efficiently monitor, analyse, and manage their IoT devices and assets from anywhere in the world, offering enterprise-grade features with a focus on reliability and scalability.</p> <p>To access Prohelion Cloud, please log an access request in Prohelion Support Portal.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Components/Cloud_Dashboard/index.html#key-features-of-prohelion-cloud-dashboard","title":"Key Features of Prohelion Cloud Dashboard","text":""},{"location":"Profinity_Software/Profinity_Version_2/Components/Cloud_Dashboard/index.html#advanced-data-visualization","title":"Advanced Data Visualization","text":"<ul> <li>Customizable dashboards with drag-and-drop widgets</li> <li>Multiple chart types and visualization options</li> <li>Time-series data visualization and analysis</li> <li>Custom widget development capabilities</li> <li>Real-time data streaming and visualization</li> </ul>"},{"location":"Profinity_Software/Profinity_Version_2/Components/Cloud_Dashboard/index.html#comprehensive-device-management","title":"Comprehensive Device Management","text":"<ul> <li>Device provisioning and auto-registration</li> <li>Telemetry and attribute management</li> <li>Device state monitoring and control</li> <li>Device grouping and organization</li> <li>Bulk device operations</li> </ul>"},{"location":"Profinity_Software/Profinity_Version_2/Components/Cloud_Dashboard/index.html#powerful-rule-engine","title":"Powerful Rule Engine","text":"<ul> <li>Complex event processing and filtering</li> <li>Data validation and transformation</li> <li>Alarm creation and management</li> <li>Integration with external systems</li> <li>Custom rule chains for workflow automation</li> <li>Message queuing and reprocessing</li> <li>Conditional actions based on device data</li> </ul>"},{"location":"Profinity_Software/Profinity_Version_2/Components/Cloud_Dashboard/index.html#advanced-analytics","title":"Advanced Analytics","text":"<ul> <li>Time-series data storage with efficient compression</li> <li>Data aggregation</li> <li>Predictive analytics capabilities</li> <li>Custom data processing functions</li> <li>Integration with external analytics tools</li> <li>Historical data analysis</li> <li>Trend analysis and forecasting</li> </ul>"},{"location":"Profinity_Software/Profinity_Version_2/Components/Cloud_Dashboard/index.html#enterprise-features","title":"Enterprise Features","text":"<ul> <li>Advanced reporting</li> <li>Scheduler for automated tasks</li> <li>Audit logging</li> </ul>"},{"location":"Profinity_Software/Profinity_Version_2/Components/Cloud_Dashboard/index.html#getting-started","title":"Getting Started","text":"<p>To begin using Prohelion Cloud, you'll need:</p> <ol> <li>A Prohelion Cloud account</li> <li>Compatible devices with network connectivity</li> <li>Basic understanding of your device's data points</li> </ol> <p>Our support team is available to help with:</p> <ul> <li>Device onboarding and configuration</li> <li>Dashboard customization</li> <li>Rule chain setup</li> <li>Integration with existing systems</li> <li>Custom development needs</li> <li>Security configuration</li> <li>Analytics setup</li> </ul> <p>We offer comprehensive documentation, tutorials, and a dedicated support team to ensure a smooth transition to cloud-based monitoring and management. </p>"},{"location":"Profinity_Software/Profinity_Version_2/Components/DBC_Files/index.html","title":"DBC File","text":"<p>Profinity V2 IS NOW IN EARLY ADOPTER RELEASE</p> <p>Profinity V2 is available now in Early Adopter Release.  To support this release we are making the product available to our Early Adopter Community.  If you have any issues or feedback please report it via our support portal or via the Feedback form in the Profinity Admin menu.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Components/DBC_Files/index.html#can-bus-dbc","title":"CAN Bus DBC","text":"<p>DBC is a file format that can be used to describe the format and nature of CAN Bus data.  With a DBC file CAN data can be understood more clearly and broken down in to Signals and Messages, the fundamental building blocks of a DBC file.</p> <p>For the moment, Profinity provides a DBC Viewer that can be used to take a DBC file and will show the CAN Bus traffic travelling through the Profinity system as Messages and Signals.</p> <p></p> CAN DBC Viewer <p>To use the DBC viewer with a third party DBC file you need to create a new component in your Profile and in the configuration properties for that new item provide the DBC file.  </p> <p>Once this has been done then you will see the item in your profile and by right mouse clicking on it you can access information about its Messages and Signals.</p> <p>Many of the other components supported by Profinity such as the Elmar Solar MPPT and the WaveSculptor have support for DBC built in to the component and also allow you to view Messages and Signals, without requiring a separate DBC file.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Components/Loggers/File_Loggers.html","title":"File Loggers","text":"<p>Profinity V2 IS NOW IN EARLY ADOPTER RELEASE</p> <p>Profinity V2 is available now in Early Adopter Release.  To support this release we are making the product available to our Early Adopter Community.  If you have any issues or feedback please report it via our support portal or via the Feedback form in the Profinity Admin menu.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Components/Loggers/File_Loggers.html#file-ftp-sftp-based-loggers","title":"File / FTP / SFTP Based Loggers","text":"<p>File loggers in Profinity are used to log native CAN Bus messages to a file, that can then be either stored locally or transmitted remotely to a FTP or SFTP server.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Components/Loggers/File_Loggers.html#modes-of-operation","title":"Modes of Operation","text":"<p>File based loggers in Profinity have three potential modes of operation, you can either</p> Log Mode Details <code>Log Locally to Disk</code> Writes the log files to your local file system. <code>Log Remotely via FTP</code> As well as logging locally this option takes the log file and places it on a remote FTP server for off site analysis. <code>Log Remotely via SFTP</code> As per FTP, but this time a Secure FTP (SFTP) end point is used as the destination. <p>Depending on the item you select, Profinity will present you with different destination options.  For FTP and SFTP it is necessary to provide the destination server, username and password.  For local logging only a directory is required.</p> <p>The logger also gives you the ability to manage Archive and Compression settings, if you wish to archive your messages you must provide an archive directory.</p> Setting Purpose <code>Compress Logs</code> Once a log file has reached the size limit, then it is compressed. <code>Archive Old Logs</code> Older log files are rotated to an archive directory based on a rotation policy <code>Limit Archive Size To</code> Maintains a maximum number of log files at this number, older logs are deleted <p>Finally the logger allows you to set the frequency of rotation.  Rotation means that the old log file is closed and a new one is created and Profinity allows you to define a minute based log rotation or a size base log rotation depending on your preference.</p> <p>Logging configurations are stored as part of your profile so when you load a profile, if you have the logger setup to automatically start then it will start logging automatically.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Components/Loggers/File_Loggers.html#downloading-the-logged-files","title":"Downloading the Logged Files","text":"<p>Once a CAN Bus file has been created it can be downloaded from Profinity by clicking on the link found on the Logger Dashboard</p> <p></p> Download Log File"},{"location":"Profinity_Software/Profinity_Version_2/Components/Loggers/InfluxDB_Prometheus_Logger.html","title":"InfluxDB / Prometheus","text":"<p>Profinity V2 IS NOW IN EARLY ADOPTER RELEASE</p> <p>Profinity V2 is available now in Early Adopter Release.  To support this release we are making the product available to our Early Adopter Community.  If you have any issues or feedback please report it via our support portal or via the Feedback form in the Profinity Admin menu.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Components/Loggers/InfluxDB_Prometheus_Logger.html#influxdb-and-prometheus-logging","title":"InfluxDB and Prometheus Logging","text":"<p>Profinity provides the ability to both log and replay messages off your CAN Bus network as well as the ability to log CAN Bus data to timeseries databases like InfluxDB and Prometheus.</p> <p></p> Data Log Replayer <p>InfluxDB is an all in one solution with data storage and visualisation included in a single tool.  Prometheus just provides data storage and is typically coupled with Grafana for visualisation.  </p> <p>All of these tools are available in commercially supported and Open Source (community supported) editions.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Components/Loggers/InfluxDB_Prometheus_Logger.html#influxdb","title":"InfluxDB","text":"<p>To log your CAN Bus data to InfluxDB v1 or v2 firstly install InfluxDB and get it up and running.</p> <p>InfluxDB Versions are Important</p> <p>Make sure you are using the right version of the InfluxDB Logger as Profinity's v1 and v2 logger support Influx v1 and v2 which use different protocols.</p> <p>Logging the data is simple, just add a InfluxDB device to your profile and configure the following options. </p> Setting Purpose InfluxDB Bucket What InfluxDB bucket do you want to store your data in? InfluxDB Organisation What InfluxDB organisation do you want to use? InfluxDB Token Security token for the user you are connecting to InfluxDB as InfluxDB URL Endpoint URL that InfluxDB is running on InfluxDB Health Check Asks the logger to regularly perform a health check on the connection (see below for Influx Cloud) Logging Interval How often should we send log data Changes or Snapshot Send all the changes or send a full snapshot of the current state <p>Once these settings have been set correctly you should be able to see data flowing in to InfluxDB, if you do not check the Logs for more details.  </p> <p>InfluxDB Cloud HealthCheck Warning</p> <p>InfluxDB cloud does not support the InfluxDB Health Check API and therefore you need to switch InfluxDB Health Check to false when using the cloud solution for storing your data.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Components/Loggers/InfluxDB_Prometheus_Logger.html#changes-vs-snapshot","title":"Changes vs Snapshot","text":"<p>When you send a Snapshot Profinity will send every value currently stored in its DBC register to Influx on the interval.  If you select On Change, then Profinity will send Influx a list of every change that has been recorded on the DBC message or signal during that time period.  Depending on the resolution of measurement required this allows you to choice between a high detail (high data) recording option or a lower detail (lower data) recording option.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Components/Loggers/InfluxDB_Prometheus_Logger.html#prometheus","title":"Prometheus","text":"<p>Prometheus logging works in a completely different manner to InfluxDB logging.  </p> <p>Where InfluxDB expects its data to be pushed to it, Prometheus treats Profinity as a source of data, calling it and asking for the latest values.  Prometheus also does not have graphing capability out of the box, rather it is usually coupled with a tool like Grafana to provide the graphing capability.</p> <p>Adding a Prometheus device to Profinity is all that is required on the Profinity side to set it up for Prometheus logging.  There are three configuration values that can be set :</p> Setting Purpose Data Endpoint URL What URL within the hostname and port should the Prometheus data be served on Server Hostname What adapter should the logger connect to on the local machine (could be an IP address) Server Port What port should the end point run on <p>Once the device is active then Prometheus can call Profinity on this URL to receive data.</p> <p>For example if you left everything as the default, the Profinity instance would be available on </p> <pre><code>http://localhost:7065/metrics\n</code></pre> <p>Information on how to configure Prometheus to receive and display this data is covered in the Prometheus documentation.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Components/Loggers/MQTT_Logger.html","title":"MQTT Logger","text":"<p>Profinity V2 IS NOW IN EARLY ADOPTER RELEASE</p> <p>Profinity V2 is available now in Early Adopter Release.  To support this release we are making the product available to our Early Adopter Community.  If you have any issues or feedback please report it via our support portal or via the Feedback form in the Profinity Admin menu.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Components/Loggers/MQTT_Logger.html#mqtt-logger","title":"MQTT Logger","text":"<p>Profinity provides the ability to log CAN Bus data to an MQTT broker, allowing you to integrate your data with other systems and applications. MQTT (Message Queuing Telemetry Transport) is a lightweight messaging protocol designed for low-bandwidth, high-latency networks, making it ideal for IoT applications.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Components/Loggers/MQTT_Logger.html#what-is-mqtt","title":"What is MQTT?","text":"<p>MQTT is a publish-subscribe messaging protocol that allows devices to communicate with each other over a network. It is designed to be lightweight and efficient, making it suitable for use in constrained environments. MQTT uses a broker to manage messages between clients, ensuring reliable delivery and efficient communication.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Components/Loggers/MQTT_Logger.html#setting-up-an-mqtt-server","title":"Setting Up an MQTT Server","text":"<p>To use the MQTT logger in Profinity, you need to set up an MQTT broker. There are several options available:</p> <ul> <li>Local MQTT Broker: You can run an MQTT broker on your local machine or network. Popular options include Mosquitto and HiveMQ.</li> <li>Cloud MQTT Services: Services like AWS IoT, Azure IoT Hub, and Google Cloud IoT provide MQTT support.</li> </ul>"},{"location":"Profinity_Software/Profinity_Version_2/Components/Loggers/MQTT_Logger.html#configuring-the-mqtt-logger","title":"Configuring the MQTT Logger","text":"<p>To log your CAN Bus data to an MQTT broker, add an MQTT device to your profile and configure the following options:</p> Setting Purpose MQTT Broker URL The URL of your MQTT broker. MQTT Topic The topic to which the data will be published. MQTT Access Token Access token for authentication. MQTT Device ID A unique identifier for the device. <p>Once these settings have been configured, you should be able to see data flowing to your MQTT broker. If you encounter any issues, check the Logs for more details.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Components/MPPT/index.html","title":"Elmar Solar MPPT","text":"<p>Profinity V2 IS NOW IN EARLY ADOPTER RELEASE</p> <p>Profinity V2 is available now in Early Adopter Release.  To support this release we are making the product available to our Early Adopter Community.  If you have any issues or feedback please report it via our support portal or via the Feedback form in the Profinity Admin menu.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Components/MPPT/index.html#elmar-solar-mppt","title":"Elmar Solar MPPT","text":"<p>Elmar Solar produces some of the worlds most efficient Maximum Power Point Trackers (MPPTs).  These trackers are used to optimize the power output of solar arrays. You can purchase Elmar Solar MPPT devices through the Prohelion website.</p> <p>You can manage an Elmar Solar MPPT using Profinity by adding a new Elmar Solar MPPT tracker to your Profile. When adding an Elmar Solar MPPT to your Profile, you will be prompted to fill in the following information about your device. Note that these details can be changed later from the MPPT dashboard.</p> Parameter Description <code>Name</code> The name of the component. Must be unique. <code>Milliseconds Valid</code> The timeout time of the device. If the network has not received any traffic from this device after this many milliseconds, it is assumed that the connection has been lost. <code>Base Address</code> The CAN address of the MPPT (See Elmar Solar MPPT documentation) <p>Once the MPPT has been added to your profile, the Elmar Solar MPPT dashboard will be available in the sidebar. The dashboard displays several useful types of information, including the input/output voltage graphs, error status indicators, temperature readings, etc.</p> <p></p> Elmar Solar MPPT <p>The Elmar Solar MPPT devices also give you the ability to see the raw CAN data via the DBC view. To access this, click on the <code>Messages and Signals</code> button in the top right corner of the dashboard.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Components/MPPT/index.html#mppt-data","title":"MPPT Data","text":"<p>The top row of the MPPT dashboard presents a summary of the following information (left to right):</p> Cell Meaning <code>INPUT VOLTAGE</code> The voltage produced by the connected solar array, in volts. <code>INPUT CURRENT</code> The current delivered by the connected solar array, in amps. <code>OUTPUT VOLTAGE</code> The output voltage of the MPPT, in volts. <code>OUTPUT CURRENT</code> The output current of the MPPT, in amps. <p>Below the summary are two time-series graphs depicting the input voltage and output power of the MPPT. Hovering your cursor over the graphs showcases the data in greater resolution.</p> <p>The lower left side of the window features numerous status indicators for MPPT events. These events include (but are not limited to):</p> <ul> <li>Reaching array limits (low power, over/under current)</li> <li>12V undervoltage</li> <li>Reaching MPPT limits (max output voltage, min/max duty cycle)</li> <li>MOSFET temperature limits</li> <li>Battery-related flags (low or full)</li> </ul> <p>For more information about the MPPT events, see the Elmar Solar MPPT documentation.</p> <p>The right-hand side depicts a simplified flowchart of the connected battery's state, indicating whether or not current is able to flow from the MPPT to the battery. The current battery state is indicated by the gray box. For more information regarding the different battery states and the internal state machine, see the BMU section.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Components/Motor_Controller/index.html","title":"WaveSculptor","text":"<p>Profinity V2 IS NOW IN EARLY ADOPTER RELEASE</p> <p>Profinity V2 is available now in Early Adopter Release.  To support this release we are making the product available to our Early Adopter Community.  If you have any issues or feedback please report it via our support portal or via the Feedback form in the Profinity Admin menu.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Components/Motor_Controller/index.html#wavesculptor-motor-controller-support","title":"WaveSculptor Motor Controller Support","text":"<p>Tritium initially created the WaveSculptor Motor Inverter, used by racing teams around the world.  With 99.2% cruising efficiency the WaveSculptor family is a go-to choice for most high efficiency electric vehicle racing teams. In 2021 Prohelion took over the design, manufacturing and support for this product.</p> <p>Profinity provides integrated management of the WaveSculptor products through the WaveSculptor dashboard, which can be accessed by adding a WaveSculptor to your Profile and selecting the appropriate tab from the sidebar. When adding a WaveSculptor to your Profile, you will be prompted to fill in the following information about your device. Note that these details can be changed later from <code>Change Settings</code> button at the top-right of the WaveSculptor dashboard.</p> Parameter Description <code>Name</code> The name of the component. Must be unique. <code>Milliseconds Valid</code> The timeout time of the device. If the network has not received any traffic from this device after this many milliseconds, it is assumed that the connection has been lost. <code>Base Address</code> The CAN address of the BMU (See WaveSculptor documentation) <p></p> Prohelion WaveSculptor <p>Prohelion is currently migrating all of the Tritium WaveSculptor supporting software in to Profinity, in this release the configuration of the WaveSculptor tools is still handed by the Tritium software and we expect to migrate all of that functionality to Profinity over time.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Components/Motor_Controller/index.html#wavesculptor-data","title":"WaveSculptor Data","text":"<p>The top row of WaveSculptor dashboard presents a summary of the following information (left to right):</p> Cell Meaning <code>BUS VOLTAGE</code> Total voltage across the WaveSculptor DC input terminals, in volts. <code>BUS CURRENT</code> Current being supplied to/from the WaveSculptor from/to the DC bus, in amps. Negative current indicates current out of the WaveSculptor (e.g., during regenerative braking). <code>BUS POWER</code> The total power flow in/out of the WaveSculptor DC input terminals. Negative power indicates power flowing out of the WaveSculptor (e.g., during regenerative braking). <code>RPM</code> The estimated speed of the motor, in revolutions per minute. <code>MPS</code> The estimated speed of the motor, in metres per second. <code>MOTOR TEMP</code> The temperature reading from the motor's onboard temperature sensor, in \u00b0C. <code>HEATSINK TEMP</code> The temperature reading from the WaveSculptor's heatsink temperature probe, in \u00b0C. <code>DSP TEMP</code> The temperature reading from the WaveSculptor's signal processing board temperature probe, in \u00b0C. <p>Below the summary ribbon are some time-series graphs of the DC bus power and motor velocity to help display any general trends. There are also several status indicators which highlight when various controller limits have been reached or controller errors are present. More information about these limits and errors can be found in the WaveSculptor documentation.</p> <p>Clicking the <code>MORE DETAILS</code> banner will reveal another section revealing information about the internal controller state and control algorithm. The majority of this information is not necessary for general use, but it may be useful for more advanced use-cases or debugging. The data listed includes:</p> <ul> <li>Low voltage rails (1.9V, 3.3V, and 15V)</li> <li>Motor B and C phase currents</li> <li>D-Q reference frame motor vectors<ul> <li>Back-EMF</li> <li>Stator voltage</li> <li>Stator current</li> </ul> </li> <li>Comms error counts</li> </ul>"},{"location":"Profinity_Software/Profinity_Version_2/Components/Motor_Controller/index.html#updating-the-wavesculptor-configuration","title":"Updating the WaveSculptor Configuration","text":"<p>Desktop instance required</p> <p>Currently only the desktop release of Profinity includes the WaveSculptor configuration tools. Therefore, to update the configuration of your WaveSculptor, the WaveSculptor will need to be connected to desktop instance of Profinity for the duration of the update process. The WaveSculptor configuration tools are planned to become available in the Docker release in a future update.</p> <p>To update the configuration of your WaveSculptor, select the <code>Setup and Config</code> button off the Firmware Utilities tab in the settings. This will load the WaveSculptor setup and configuration utilities. More specific details about the WaveSculptor configuration can be found in the WaveSculptor documentation.</p> <p>Tritium / Prohelion Adapter</p> <p>The WaveSculptor configuration tools were developed by Tritium and rely on a CAN to Ethernet Bridge being present in the configuration.  If you do not have such a bridge, you can create a virtual one using the Virtual CAN Adapter in conjunction with another bridge.</p> <p></p> Configure a WaveSculptor <p></p>"},{"location":"Profinity_Software/Profinity_Version_2/Components/Motor_Controller/index.html#flashing-the-wavesculptor-firmware","title":"Flashing the WaveSculptor Firmware","text":"<p>Once you have updated the configuration of your WaveSculptor, you will need to flash the WaveSculptor firmware. To do this, click on the <code>Update Firmware</code> button in Firmware Utilities tab in the Settings. As per the configuration tool, a CAN to Ethernet bridge or a Virtual CAN Adapter is required for this operation.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Extending_Profinity/index.html","title":"Extending Profinity","text":"<p>Profinity V2 IS NOW IN EARLY ADOPTER RELEASE</p> <p>Profinity V2 is available now in Early Adopter Release.  To support this release we are making the product available to our Early Adopter Community.  If you have any issues or feedback please report it via our support portal or via the Feedback form in the Profinity Admin menu.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Extending_Profinity/index.html#extending-profinity","title":"Extending Profinity","text":"<p>Profinity offers a robust platform that can be extended and customized to meet your specific needs. By leveraging the Profinity Scripting, APIs, and Hosting capabilities, you can transform Profinity into a powerful application server that can host your own custom applications and code, while using the power of Profinity to drive your systems and gather data. </p> <p>This flexibility allows you to tailor Profinity to your organization's unique requirements, enhancing its functionality and usability.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Extending_Profinity/index.html#scripting","title":"Scripting","text":"<p>Profinity's scripting capabilities allow you to automate tasks and create custom operations. </p> <p>With support for languages like C#, JavaScript, and Python, you can choose the best tool for your needs. Scripting in Profinity enables you to handle various operations, from manual tasks to continuous, long-running processes. This is particularly useful for organizations that need to automate repetitive tasks, integrate with other systems, or create custom workflows that align with your business processes.</p> C# Scripting Python JavaScript"},{"location":"Profinity_Software/Profinity_Version_2/Extending_Profinity/index.html#apis","title":"APIs","text":"<p>Profinity is built around a modern API architecture, providing RESTful interfaces that allow you to integrate and extend its functionality. The APIs are secure and support JSON, making it easy to build custom applications or extend existing ones. </p> <p>With Profinity's APIs, you can access both real-time and historical data, ensuring you have the information you need at your fingertips. This is ideal for organizations that need to integrate Profinity with other systems, create custom dashboards, or develop new applications that leverage Profinity's data and capabilities.</p> <p>Profinity supports Swagger to make it easy to understand what APIs are available in Profinity and how to use them.</p> <p></p> Swagger from SmartBear"},{"location":"Profinity_Software/Profinity_Version_2/Extending_Profinity/index.html#scripting-vs-apis","title":"Scripting vs APIs","text":"<p>Profinity offers two completely different ways, Scripting and APIs that you can extend it's capabilities to meet the requirements of your applications.  Why would you choose one over the other?</p> Scripting APIs Supports Python, Javascript and C# Support any Programming Language that can call REST APIs and JSON Are built in to Profinity and require no external frameworks or hosting Run outside of Profinity in your own environment, APP or cloud Can be developed quickly and easily, to solve simple problems Can be as rich and complex as you want your app to be and still use Profinity Can run headless (no user interaction, scheduled or triggered by CAN) Requires you to write the logic for how your app uses the API Script runs inside Profinity If scripted, your scripts run outside Profinity and can be distributed <p>Ultimately the decision on how to extend Profinity is up to you, but with two choices you have the flexibility to find the model that suits your needs best.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Extending_Profinity/index.html#hosting","title":"Hosting","text":"<p>Profinity includes an integrated web server that allows you to host custom applications. Whether you're using modern web technologies like ReactJS or Angular, or traditional HTML and JavaScript, Profinity's hosting capabilities provide a flexible environment for your applications. </p> <p>The web server supports SSL/TLS certificates, ensuring your applications are secure in production environments. This is perfect for organizations that want to develop and deploy custom web applications that integrate seamlessly with Profinity, providing a unified user experience.</p> <p>By combining these powerful features, Profinity can be extended to serve as a comprehensive application server, tailored to your organization's needs. This approach not only enhances the functionality of Profinity but also allows you to create a more integrated and efficient workflow, ultimately driving better business outcomes. </p>"},{"location":"Profinity_Software/Profinity_Version_2/Extending_Profinity/APIs/index.html","title":"Profinity Rest APIs","text":"<p>Profinity V2 IS NOW IN EARLY ADOPTER RELEASE</p> <p>Profinity V2 is available now in Early Adopter Release.  To support this release we are making the product available to our Early Adopter Community.  If you have any issues or feedback please report it via our support portal or via the Feedback form in the Profinity Admin menu.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Extending_Profinity/APIs/index.html#profinity-rest-apis","title":"Profinity Rest APIs","text":"<p>Profinity V2 is a fully API native application with a modern architecture. It supports API security and an open interface model based around REST &amp; JSON.  This allows you to build custom application using the Profinity APIs to provide additional capabilities to your solutions, Custom User Interfaces or just extend the out of the box functionality to meet your needs.</p> <p>As well as supporting Restful APIs, Profinity's overall solution allows you to build completely custom User Interfaces based on Profinity and host those interfaces either externally or within the Profinity solution.</p> <p>Important Information Regarding Profinity Rest APIs</p> <p>Prohelions API solution is currently evolving rapidly as we develop new capabilities. Please be aware of this when developing solutions based on Profinity's APIs, as available APIs and models may evolve rapidly from release to release. </p> <p>Profinity APIs are Powerful</p> <p>While our APIs support security and can be encrypted, be aware that by using Profinity's APIs you need to be careful with what power you are proving the user to ensure that they do not accidentally damage your environment or equipment.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Extending_Profinity/APIs/index.html#using-profinity-apis","title":"Using Profinity APIs","text":"<p>Profinity V2 itself is built around our APIs so as of V2 all APIs are running all the time.  </p> <p>To see the Swagger interface for Profinity, simply go to the URL that Profinity is running on and add <code>/swagger</code>, so for example if Profinity is running on <code>localhost:18080</code>, then <code>http://localhost:18080/swagger</code>, should take you to the Swagger UI.</p> <p></p> Showing the Profinity APIs <p></p>"},{"location":"Profinity_Software/Profinity_Version_2/Extending_Profinity/APIs/index.html#profinity-api-security","title":"Profinity API Security","text":"<p>To use Swagger calls in the GUI, you will need to generate and then provide your Bearer token to the API's if you wish to test them using Swagger.  To generate the Bearer token, in the Swagger GUI execute a call against the <code>/Users/Authenticate</code> API and then apply the returned Bearer token by clicking on the Authorise button in the top right of the Swagger API.  </p> <p>To get a security token call a Profinity instance on the <code>/users/authenticate</code> endpoint with a POST request containing the username and password you wish to adopt for your API usage as the JSON body.  For example</p>"},{"location":"Profinity_Software/Profinity_Version_2/Extending_Profinity/APIs/index.html#post-request-on-httplocalhost18080usersauthenticate","title":"Post request on http://localhost:18080/users/authenticate","text":"<pre><code>{\n  \"username\": \"admin\",\n  \"password\": \"password\"\n}\n</code></pre> <p>HTTPs is required for password security</p> <p>Note that calling this API on a http connection does leave you exposed to network scanning which could expose your password.  For custom applications running on the Profinity server the localhost address can be used that does not expose this risk.  If your application is calling Profinity across a network, we would recommend https for API usage.</p> <p>Profinity will respond to this request if your username and password are valid with a security token like this</p> <pre><code>{\n    \"token\": \"eyJhbGciOiJodHRwOi8vd3d3LnczLm9yZy8yMDAxLzA0L3htbGRzaWctbW9yZSNobWFjLXNoYTI1NiIsInR5cCI6IkpXVCJ9.eyJodHRwOi8vc2NoZW1hcy54bWxzm9yZy93cy8yMDA1LzA1kZW50aXR5L2NsYWltcy9uYW1lIjoiYWRtaW4iLCJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL3dzLzIwMDgvMDYvaWRlbnRpdHkvY2xhaW1zL3JvbGUiOlsiQWRtaW4iLCJTeXN0ZW1SZWFkIiwiU3lzdGVtVXBkYXRlIiwiQ2d32thhcmdpbmciLCJDYW5Tdd1ZW5kUmVjZWl2ZSJdLCJleHAiOjE3NDUwNzkzOTAsImlzcyI6Ind3dy5wcm9oZWxpb24uY29tIiwiYXVkIjoid3d3LnByb2hlbGlvbi5jb20ifQ.9abNWiI32gNOaNHNvdMnIGCRHyRc7tExeVZlYtAm4r0\"\n}\n</code></pre> <p></p> Generating a Authorization token via Swagger <p></p> <p>The contents of this token should then be passed in each subsequent request as a Bearer Token, check the documentation of your client side tools to determine how best to achieve this with the tool you are using to call Profinity.</p> <p>In Swagger this token is applied by using the Authorize button in the top right of the screen and pasting in the token you have generated</p> <p></p> Entering the token in Swagger <p></p>"},{"location":"Profinity_Software/Profinity_Version_2/Extending_Profinity/APIs/index.html#accessing-historical-data-via-apis","title":"Accessing Historical Data via APIs","text":"<p>APIs can provide both realtime and historical data, when a InfluxDB database is configured in the profile.  If no InfluxDB is setup, then only realtime data is available.</p> <p>The /api/v2/CAN/{Message}/{Signal} api is used to get historical data.  To use this API request a DBC Message and Signal as well as a InfluxDB time range that you wish to retrieve the data for.  The API will then call InfluxDB and retrieve all of the data stored across that time frame for this signal.</p> <p>For more information on configuring InfluxDB see the InfluxDB and Prometheus Integration section of this documentation.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Extending_Profinity/Hosting/index.html","title":"Hosting Custom Applications","text":"<p>Profinity V2 IS NOW IN EARLY ADOPTER RELEASE</p> <p>Profinity V2 is available now in Early Adopter Release.  To support this release we are making the product available to our Early Adopter Community.  If you have any issues or feedback please report it via our support portal or via the Feedback form in the Profinity Admin menu.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Extending_Profinity/Hosting/index.html#hosting-custom-applications-in-profinity","title":"Hosting Custom Applications in Profinity","text":"<p>As well as hosting the Rest APIs and Swagger interface, Profinity supports an integrated Web Server that can provide hosting for a custom build application based on these APIs in any modern web technology.  This includes language and frameworks such as ReactJS and Angular as well as traditional HTML / Javascript etc.</p> <p>Once the Extensions Web Server is enabled in the Administration Console, you can place you application here</p> <p><code>/Documents/Prohelion/Profinity/Webroot</code></p> <p>Or if you are running on MacOs or Linux under your home directory.</p> <p><code>$home/Prohelion/Profinity/Webroot</code></p> <p>By default the Profinity web server will serve the index.html file from this directory if no URL is provided by the calling web browser.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Extending_Profinity/Hosting/index.html#production-configuration-and-https","title":"Production Configuration and HTTPs","text":"<p>The Profinity Web Server supports SSL / TLS style certificates for Production environments.  There are two options available for certificates, either using a Windows Certificate Store or providing a Certificate file and Password, which works on either Windows or MacOS &amp; Linux.</p> <p>HttpsRedirect can be set for force all HTTP traffic to the HTTPs interface and second HTTPs interface should be provided in the Urls option in this case. You may consider disabling Swagger in a production environment.</p> <p>When using a certification from a Windows Certificate store you will need to provide the CertStoreName, CertStoreLocation and CertStoreSubject properties in the configuration file</p>"},{"location":"Profinity_Software/Profinity_Version_2/Extending_Profinity/Scripting/index.html","title":"Profinity Scripting","text":"<p>Profinity V2 IS NOW IN EARLY ADOPTER RELEASE</p> <p>Profinity V2 is available now in Early Adopter Release.  To support this release we are making the product available to our Early Adopter Community.  If you have any issues or feedback please report it via our support portal or via the Feedback form in the Profinity Admin menu.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Extending_Profinity/Scripting/index.html#profinity-scripting","title":"Profinity Scripting","text":"<p>Welcome to the Profinity Scripting documentation. This section provides comprehensive information about scripting in Profinity, including supported languages, script types, and available operations.</p> <p>If you're new to Profinity scripting, here is a few things to know before you get started.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Extending_Profinity/Scripting/index.html#important-read-this-first","title":"Important Read This First","text":"<p>Profinity Scripts Execute With the Same Security Permissions as Profinity Itself</p> <p>Because Profinity Scripting runs inside the Profinity engine, any script will execute at the same level of Operating System security permissions as Profinity itself.  Because of this it is important to make sure that you understand what scripts are running on your system and what they do.</p> <p>In order to ensure your Profinity environment remains secure, we require explicit enabling of the Scripting capabilities inside Profinity before they can be used.  </p> <p>To enable Profinity Scripting, go to the System Configuration and enabling Scripting.</p> <p></p> Profinity System configuration"},{"location":"Profinity_Software/Profinity_Version_2/Extending_Profinity/Scripting/index.html#script-types","title":"Script Types","text":"<p>Profinity supports three types of scripts, each designed for specific use cases:</p> <ul> <li>Run Scripts: For manual or scheduled operations</li> <li>Receive Scripts: For handling incoming CAN messages</li> <li>Service Scripts: For continuous, long-running operations</li> </ul> <p>Learn more about script types in our Script Types documentation.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Extending_Profinity/Scripting/index.html#supported-languages","title":"Supported Languages","text":"<p>Profinity scripting supports three programming languages, you can code in any of these supported languages:</p> <ul> <li>C#: For complex, type-safe operations</li> <li>JavaScript: For quick scripting and prototyping</li> <li>Python: For data processing and analysis</li> </ul> <p>Each language has its strengths and ideal use cases. See the Supported Languages documentation for detailed comparisons.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Extending_Profinity/Scripting/index.html#operations","title":"Operations","text":"<p>Profinity provides various out of the box operations to support your script development:</p> <ul> <li>CANBus: For CAN communication</li> <li>DBC: For DBC Message and Signal handling</li> <li>State: For data persistence</li> <li>Console: For output and logging</li> </ul> <p>You can find out more about each in our Operations documentation.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Extending_Profinity/Scripting/index.html#next-steps","title":"Next Steps","text":"<ol> <li>Review the Supported Languages guide to help select the right language for you</li> <li>Learn about Script Types to determine what script style might be most suitable</li> <li>Explore the available Operations and things you can do with Scripts</li> <li>Try creating your first script </li> </ol>"},{"location":"Profinity_Software/Profinity_Version_2/Extending_Profinity/Scripting/Operations/index.html","title":"Supported Operations","text":"<p>Profinity V2 IS NOW IN EARLY ADOPTER RELEASE</p> <p>Profinity V2 is available now in Early Adopter Release.  To support this release we are making the product available to our Early Adopter Community.  If you have any issues or feedback please report it via our support portal or via the Feedback form in the Profinity Admin menu.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Extending_Profinity/Scripting/Operations/index.html#supported-operations","title":"Supported Operations","text":"<p>The following Key Features are available, regardless of what language you choose.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Extending_Profinity/Scripting/Operations/index.html#can-bus-communication","title":"CAN Bus Communication","text":"<p>Profinity offers advanced CAN bus communication features, enabling you to send and receive CAN packets efficiently. For detailed examples and usage, refer to the CAN Bus documentation.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Extending_Profinity/Scripting/Operations/index.html#dbc-message-and-signal-information","title":"DBC Message and Signal Information","text":"<p>Access CAN data using Profinity's DBC functionality, which simplifies the process of working with complex signal data. For detailed examples and usage, see the DBC documentation.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Extending_Profinity/Scripting/Operations/index.html#state-management","title":"State Management","text":"<p>Profinity provides robust state management options to store and share data:</p> <ul> <li>Local State (State): Use <code>State</code> for data persistence within a single script.</li> <li>Global State (GlobalState): Use <code>GlobalState</code> to share data across multiple scripts.</li> </ul> <p>For detailed examples and usage, see the State documentation.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Extending_Profinity/Scripting/Operations/index.html#console-output","title":"Console Output","text":"<p>Profinity supports comprehensive console output capabilities across all scripting languages, allowing you to log information, errors, and debug messages effectively. For detailed examples and usage, refer to the Console documentation.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Extending_Profinity/Scripting/Operations/index.html#next-steps","title":"Next Steps","text":"<ol> <li>Explore the detailed documentation for each feature:</li> <li>Console</li> <li>State</li> <li>CAN Bus</li> <li>DBC</li> <li>Review the language-specific documentation:</li> <li>C# Documentation</li> <li>IronPython Documentation</li> <li>Jint Documentation</li> <li>Experiment by creating simple scripts that integrate multiple features.</li> <li>Review example scripts in the Profinity documentation to gain practical insights.</li> </ol>"},{"location":"Profinity_Software/Profinity_Version_2/Extending_Profinity/Scripting/Operations/CANBus.html","title":"CAN Bus","text":"<p>Profinity V2 IS NOW IN EARLY ADOPTER RELEASE</p> <p>Profinity V2 is available now in Early Adopter Release.  To support this release we are making the product available to our Early Adopter Community.  If you have any issues or feedback please report it via our support portal or via the Feedback form in the Profinity Admin menu.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Extending_Profinity/Scripting/Operations/CANBus.html#can-bus","title":"CAN Bus","text":"<p>The CANClient class serves as the primary interface for CAN bus communication in Profinity applications. It provides a robust set of features for handling CAN packets, including buffering, asynchronous operations, and packet management. This section gives you a high-level understanding of what the class can do.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Extending_Profinity/Scripting/Operations/CANBus.html#key-features","title":"Key Features","text":"<p>This section lists the core capabilities of the CANClient class. These features represent the main functionality you'll use when working with CAN bus communication in your applications.</p> <ul> <li>Send and receive CAN packets</li> <li>Packet buffering for specific CAN IDs</li> <li>Asynchronous packet reception</li> <li>Packet validity management</li> <li>Support for monitoring specific CAN ID ranges</li> </ul>"},{"location":"Profinity_Software/Profinity_Version_2/Extending_Profinity/Scripting/Operations/CANBus.html#usage","title":"Usage","text":"<p>This section provides detailed examples of how to use the CANClient class in your applications. Each example is shown in C#, Python, and JavaScript to accommodate different development environments.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Extending_Profinity/Scripting/Operations/CANBus.html#basic-operations","title":"Basic Operations","text":"<p>Basic operations cover the fundamental tasks you'll perform with the CANClient, including sending and receiving packets. These are the building blocks for more complex CAN bus communication scenarios.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Extending_Profinity/Scripting/Operations/CANBus.html#sending-can-packets","title":"Sending CAN Packets","text":"<p>Sending CAN packets is a fundamental operation. This section shows how to create and transmit CAN packets to the bus, with examples of proper packet construction and transmission handling.</p> C#PythonJavascript <pre><code>// Create and send a CAN packet\nvar packet = new CanPacket(canId, data);\nbool success = CAN.Send(packet);\n</code></pre> <pre><code># Create and send a CAN packet\npacket = CanPacket(canId, data)\nsuccess = CAN.Send(packet)\n</code></pre> <pre><code>// Create and send a CAN packet\nvar packet = new CanPacket(canId, data);\nvar success = CAN.Send(packet);\n</code></pre>"},{"location":"Profinity_Software/Profinity_Version_2/Extending_Profinity/Scripting/Operations/CANBus.html#receiving-can-packets","title":"Receiving CAN Packets","text":"<p>Receiving CAN packets can be done in several ways, depending on your application's needs. This section covers synchronous and asynchronous reception, as well as continuous packet monitoring.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Extending_Profinity/Scripting/Operations/CANBus.html#single-packet-reception","title":"Single Packet Reception","text":"<p>Single packet reception is useful when you need to receive one packet at a time, either immediately or with a timeout. This section shows how to handle these scenarios.</p> C#PythonJavascript <pre><code>// Receive a single packet (synchronous)\nCanPacket packet = CAN.Receive();\n\n// Receive a single packet with timeout (in milliseconds)\nCanPacket packet = CAN.Receive(1000); // 1 second timeout\n\n// Receive a single packet for specific CAN ID\nCanPacket packet = CAN.Receive(0x123); // Receive packet with ID 0x123\n\n// Receive a single packet for specific CAN ID with a timeout (in milliseconds)\nCanPacket packet = CAN.Receive(0x123,1000); // Receive packet with ID 0x123, 1 second timeout\n</code></pre> <pre><code># Receive a single packet (synchronous)\npacket = CAN.Receive()\n\n# Receive a single packet with timeout (in milliseconds)\npacket = CAN.Receive(1000) # 1 second timeout\n\n# Receive a single packet for specific CAN ID\npacket = CAN.Receive(0x123) # Receive packet with ID 0x123\n\n# Receive a single packet for specific CAN ID with a timeout (in milliseconds)\npacket = CAN.Receive(0x123, 1000) # Receive packet with ID 0x123, 1 second timeout\n</code></pre> <pre><code>// Receive a single packet (synchronous)\nvar packet = CAN.Receive();\n\n// Receive a single packet with timeout (in milliseconds)\nvar packet = CAN.Receive(1000); // 1 second timeout\n\n// Receive a single packet for specific CAN ID\nvar packet = CAN.Receive(0x123); // Receive packet with ID 0x123\n\n// Receive a single packet for specific CAN ID with a timeout (in milliseconds)\nvar packet = CAN.Receive(0x123, 1000); // Receive packet with ID 0x123, 1 second timeout\n</code></pre>"},{"location":"Profinity_Software/Profinity_Version_2/Extending_Profinity/Scripting/Operations/CANBus.html#asynchronous-reception","title":"Asynchronous Reception","text":"<p>Asynchronous reception allows your application to continue processing while waiting for CAN packets. This section demonstrates how to use async/await patterns for non-blocking packet reception.</p> C#PythonJavascript <pre><code>// Asynchronously receive a packet\nCanPacket packet = await CAN.ReceiveAsync();\n\n// Asynchronously receive a packet with timeout (in milliseconds)\nCanPacket packet = await CAN.ReceiveAsync(1000); // 1 second timeout\n\n// Asynchronously receive a packet for specific ID\nCanPacket packet = await CAN.ReceiveAsync(0x123);\n\n// Asynchronously receive a packet for specific ID with timeout (in milliseconds)\nCanPacket packet = await CAN.ReceiveAsync(0x123, 1000);  // Receive packet with ID 0x123, 1 second timeout\n</code></pre> <pre><code># Asynchronously receive a packet\npacket = await CAN.ReceiveAsync()\n\n# Asynchronously receive a packet with timeout (in milliseconds)\npacket = await CAN.ReceiveAsync(1000) # 1 second timeout\n\n# Asynchronously receive a packet for specific ID\npacket = await CAN.ReceiveAsync(0x123)\n\n# Asynchronously receive a packet for specific ID with timeout (in milliseconds)\npacket = await CAN.ReceiveAsync(0x123, 1000) #  Receive packet with ID 0x123, 1 second timeout\n</code></pre> <pre><code>// Asynchronously receive a packet\nvar packet = await CAN.ReceiveAsync();\n\n// Asynchronously receive a packet with timeout (in milliseconds)\nvar packet = await CAN.ReceiveAsync(1000); // 1 second timeout\n\n// Asynchronously receive a packet for specific ID\nvar packet = await CAN.ReceiveAsync(0x123);\n\n// Asynchronously receive a packet for specific ID with timeout (in milliseconds)\nvar packet = await CAN.ReceiveAsync(0x123, 1000);  // Receive packet with ID 0x123, 1 second timeout\n</code></pre>"},{"location":"Profinity_Software/Profinity_Version_2/Extending_Profinity/Scripting/Operations/CANBus.html#continuous-packet-reception","title":"Continuous Packet Reception","text":"<p>Continuous packet reception is useful for monitoring the CAN bus over time. This section shows how to set up continuous reception for all packets or specific CAN IDs.</p> C#PythonJavascript <pre><code>// Receive all packets\nforeach (var packet in CAN.Bus())\n{\n    // Process packet\n}\n\n// Receive all packets with timeout (in milliseconds)\nforeach (var packet in CAN.Bus(1000)) // 1 second timeout\n{\n    // Process packet\n}\n\n// Receive packets for specific ID\nforeach (var packet in CAN.Bus(0x123))\n{\n    // Process packet\n}\n\n// Receive packets for specific ID with timeout (in milliseconds)\nforeach (var packet in CAN.Bus(0x123, 1000)) // Receive packets with ID 0x123, 1 second timeout\n{\n    // Process packet\n}\n</code></pre> <pre><code># Receive all packets\nfor packet in CAN.Bus():\n    # Process packet\n    pass\n\n# Receive all packets with timeout (in milliseconds)\nfor packet in CAN.Bus(1000): # 1 second timeout\n    # Process packet\n    pass\n\n# Receive packets for specific ID\nfor packet in CAN.Bus(0x123):\n    # Process packet\n    pass\n\n# Receive packets for specific ID with timeout (in milliseconds)\nfor packet in CAN.Bus(0x123, 1000): # Receive packets with ID 0x123, 1 second timeout\n    # Process packet\n    pass\n</code></pre> <pre><code>// Receive all packets\nfor (var packet of CAN.Bus()) {\n    // Process packet\n}\n\n// Receive all packets with timeout (in milliseconds)\nfor (var packet of CAN.Bus(1000)) { // 1 second timeout\n    // Process packet\n}\n\n// Receive packets for specific ID\nfor (var packet of CAN.Bus(0x123)) {\n    // Process packet\n}\n\n// Receive packets for specific ID with timeout (in milliseconds)\nfor (var packet of CAN.Bus(0x123, 1000)) { // Receive packets with ID 0x123, 1 second timeout\n    // Process packet\n}\n</code></pre>"},{"location":"Profinity_Software/Profinity_Version_2/Extending_Profinity/Scripting/Operations/CANBus.html#packet-buffering","title":"Packet Buffering","text":"<p>Packet buffering is essential for handling high-frequency CAN messages or when you need to process multiple packets at once. Enabling buffering allows you to store packets for specific CAN IDs, ensuring you don't miss any messages during high-traffic periods.</p> C#PythonJavascript <pre><code>// Enable buffering for specific CAN ID\nCAN.BufferCANPackets(0x123);\n</code></pre> <pre><code># Enable buffering for specific CAN ID\nCAN.BufferCANPackets(0x123)\n</code></pre> <pre><code>// Enable buffering for specific CAN ID\nCAN.BufferCANPackets(0x123);\n</code></pre>"},{"location":"Profinity_Software/Profinity_Version_2/Extending_Profinity/Scripting/Operations/CANBus.html#disable-packet-buffering","title":"Disable Packet Buffering","text":"<p>When you no longer need to buffer packets for a specific CAN ID, you can disable buffering to free up resources.</p> C#PythonJavascript <pre><code>// Disable buffering for specific CAN ID\nCAN.StopBufferingCANPackets(0x123);\n</code></pre> <pre><code># Disable buffering for specific CAN ID\nCAN.StopBufferingCANPackets(0x123)\n</code></pre> <pre><code>// Disable buffering for specific CAN ID\nCAN.StopBufferingCANPackets(0x123);\n</code></pre>"},{"location":"Profinity_Software/Profinity_Version_2/Extending_Profinity/Scripting/Operations/CANBus.html#full-send-receive-example","title":"Full Send Receive Example","text":"<p>This section provides complete, real-world examples showing how to use the CANClient class in typical scenarios. The examples demonstrate proper initialization, packet handling, and error checking.</p> C#PythonJavascript <pre><code>// Enable buffering for specific ID\nCAN.BufferCANPackets(0x123);\n\n// Send a packet\nvar packet = new CanPacket(0x123, new byte[] { 0x01, 0x02, 0x03 });\nbool success = CAN.Send(packet);\n\n// Receive packets for specific ID with timeout (in milliseconds)\nforeach (var receivedPacket in CAN.Bus(0x123, 1000)) // Receive packets with ID 0x123, 1 second timeout\n{\n    // Process received packet\n    Console.WriteLine($\"Received packet with ID: {receivedPacket.CanId}\");\n}\n\n// Disable buffering for specific ID\nCAN.StopBufferingCANPackets(0x123);\n</code></pre> <pre><code># Enable buffering for specific ID\nCAN.BufferCANPackets(0x123)\n\n# Send a packet\npacket = CanPacket(0x123, [0x01, 0x02, 0x03])\nsuccess = CAN.Send(packet)\n\n# Receive packets for specific ID with timeout (in milliseconds)\nfor received_packet in CAN.Bus(0x123, 1000): # Receive packets with ID 0x123, 1 second timeout\n    # Process received packet\n    print(f\"Received packet with ID: {received_packet.CanId}\")\n\n# Disable buffering for specific ID\nCAN.StopBufferingCANPackets(0x123)\n</code></pre> <pre><code>// Enable buffering for specific ID\nCAN.BufferCANPackets(0x123);\n\n// Send a packet\nvar packet = new CanPacket(0x123, [0x01, 0x02, 0x03]);\nvar success = CAN.Send(packet);\n\n// Receive packets for specific ID with timeout (in milliseconds)\nfor (var receivedPacket of CAN.Bus(0x123, 1000)) { // Receive packets with ID 0x123, 1 second timeout\n    // Process received packet\n    console.log(`Received packet with ID: ${receivedPacket.CanId}`);\n}\n\n// Disable buffering for specific ID\nCAN.StopBufferingCANPackets(0x123);\n</code></pre>"},{"location":"Profinity_Software/Profinity_Version_2/Extending_Profinity/Scripting/Operations/CANBus.html#best-practices","title":"Best Practices","text":"<p>Following these best practices will help you create robust and efficient CAN bus applications. This section provides guidelines for proper usage and common pitfalls to avoid.</p> <ol> <li>Use appropriate timeouts when receiving packets to prevent indefinite blocking.</li> <li>Consider using the buffering feature when dealing with high-frequency CAN messages.</li> <li>For critical applications, implement proper error handling around packet transmission and reception.</li> <li>When working with specific CAN IDs, use the ID-specific methods for better performance and reliability.</li> </ol>"},{"location":"Profinity_Software/Profinity_Version_2/Extending_Profinity/Scripting/Operations/Console.html","title":"Console","text":"<p>Profinity V2 IS NOW IN EARLY ADOPTER RELEASE</p> <p>Profinity V2 is available now in Early Adopter Release.  To support this release we are making the product available to our Early Adopter Community.  If you have any issues or feedback please report it via our support portal or via the Feedback form in the Profinity Admin menu.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Extending_Profinity/Scripting/Operations/Console.html#console","title":"Console","text":"<p>This documentation provides a comprehensive guide to using the Console class for output and input operations in Profinity scripts. The Console object is automatically provided in all scripts and provides a simple interface for console operations.</p> <p>The Console class serves as a wrapper around the Profinity Log. It handles both standard output and error streams, with automatic encoding support and stream management, log message are sent to the Profinity log at the <code>Info</code> level and Error messages at the <code>Error</code> level.</p> <p>Access to console functionality varies by language:</p> <ul> <li>C#: Access through <code>Profinity.Console</code></li> <li>Python: Use the built-in <code>print()</code> and <code>eprint()</code> functions</li> <li>JavaScript: Use the built-in <code>log()</code> and <code>error()</code> functions</li> </ul>"},{"location":"Profinity_Software/Profinity_Version_2/Extending_Profinity/Scripting/Operations/Console.html#key-features","title":"Key Features","text":"<p>This section lists the core capabilities of the Console class. These features represent the main functionality you'll use when working with console operations in your scripts.</p> <ul> <li>Write text to the console output stream</li> <li>Write text to the error stream</li> <li>Automatic stream encoding support</li> <li>Automatic stream management and disposal</li> </ul>"},{"location":"Profinity_Software/Profinity_Version_2/Extending_Profinity/Scripting/Operations/Console.html#example-usage","title":"Example Usage","text":"<p>This section provides complete, real-world examples showing how to use the Console class in typical scenarios. The examples demonstrate proper console output handling and error stream usage.</p> C#PythonJavascript <pre><code>// Write normal program output\nProfinity.Console.WriteLine(\"Starting script execution...\");\n\ntry\n{\n    // Perform some operation\n    Profinity.Console.WriteLine(\"Operation completed successfully\");\n}\ncatch (Exception ex)\n{\n    // Write error to error stream\n    Profinity.Console.Error.WriteLine($\"Error occurred: {ex.Message}\");\n}\n</code></pre> <pre><code># Write normal program output\nprint(\"Starting script execution...\")\n\ntry:\n    // Perform some operation\n    print(\"Operation completed successfully\")\nexcept Exception as ex:\n    // Write error to error stream\n    eprint(f\"Error occurred: {ex.Message}\")\n</code></pre> <pre><code>// Write normal program output\nlog(\"Starting script execution...\");\n\ntry {\n    // Perform some operation\n    log(\"Operation completed successfully\");\n} catch (ex) {\n    // Write error to error stream\n    error(`Error occurred: ${ex.message}`);\n}\n</code></pre>"},{"location":"Profinity_Software/Profinity_Version_2/Extending_Profinity/Scripting/Operations/Console.html#best-practices","title":"Best Practices","text":"<p>Following these best practices will help you create robust and efficient console output in your scripts. This section provides guidelines for proper usage and common pitfalls to avoid.</p> <ol> <li>Use the standard output stream for normal program output and the error stream for error messages and warnings.</li> <li>Be mindful of the amount of output you generate, as it will be stored in memory.</li> <li>Consider using appropriate error stream output for error conditions and warnings.</li> </ol>"},{"location":"Profinity_Software/Profinity_Version_2/Extending_Profinity/Scripting/Operations/DBC.html","title":"DBC","text":"<p>Profinity V2 IS NOW IN EARLY ADOPTER RELEASE</p> <p>Profinity V2 is available now in Early Adopter Release.  To support this release we are making the product available to our Early Adopter Community.  If you have any issues or feedback please report it via our support portal or via the Feedback form in the Profinity Admin menu.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Extending_Profinity/Scripting/Operations/DBC.html#dbc","title":"DBC","text":"<p>The DBC functionality in Profinity provides tools for working with CAN bus database files. These files define the structure of CAN messages, including signals, message IDs, and data formats. This section gives you a high-level understanding of what the DBC functionality can do.</p> <p>Use the DBC viewer in Profinity to get the Component, Message and Signal names that you want to track</p>"},{"location":"Profinity_Software/Profinity_Version_2/Extending_Profinity/Scripting/Operations/DBC.html#key-features","title":"Key Features","text":"<p>This section lists the core capabilities of the DBC functionality. These features represent the main functionality you'll use when working with DBC files in your applications.</p> <ul> <li>Load and parse DBC files</li> <li>Access message definitions</li> <li>Access signal definitions</li> <li>Convert between raw CAN data and physical values</li> <li>Support for different DBC file formats</li> </ul>"},{"location":"Profinity_Software/Profinity_Version_2/Extending_Profinity/Scripting/Operations/DBC.html#usage","title":"Usage","text":"<p>This section provides detailed examples of how to use the DBC functionality in your applications. Each example is shown in C#, Python, and JavaScript to accommodate different development environments.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Extending_Profinity/Scripting/Operations/DBC.html#basic-operations","title":"Basic Operations","text":"<p>Basic operations cover the fundamental tasks you'll perform with DBC files, including loading and accessing message definitions.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Extending_Profinity/Scripting/Operations/DBC.html#getdbcsignal-method","title":"GetDbcSignal Method","text":"<p>The <code>GetDbcSignal</code> method retrieves a signal definition from the loaded DBC file using the component name, message name, and signal name.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Extending_Profinity/Scripting/Operations/DBC.html#syntax","title":"Syntax","text":"C#PythonJavascript <pre><code>DbcSignal signal = DBC.GetDbcSignal(string component, string message, string signal);\n</code></pre> <pre><code>signal = DBC.GetDbcSignal(component, message, signal)\n</code></pre> <pre><code>var signal = DBC.GetDbcSignal(component, message, signal);\n</code></pre>"},{"location":"Profinity_Software/Profinity_Version_2/Extending_Profinity/Scripting/Operations/DBC.html#parameters","title":"Parameters","text":"<ul> <li><code>component</code>: The name of the component that sends/receives the message</li> <li><code>message</code>: The name of the CAN message containing the signal</li> <li><code>signal</code>: The name of the signal to retrieve</li> </ul>"},{"location":"Profinity_Software/Profinity_Version_2/Extending_Profinity/Scripting/Operations/DBC.html#return-value","title":"Return Value","text":"<p>Returns a <code>DbcSignal</code> object containing the signal definition, or <code>null</code> if the signal is not found.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Extending_Profinity/Scripting/Operations/DBC.html#value-property","title":"Value Property","text":"<p>The most important property of the returned <code>DbcSignal</code> object is the <code>Value</code> property, which returns the current physical value of the signal.</p> C#PythonJavascript <pre><code>// Get a signal definition\nvar signal = DBC.GetDbcSignal(\"ECU\", \"EngineData\", \"EngineSpeed\");\nif (signal != null)\n{\n    // Get the current physical value of the signal\n    double currentValue = signal.Value;\n    Console.WriteLine($\"Current engine speed: {currentValue} {signal.Unit}\");\n}\n</code></pre> <pre><code># Get a signal definition\nsignal = DBC.GetDbcSignal(\"ECU\", \"EngineData\", \"EngineSpeed\")\nif signal:\n    # Get the current physical value of the signal\n    current_value = signal.Value\n    print(f\"Current engine speed: {current_value} {signal.Unit}\")\n</code></pre> <pre><code>// Get a signal definition\nvar signal = DBC.GetDbcSignal(\"ECU\", \"EngineData\", \"EngineSpeed\");\nif (signal) {\n    // Get the current physical value of the signal\n    var currentValue = signal.Value;\n    console.log(`Current engine speed: ${currentValue} ${signal.Unit}`);\n}\n</code></pre>"},{"location":"Profinity_Software/Profinity_Version_2/Extending_Profinity/Scripting/Operations/DBC.html#important-notes","title":"Important Notes","text":"<ol> <li>The component, message, and signal names are case-sensitive</li> <li>Returns null if any of the parameters don't match definitions in the DBC file</li> <li>The <code>Value</code> property automatically converts the raw CAN data to the physical value using the signal's factor and offset</li> </ol>"},{"location":"Profinity_Software/Profinity_Version_2/Extending_Profinity/Scripting/Operations/State.html","title":"State","text":"<p>Profinity V2 IS NOW IN EARLY ADOPTER RELEASE</p> <p>Profinity V2 is available now in Early Adopter Release.  To support this release we are making the product available to our Early Adopter Community.  If you have any issues or feedback please report it via our support portal or via the Feedback form in the Profinity Admin menu.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Extending_Profinity/Scripting/Operations/State.html#state","title":"State","text":"<p>Scripts in Profinity have a lifecycle where they will run and then stop.  Sometimes it is necessary to share information between invocations of Scripts or to share information between different scripts.  Profinity provides a state management mechanism to enable this.</p> <p>This documentation provides a comprehensive guide to using the Profinity State for managing script state in Profinity applications. It covers all major functionality, including state storage, retrieval, and thread-safe operations, with examples in C#, Python, and JavaScript.</p> <p>Profinity provides two distinct ways to manage state in scripts:</p> <ul> <li> <p><code>State</code> - Manages state that persists between invocations of the same script. When you run a script multiple times, the state stored using <code>State</code> will be maintained between runs of that specific script.</p> </li> <li> <p><code>GlobalState</code> - Manages state that can be shared between different scripts. When you run multiple scripts, they can all access and modify the same global state, allowing for inter-script communication and data sharing.</p> </li> </ul> <p>Both provide a robust set of features for storing and retrieving script state data, including concurrent access support and atomic updates. This section gives you a high-level understanding of what these classes can do.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Extending_Profinity/Scripting/Operations/State.html#key-features","title":"Key Features","text":"<p>This section lists the core capabilities of the ProfinityScriptState class. These features represent the main functionality you'll use when working with script state management in your applications.</p> <ul> <li>Thread-safe state storage and retrieval</li> <li>Atomic state updates</li> <li>Support for any object type as state values</li> <li>Simple key-value storage interface</li> <li>Concurrent access support</li> <li>State persistence between script invocations (State)</li> <li>Cross-script state sharing (GlobalState)</li> </ul>"},{"location":"Profinity_Software/Profinity_Version_2/Extending_Profinity/Scripting/Operations/State.html#basic-usage","title":"Basic Usage","text":"<p>This section provides detailed examples of how to use both State and GlobalState in your applications. Each example is shown in C#, Python, and JavaScript to accommodate different development environments.</p> <p>Basic operations cover the fundamental tasks you'll perform with both State and GlobalState, including storing and retrieving state values. These are the building blocks for more complex state management scenarios.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Extending_Profinity/Scripting/Operations/State.html#storing-state-values","title":"Storing State Values","text":"<p>Storing state values is a fundamental operation. This section shows how to save data to both local and global state stores, with examples of different value types and update scenarios.</p> C#PythonJavascript <pre><code>// Store a value that persists between runs of this script\nState.Set(\"scriptRunCount\", 42);\n\n// Store a value that can be shared with other scripts\nGlobalState.Set(\"totalScriptsRun\", \"Shared data\");\n\n// Store complex objects\nState.Set(\"lastRunConfig\", new { Name = \"Local\", Value = 100 });\nGlobalState.Set(\"sharedConfig\", new { Name = \"Global\", Value = 200 });\n</code></pre> <pre><code># Store a value that persists between runs of this script\nState.Set(\"scriptRunCount\", 42)\n\n# Store a value that can be shared with other scripts\nGlobalState.Set(\"totalScriptsRun\", \"Shared data\")\n\n# Store complex objects\nState.Set(\"lastRunConfig\", {\"Name\": \"Local\", \"Value\": 100})\nGlobalState.Set(\"sharedConfig\", {\"Name\": \"Global\", \"Value\": 200})\n</code></pre> <pre><code>// Store a value that persists between runs of this script\nState.Set(\"scriptRunCount\", 42);\n\n// Store a value that can be shared with other scripts\nGlobalState.Set(\"totalScriptsRun\", \"Shared data\");\n\n// Store complex objects\nState.Set(\"lastRunConfig\", { Name: \"Local\", Value: 100 });\nGlobalState.Set(\"sharedConfig\", { Name: \"Global\", Value: 200 });\n</code></pre>"},{"location":"Profinity_Software/Profinity_Version_2/Extending_Profinity/Scripting/Operations/State.html#retrieving-state-values","title":"Retrieving State Values","text":"<p>Retrieving state values can be done for any stored key in both local and global state. This section shows how to access stored data and handle cases where values don't exist.</p> C#PythonJavascript <pre><code>// Retrieve state from previous runs of this script\nobject runCount = State.Get(\"scriptRunCount\");\n\n// Retrieve state shared by other scripts\nobject totalRuns = GlobalState.Get(\"totalScriptsRun\");\n\n// Retrieve and cast to specific type\nint lastRunValue = (int)State.Get(\"lastRunConfig\");\nvar sharedConfig = GlobalState.Get(\"sharedConfig\");\n</code></pre> <pre><code># Retrieve state from previous runs of this script\nrun_count = State.Get(\"scriptRunCount\")\n\n# Retrieve state shared by other scripts\ntotal_runs = GlobalState.Get(\"totalScriptsRun\")\n\n# Retrieve and use values\nlast_run_config = State.Get(\"lastRunConfig\")\nshared_config = GlobalState.Get(\"sharedConfig\")\n</code></pre> <pre><code>// Retrieve state from previous runs of this script\nvar runCount = State.Get(\"scriptRunCount\");\n\n// Retrieve state shared by other scripts\nvar totalRuns = GlobalState.Get(\"totalScriptsRun\");\n\n// Retrieve and use values\nvar lastRunConfig = State.Get(\"lastRunConfig\");\nvar sharedConfig = GlobalState.Get(\"sharedConfig\");\n</code></pre>"},{"location":"Profinity_Software/Profinity_Version_2/Extending_Profinity/Scripting/Operations/State.html#more-complete-examples","title":"More Complete Examples","text":"<p>This section provides complete, real-world examples showing how to use both State and GlobalState in typical scenarios. The examples demonstrate proper state management, error handling, and type safety.</p> C#PythonJavascript <pre><code>// Store configuration that persists between runs of this script\nState.Set(\"scriptConfig\", new {\n    Timeout = 5000,\n    RetryCount = 3,\n    LogLevel = \"Debug\"\n});\n\n// Store configuration that can be shared with other scripts\nGlobalState.Set(\"sharedConfig\", new {\n    MaxConnections = 100,\n    DefaultTimeout = 10000\n});\n\n// Track number of times this script has run\nint runCount = (int)(State.Get(\"runCount\") ?? 0);\nState.Set(\"runCount\", runCount + 1);\n\n// Share data between scripts\nGlobalState.Set(\"sharedData\", new {\n    LastRunTime = DateTime.Now,\n    TotalProcessed = 1000\n});\n</code></pre> <pre><code># Store configuration that persists between runs of this script\nState.Set(\"scriptConfig\", {\n    \"Timeout\": 5000,\n    \"RetryCount\": 3,\n    \"LogLevel\": \"Debug\"\n})\n\n# Store configuration that can be shared with other scripts\nGlobalState.Set(\"sharedConfig\", {\n    \"MaxConnections\": 100,\n    \"DefaultTimeout\": 10000\n})\n\n# Track number of times this script has run\nrun_count = State.Get(\"runCount\")\nif run_count is None:\n    run_count = 0\nState.Set(\"runCount\", run_count + 1)\n\n# Share data between scripts\nGlobalState.Set(\"sharedData\", {\n    \"LastRunTime\": datetime.now(),\n    \"TotalProcessed\": 1000\n})\n</code></pre> <pre><code>// Store configuration that persists between runs of this script\nState.Set(\"scriptConfig\", {\n    Timeout: 5000,\n    RetryCount: 3,\n    LogLevel: \"Debug\"\n});\n\n// Store configuration that can be shared with other scripts\nGlobalState.Set(\"sharedConfig\", {\n    MaxConnections: 100,\n    DefaultTimeout: 10000\n});\n\n// Track number of times this script has run\nvar runCount = State.Get(\"runCount\") || 0;\nState.Set(\"runCount\", runCount + 1);\n\n// Share data between scripts\nGlobalState.Set(\"sharedData\", {\n    LastRunTime: new Date(),\n    TotalProcessed: 1000\n});\n</code></pre>"},{"location":"Profinity_Software/Profinity_Version_2/Extending_Profinity/Scripting/Operations/State.html#important-notes","title":"Important Notes","text":"<p>This section highlights critical information you should be aware of when using the Profinity State. These notes cover thread safety, value types, and state management considerations.</p> <ol> <li> <p>Thread Safety: Both State and GlobalState are designed to be thread-safe and can be used in multi-threaded environments. All operations are atomic and concurrent access is supported.</p> </li> <li> <p>Value Types: Both state stores can hold any object type, but you should be consistent with the types you store and retrieve for each key.</p> </li> <li> <p>Null Values: The <code>Get</code> method returns null for non-existent keys. Always check for null when retrieving values.</p> </li> <li> <p>State Persistence: </p> </li> <li><code>State</code> maintains values between different runs of the same script</li> <li><code>GlobalState</code> maintains values that can be accessed by any script</li> <li> <p>Neither persists between Profinity application restarts</p> </li> <li> <p>Memory Usage: Be mindful of the amount of data you store in both local and global state, as it remains in memory.</p> </li> </ol>"},{"location":"Profinity_Software/Profinity_Version_2/Extending_Profinity/Scripting/Operations/State.html#best-practices","title":"Best Practices","text":"<p>Following these best practices will help you create robust and efficient state management in your scripts. This section provides guidelines for proper usage and common pitfalls to avoid.</p> <ol> <li> <p>Use descriptive keys that clearly indicate the purpose of the stored value.</p> </li> <li> <p>Always check for null when retrieving values to handle cases where the key doesn't exist.</p> </li> <li> <p>Be consistent with the types of values you store under each key to avoid type-related issues.</p> </li> <li> <p>Consider using a naming convention for your state keys to avoid conflicts and improve code readability.</p> </li> <li> <p>Use <code>GlobalState</code> for data that needs to be shared between different scripts.</p> </li> <li> <p>Use <code>State</code> for data that should persist between runs of the same script.</p> </li> <li> <p>When using <code>GlobalState</code>, consider using script-specific prefixes in your keys to avoid conflicts between different scripts.</p> </li> </ol>"},{"location":"Profinity_Software/Profinity_Version_2/Extending_Profinity/Scripting/Script_Types/index.html","title":"Script Types","text":"<p>Profinity V2 IS NOW IN EARLY ADOPTER RELEASE</p> <p>Profinity V2 is available now in Early Adopter Release.  To support this release we are making the product available to our Early Adopter Community.  If you have any issues or feedback please report it via our support portal or via the Feedback form in the Profinity Admin menu.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Extending_Profinity/Scripting/Script_Types/index.html#script-types-in-profinity","title":"Script Types in Profinity","text":"<p>Profinity supports three basic types of scripts, each with specific use cases and execution contexts. This document explains the differences between these script types and when to use each one. Understanding these script types is crucial for developing effective automation and monitoring solutions in Profinity.</p> Script Type Description Best For Not Recommended For Run A Run Script, can simply be run by the operator, or scheduled to be run on a regular basis.  They are typically used do jobs that are short, sharp and don't require a lot of state management - One-time operations- Manual tasks- Testing- Troubleshooting- Scheduled tasks - Continuous monitoring- Real-time responses Receive Receive Scripts are scripts that can be setup to run each time a particular CAN Packet is received.  They are generally used to respond to the receipt of a packet with a reply message - CAN message processing- Real-time data handling- Protocol implementation - Long-running operations- System configuration- Manual tasks Service Service Scripts implement full lifecycle management and generally are designed for tasks that need to run for a long time - Continuous monitoring- Long-running tasks- Critical services- System-level operations - Quick responses- One-time operations- Manual tasks"},{"location":"Profinity_Software/Profinity_Version_2/Extending_Profinity/Scripting/Script_Types/index.html#best-practices","title":"Best Practices","text":"<p>Important Please Remember that</p> <p>When you are using Profinity scripting you are adding functionality to the core of Profinity itself.  If you write inefficient code, leak memory or resources or just do some thing silly, that code is running inside Profinity.  Think about your code and if you see negative impacts on Profinity when your scripts are run, review your code.</p> <p>Best Practice for Profinity Scripting, include:</p> <p>Choose the Right Type of Script Execution</p> <ul> <li>Use Run scripts for manual or scheduled operations</li> <li>Use Receive scripts for CAN message processing</li> <li>Use service scripts for critical, long-running operations</li> </ul> <p>Be Efficient with Resource Management</p> <ul> <li>Keep scripts efficient</li> <li>Monitor resource usage</li> <li>Clean up resources when scripts end</li> <li>Consider system load when scheduling tasks</li> <li>Implement proper service recovery mechanisms</li> </ul> <p>Use Error Handling</p> <ul> <li>Implement proper error handling</li> <li>Log errors appropriately to the Profinity Logs</li> <li>Handle timeouts and resource limits</li> <li>Consider retry mechanisms for scheduled tasks</li> <li>Implement service health monitoring</li> </ul> <p>Use State Management With Required</p> <ul> <li>Use appropriate state scope (State vs GlobalState)</li> <li>Clean up state when no longer needed</li> <li>Handle state conflicts in service scripts</li> <li>Consider state persistence for scheduled tasks</li> <li>Implement proper service state management</li> </ul>"},{"location":"Profinity_Software/Profinity_Version_2/Extending_Profinity/Scripting/Script_Types/ReceiveScripts.html","title":"Receive Scripts","text":"<p>Profinity V2 IS NOW IN EARLY ADOPTER RELEASE</p> <p>Profinity V2 is available now in Early Adopter Release.  To support this release we are making the product available to our Early Adopter Community.  If you have any issues or feedback please report it via our support portal or via the Feedback form in the Profinity Admin menu.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Extending_Profinity/Scripting/Script_Types/ReceiveScripts.html#receive-scripts","title":"Receive Scripts","text":"<p>Receive scripts are specialized scripts designed to handle incoming CAN (Controller Area Network) messages in real-time. They automatically execute when a matching CAN packet is received, making them essential for CAN bus monitoring, protocol implementation, and real-time data processing. </p> <p>These scripts are particularly useful in applications where immediate response to CAN messages is required.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Extending_Profinity/Scripting/Script_Types/ReceiveScripts.html#characteristics","title":"Characteristics","text":"<ul> <li>Automatic execution when matching CAN packets are received</li> <li>Implement the <code>Receive</code> method (C#) or <code>receive</code> function (JavaScript/Python)</li> <li>Can be configured to match specific CAN IDs or a range of IDs</li> <li>Full access to the received CAN packet data</li> </ul>"},{"location":"Profinity_Software/Profinity_Version_2/Extending_Profinity/Scripting/Script_Types/ReceiveScripts.html#examples","title":"Examples","text":"<p>The following example demonstrates how to implement Receive scripts in each supported language. Each example shows how to handle incoming CAN packets, with a focus on accessing the CAN ID in hexadecimal format. These examples represent the minimum implementation needed for a functional Receive script.</p> <p>This example demonstrates a Receive script that:</p> <ul> <li>Implements the required Receive method</li> <li>Shows how to access the CAN ID in hexadecimal format</li> <li>Uses the Profinity console for output</li> <li>Handles incoming CAN packets</li> </ul> C#JavascriptPython <pre><code>using System;\nusing Profinity.Scripting;\nusing Profinity.Comms.CANBus;\n\npublic class CSharpRunTest : ProfinityScript, IProfinityReceiverScript\n{\n    public void Receive(CanPacket canPacket)\n    {\n        Profinity.Console.WriteLine(\"CSharp CanId Received : \" + canPacket.CanIdAsHex);                \n    }\n}\n</code></pre> <pre><code>function receive(canPacket) {\n    log(\"Javascript CanPacket Received : \" + canPacket.CanIdAsHex);    \n};\n</code></pre> <pre><code>def receive(canPacket):\n    print(\"Python CanPacket Id Received : \" + canPacket.CanIdAsHex)\n</code></pre>"},{"location":"Profinity_Software/Profinity_Version_2/Extending_Profinity/Scripting/Script_Types/RunScripts.html","title":"Run Scripts","text":"<p>Profinity V2 IS NOW IN EARLY ADOPTER RELEASE</p> <p>Profinity V2 is available now in Early Adopter Release.  To support this release we are making the product available to our Early Adopter Community.  If you have any issues or feedback please report it via our support portal or via the Feedback form in the Profinity Admin menu.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Extending_Profinity/Scripting/Script_Types/RunScripts.html#run-scripts","title":"Run Scripts","text":"<p>Run scripts are the most flexible and commonly used script type in Profinity. They can be executed either manually by users or automatically on a schedule, making them ideal for a wide range of automation tasks. These scripts are perfect for operations that need to be performed either on-demand or if scheduled at specific intervals, such as data collection, testing, or system configuration tasks.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Extending_Profinity/Scripting/Script_Types/RunScripts.html#characteristics","title":"Characteristics","text":"<ul> <li>Can be executed manually or on a schedule</li> <li>Can interact with CAN bus, DBC files, and state management</li> <li>Support for console output</li> <li>Can be used for testing, data collection, and automation</li> <li>Support for cancellation handling</li> </ul>"},{"location":"Profinity_Software/Profinity_Version_2/Extending_Profinity/Scripting/Script_Types/RunScripts.html#examples","title":"Examples","text":"<p>The following examples demonstrate how to implement each script type in the supported programming languages. Each example shows the basic structure and key features of the script type, including proper initialization, execution flow, and cleanup. Note that while the examples are simple, they illustrate the essential patterns needed for each script type.</p> <p>This example demonstrates a Run script that:</p> <ul> <li>Prints messages to the console</li> <li>Implements a loop that continues until the script is cancelled</li> <li>Shows how to handle script cancellation</li> <li>Demonstrates proper cleanup when the script ends</li> </ul> C#JavascriptPython <pre><code>using System;\nusing Profinity.Scripting;\nusing System.Threading;\n\npublic class CSharpCancelTest : ProfinityScript, IProfinityRunnableScript\n{\n    public bool Run()\n    {\n        System.Console.WriteLine(\"This is a CSharp Message!\");\n        System.Console.WriteLine(\"Now sleeping\");\n\n        while (!Profinity.ScriptCancelled)\n        {\n            Thread.Sleep(100);\n            System.Console.WriteLine(\"State \" + Profinity.ScriptCancelled);\n        }\n\n        System.Console.WriteLine(Profinity.Message);\n        return true;\n    }\n}\n</code></pre> <pre><code>function sleepFor(sleepDuration) {\n    var now = new Date().getTime();\n    while (new Date().getTime() &lt; now + sleepDuration) {\n        /* Do nothing */\n    }\n}\n\nfunction loop() {\n    log('This is a loop!');\n    while (!Profinity.ScriptCancelled)\n    {\n        log('About to Javascript sleep');\n        sleepFor(1000);\n        log('Finished the sleep');\n    }    \n};\n\nloop();\nlog('Exiting Program');\n</code></pre> <pre><code>import time\n\ndef Loop():\n    print('This is a Python loop!')\n    while not (Profinity.ScriptCancelled):\n        print('About to sleep')\n        time.sleep(1)\n        print('Finished Sleeping')\n\nLoop()\nprint('Exiting the Program')\n</code></pre>"},{"location":"Profinity_Software/Profinity_Version_2/Extending_Profinity/Scripting/Script_Types/ServiceScripts.html","title":"Service Scripts","text":"<p>Profinity V2 IS NOW IN EARLY ADOPTER RELEASE</p> <p>Profinity V2 is available now in Early Adopter Release.  To support this release we are making the product available to our Early Adopter Community.  If you have any issues or feedback please report it via our support portal or via the Feedback form in the Profinity Admin menu.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Extending_Profinity/Scripting/Script_Types/ServiceScripts.html#service-scripts","title":"Service Scripts","text":"<p>Service scripts are designed for continuous, long-running operations that need to maintain state and respond to system events. They operate similarly to Windows services, with full lifecycle management and multiple startup modes. These scripts are ideal for critical monitoring tasks, continuous data logging, and system-level operations that need to run reliably over extended periods.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Extending_Profinity/Scripting/Script_Types/ServiceScripts.html#characteristics","title":"Characteristics","text":"<ul> <li>Continuous execution with service-like behavior</li> <li>Service state management methods</li> <li>Support for service lifecycle management</li> </ul>"},{"location":"Profinity_Software/Profinity_Version_2/Extending_Profinity/Scripting/Script_Types/ServiceScripts.html#examples","title":"Examples","text":"<p>The following examples demonstrate how to implement Service scripts in each supported language. Each example shows the complete lifecycle management of a service, including start, stop, pause, continue, and shutdown operations. These examples represent the minimum implementation needed for a functional Service script.</p> <p>This example demonstrates a Service script that:</p> <ul> <li>Implements all required lifecycle methods</li> <li>Shows proper service state management</li> <li>Uses the Profinity console for logging</li> <li>Handles service state transitions</li> </ul> C#JavascriptPython <pre><code>using System;\nusing Profinity.Scripting;\n\npublic class CSharpServiceTest : ProfinityBaseService\n{\n    public override bool OnStart()\n    {\n        Profinity.Console.WriteLine(\"Started CSharp Service\");\n        return true;\n    }\n\n    public override bool OnStop()\n    {\n        Profinity.Console.WriteLine(\"Stopped CSharp Service\");\n        return true;\n    }\n\n    public override bool OnPause()\n    {\n        Profinity.Console.WriteLine(\"Paused CSharp Service\");\n        return true;\n    }\n\n    public override bool OnContinue()\n    {\n        Profinity.Console.WriteLine(\"Continue CSharp Service\");\n        return true;\n    }   \n}\n</code></pre> <pre><code>function onStart() {\n    log('Started Javascript Service!');\n    return true;\n};\n\nfunction onStop() {\n    log('Stoped Javascript Service!');\n    return true;\n};\n\nfunction onPause() {\n    log('Paused Javascript Service!');\n    return true;\n};\n\nfunction onContinue() {\n    log('Continue Javascript Service!');\n    return true;\n};\n\nfunction onShutdown() {\n    log('Shutdown Javascript Service!');\n    return true;\n};\n</code></pre> <pre><code>def on_start():\n    print('Python Service Started!')\n    return True\n\ndef on_stop():\n    print('Python Service Stopped!')\n    return True\n\ndef on_pause():\n    print('Python Service Paused!')\n    return True\n\ndef on_continue():\n    print('Python Service Continued!')\n    return True\n\ndef on_shutdown():\n    print('Python Service Shutdown!')\n    return True\n</code></pre>"},{"location":"Profinity_Software/Profinity_Version_2/Extending_Profinity/Scripting/Supported_Languages/index.html","title":"Supported Languages","text":"<p>Profinity V2 IS NOW IN EARLY ADOPTER RELEASE</p> <p>Profinity V2 is available now in Early Adopter Release.  To support this release we are making the product available to our Early Adopter Community.  If you have any issues or feedback please report it via our support portal or via the Feedback form in the Profinity Admin menu.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Extending_Profinity/Scripting/Supported_Languages/index.html#supported-languages","title":"Supported Languages","text":"<p>Profinity offers a versatile scripting environment that supports three powerful languages: C#, Python (via IronPython), and JavaScript (via Jint). Each language is integrated with the .NET framework, providing a rich set of libraries and tools to enhance your scripting experience. This guide will walk you through the core functionalities and provide insights into choosing the right language for your needs.</p> <p>Profinity supports three programming languages.</p>   | C# Scripting                        | Python                                   | JavaScript                                       | |-------------------------------------|------------------------------------------|--------------------------------------------------| |![C# Logo](../../../images/CSharpLogo.png) | ![Python Logo](../../../images/PythonLogo.png) | ![JavaScript Logo](../../../images/JavaScriptLogo.png) |   <p>Ultimately the choice of your preferred scripting language is up to you, Profinity supports three to help developers who are coming from different programming backgrounds, but the features and functions available are common across all three languages.</p>   | Language | Strengths | Considerations | |----------|-----------|----------------| | C# | - Strong typing- Full .NET framework access- Enterprise features- Performance optimization | - More verbose syntax- Requires .NET knowledge- Longer development time | | JavaScript | - Simple syntax- Quick development- Familiar to web developers- Lightweight | - Less type safety- Limited to basic features- Less suitable for complex operations | | Python | - Clean syntax- Rich ecosystem- Great for data processing- Easy to learn | - Slower execution- Less suitable for real-time operations- Memory management considerations |   <p>If you need even more power than Profinity Scripting provides then you can also call Profinity APIs to get the full access to all key Profinity functionality from your own tools.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Extending_Profinity/Scripting/Supported_Languages/index.html#c-scripting","title":"C# Scripting","text":"<p>C# is a statically typed, object-oriented language known for its performance and scalability. In Profinity, C# scripts leverage the full power of the .NET framework, making it ideal for complex operations and enterprise-level applications.  It is also the best language to use if you are looking to deeply integrate with Profinity itself as Profinity is written in C#.</p> <p>C# scripts in Profinity are implemented as classes that inherit from base classes or implement specific interfaces. They provide strong typing and full access to the .NET framework.</p> <p>C# is Best for:</p> <ul> <li>Complex operations requiring type safety</li> <li>Integration with .NET libraries</li> <li>Large-scale automation projects</li> <li>Performance-critical applications</li> <li>Enterprise-level solutions</li> </ul> <p>C# Language Reference .NET API Documentation</p>"},{"location":"Profinity_Software/Profinity_Version_2/Extending_Profinity/Scripting/Supported_Languages/index.html#python-via-ironpython","title":"Python (via IronPython)","text":"<p>Python scripts in Profinity use a procedural style with functions that are called by the system. They provide a clean, readable syntax and are excellent for data processing and automation tasks.</p> <p>Profinity uses a C# library called IronPython to allow you to write Python code within the C# framework that Profinity is built on.  IronPython brings the simplicity and readability of Python to the .NET ecosystem. It is particularly well-suited for data analysis, scripting, and rapid prototyping, offering seamless integration with .NET libraries.  </p> <p>If you want to use Python as your preferred programming language or want to integrate Profinity with other libraries written in Python, this is a good choice.</p> <p>Python Is Best for:</p> <ul> <li>Data processing and analysis</li> <li>Complex data manipulation</li> <li>Scientific computing</li> <li>Integration with Python libraries</li> <li>Readable, maintainable code</li> </ul> <p>IronPython Documentation Python Language Reference</p>"},{"location":"Profinity_Software/Profinity_Version_2/Extending_Profinity/Scripting/Supported_Languages/index.html#javascript-jint","title":"JavaScript (Jint)","text":"<p>JavaScript scripts in Profinity use a more functional approach, with global functions that are called by the system. They provide a simpler syntax and are well-suited for quick scripting tasks.</p> <p>Profinity supports JavaScript scripting, through the Jint interpreter, provides a dynamic scripting option within Profinity. It is perfect for web developers and those looking for a lightweight, flexible scripting solution and want to be able to create scripts in Profinity.</p> <p>Best for:</p> <ul> <li>Rapid prototyping</li> <li>Quick automation tasks</li> <li>Simple scripts</li> <li>Web developers familiar with JavaScript</li> <li>Lightweight operations</li> </ul> <p>Jint Documentation JavaScript Reference</p>"},{"location":"Profinity_Software/Profinity_Version_2/Getting_Started/Adding_New_Components.html","title":"Adding Components","text":"<p>Profinity V2 IS NOW IN EARLY ADOPTER RELEASE</p> <p>Profinity V2 is available now in Early Adopter Release.  To support this release we are making the product available to our Early Adopter Community.  If you have any issues or feedback please report it via our support portal or via the Feedback form in the Profinity Admin menu.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Getting_Started/Adding_New_Components.html#adding-new-components-to-your-profile","title":"Adding new Components to your Profile","text":"<p>Components can be added to your Profile by selecting the <code>+ ADD COMPONENT</code> button from the sidebar or homepage. </p> <p>A page with all the currently supported components is presented, including hardware devices, data loggers, custom scripts, etc., allowing you to select the component that you wish to add. The page also includes filter options to help locate the correct component.</p> <p>Some CANBus adapters in Profinity can be auto-discovered.  If a discovered adapter is available in your configuration it will be shown at the top of the screen.  You can filter the devices to show by selecting a filter on the left hand side of the screen.</p> <p>Generally you want to add a CAN Adapter first</p> <p>By adding a CAN Adapter you are able to receive CAN traffic from the devices connected to your CAN Bus network.  Without CAN traffic Profinity is limited in what it is able to show and do.</p> <p></p> Add a new component to the Profile <p>Each component in the Profile has a set of properties that define the configuration of the component. Upon selecting a component, you will be prompted to fill in the necessary configuration properties for the component. The information required will vary greatly by component and can be modified later by opening the <code>Change Setting</code> menu from the component's dashboard. More information about specific component properties and how to correctly configure each component can be found in the dedicated component sections.</p> <p></p> Example of defining component properties <p>Duplicate component names</p> <p>You can add multiple components of the same type to your profile, but they must have unique names and the base address of the component is also generally unique. If the profile already has an component with the same name as what you are proposing, then a digit will be added to the component name to keep the profile component names unique.</p> <p>Once you have added the component to your profile, an icon will appear in the sidebar to represent the new component. Hovering your mouse over a component icon in the sidebar will present a list of all devices associated with the current profile that match that component type. </p> <p>Each component will also have an coloured indicator to display the operational status of the device. The possible device statuses are summarised below.   </p> Colour Meaning <code>Green</code> The device is available, sending valid data and is a valid state <code>Yellow</code> The device is available, but is either not sending data or is a warning state <code>Red</code> The device is in an error state <code>Grey</code> The device is not available, connected or not visible on the network"},{"location":"Profinity_Software/Profinity_Version_2/Getting_Started/Adding_New_Components.html#removing-components-from-you-profile","title":"Removing Components from you Profile","text":"<p>If you no longer require a component you can remove it by going to the component settings (top right three bar icon on the component dashboard below) and selecting delete.</p> <p></p> A dashboard showing the three bar setting icon (top right)"},{"location":"Profinity_Software/Profinity_Version_2/Getting_Started/Create_User.html","title":"Creating a User","text":"<p>Profinity V2 IS NOW IN EARLY ADOPTER RELEASE</p> <p>Profinity V2 is available now in Early Adopter Release.  To support this release we are making the product available to our Early Adopter Community.  If you have any issues or feedback please report it via our support portal or via the Feedback form in the Profinity Admin menu.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Getting_Started/Create_User.html#creating-a-user","title":"Creating a User","text":"<p>After installing Profinity it is recommended to create a new user to suit your security requirements or create additional users as defined to support different user profiles. To create a new user, select the <code>ADMIN</code> tab, then <code>Users</code> and <code>+ ADD USER</code>. Here you are able to define a new user and their associated login details.</p> <p></p> New user menu <p>Each user can also be granted different security roles, either allowing or restricting certain Profinity functionality for that particular user. Giving a user the administrator role automatically grants the privileges of all other roles.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Getting_Started/Create_User.html#more-information","title":"More Information","text":"<p>Addition information on how to create and manage users can be found in the Admin / Manage Users section of this documentation.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Getting_Started/Profiles.html","title":"Profinity Profiles","text":"<p>Profinity V2 IS NOW IN EARLY ADOPTER RELEASE</p> <p>Profinity V2 is available now in Early Adopter Release.  To support this release we are making the product available to our Early Adopter Community.  If you have any issues or feedback please report it via our support portal or via the Feedback form in the Profinity Admin menu.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Getting_Started/Profiles.html#profinity-profiles","title":"Profinity Profiles","text":"<p>A Profile is the core mechanism by which Profinity maintains the configuration of your system. Any component that you add to your system becomes associated with the active Profile, and the configuration for each device is retained after Profinity is shut down. Profinity keeps track of your Profiles and loads the most recently used one each time you start the tool.</p> <p>You can see the components that are in your Profile in the menu on the left of the screen and you can add to the Profile, but clicking on the + ADD COMPONENT button in the left most menu of Profinity or on the home page.</p> <p></p> Profinity homepage (showing the `+ ADD COMPONENT` button in both locations)"},{"location":"Profinity_Software/Profinity_Version_2/Getting_Started/Profiles.html#more-information","title":"More Information","text":"<p>Addition information on how to create and manage Profiles can be found in the Admin / Profiles section of this documentation.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Getting_Started/Profinity_Log.html","title":"System Logs","text":"<p>Profinity V2 IS NOW IN EARLY ADOPTER RELEASE</p> <p>Profinity V2 is available now in Early Adopter Release.  To support this release we are making the product available to our Early Adopter Community.  If you have any issues or feedback please report it via our support portal or via the Feedback form in the Profinity Admin menu.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Getting_Started/Profinity_Log.html#profinity-system-logs","title":"Profinity System Logs","text":"<p>Profinity has a built-in logging mechanism that captures information about the operation of the system and is designed to assist in system issue diagnosis. To access the system logs, navigate to the <code>ADMIN</code> tab, then select <code>Logs</code>.  </p> <p>Expanding Log Lines</p> <p>If a log line goes off the right hand side of the page because it is too big, you can click on the line to expand that log message.</p> <p></p> Profinity System Logs <p>Each log entry contains a timestamp, a message level (e.g., <code>Info</code>, <code>Warn</code>, <code>Error</code>, etc.), and a message description. To help diagnose particular issues, the scope of the system logs can be changed to only include particular message levels. More information about varying the displayed log levels can be found in the Admin section.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Getting_Started/Visualising_Data.html","title":"Visualising Data","text":"<p>Profinity V2 IS NOW IN EARLY ADOPTER RELEASE</p> <p>Profinity V2 is available now in Early Adopter Release.  To support this release we are making the product available to our Early Adopter Community.  If you have any issues or feedback please report it via our support portal or via the Feedback form in the Profinity Admin menu.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Getting_Started/Visualising_Data.html#visualising-data","title":"Visualising Data","text":"<p>Once all of your components have been configured, you are ready to start receiving and visualising data.</p> <p>Each component in your system will have an associated dashboard which can be accessed by selecting the component from the sidebar. The component dashboards are tailored to the specific component and display all of the relevant information and data for that component in a convenient fashion.</p> <p></p> Example of Dashboard Visualising Data"},{"location":"Profinity_Software/Profinity_Version_2/Installation/Docker_Installation.html","title":"Docker Installation","text":"<p>Profinity V2 IS NOW IN EARLY ADOPTER RELEASE</p> <p>Profinity V2 is available now in Early Adopter Release.  To support this release we are making the product available to our Early Adopter Community.  If you have any issues or feedback please report it via our support portal or via the Feedback form in the Profinity Admin menu.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Installation/Docker_Installation.html#installing-profinity-on-docker","title":"Installing Profinity On Docker","text":"<p>Available Profinity Releases</p> <p>Profinity is currently available on Windows machines as a standard desktop application, for selected Unix Platforms (including macOS and Linux) and as a Docker container for Docker enabled environments and Cloud setups.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Installation/Docker_Installation.html#installation-using-docker","title":"Installation using Docker","text":"<p>Profinity can be deployed onto most devices capable of running Docker, including macOS and Linux machines as well as several single-board computers such as Raspberry Pi, BeagleBone Black, etc.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Installation/Docker_Installation.html#prerequisites","title":"Prerequisites","text":"<p>The following items are required to be able to install Profinity:</p> <ul> <li>Docker installed on the target device</li> <li>A device capable of running ASP .Net 9, with Docker support from Microsoft</li> <li>Docker Compose installed on the target device (included with Docker Desktop, available as plugin on Linux machines)</li> <li>A suitable CAN adaptor for the target device</li> </ul>"},{"location":"Profinity_Software/Profinity_Version_2/Installation/Docker_Installation.html#simple-setup","title":"Simple Setup","text":"<p>Profinity V2 is currently in Early Adopter Release</p> <p>When using Profinity V2 on the Docker Early Adopter Program you are going to be working with us up on the development release.  As such things could change rapidly and in unexpected ways!  Please contact Prohelion Support if you have issues or provide us Feedback in Profinity.</p> <p>On the target device, create a new empty directory and a file titled <code>docker-compose.yml</code> in the new directory. The contents of the <code>docker-compose.yml</code> file should be</p> <pre><code>services:\n  profinity:\n      image: prohelion/profinity:latest\n      restart: always\n      #On linux hosts you can run in host mode to enable autodiscovery\n      #network_mode: host\n      ports:\n        - 18080:18080\n        - 18443:18443\n        - 5000:5000\n        - 4876:4876\n</code></pre> <p>For more information about Docker Compose, see the official Docker documentation.</p> <p>Directly Accessing Devices</p> <p>Docker deliberately does not expose all devices through to the containers that run the applications.  In some cases you may wish to expose additional devices to Docker so that you can access things like SocketCAN Natively or discover components that use UDP for broadcasting.  See the official Docker documentation for how to expose these devices to your Docker container.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Installation/Docker_Installation.html#starting-and-stopping-profinity","title":"Starting and Stopping Profinity","text":"<p>The Profinity Docker container is started and stopped using commands from the Docker Compose toolset. First, navigate to the original directory (the one containing the <code>docker-compose.yml</code> file). Then, to begin Profinity, enter <code>docker compose up</code> into the command line.</p> <p>To do so open the URL defined in the Admin / System Configuration / Web panel (i.e., <code>http://profinity:18080</code>) to access the Profinity web client. For users that followed the default setup procedure, the default URL is <code>http://localhost:18080</code> on the local machine or the IP address of the machine and <code>http://[Your IP Address]:18080</code> if accessed remotely.</p> <p>Connecting to the Profinity web client will direct you to the Profinity login page. </p> <p></p> Profinity login page <p>A fresh install of Profinity will only have the administrator user active. To log in, use the following login details.</p> <p>Username: <code>admin</code></p> <p>Password: <code>password</code></p> <p>After logging in, you will arrive at the Profinity homepage.</p> <p></p> Profinity homepage <p>To stop Profinity, enter <code>docker compose down</code> into the command line.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Installation/Running_As_Service.html","title":"Running Profinity as a Service or Daemon","text":"<p>Profinity V2 IS NOW IN EARLY ADOPTER RELEASE</p> <p>Profinity V2 is available now in Early Adopter Release.  To support this release we are making the product available to our Early Adopter Community.  If you have any issues or feedback please report it via our support portal or via the Feedback form in the Profinity Admin menu.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Installation/Running_As_Service.html#running-profinity-as-a-service","title":"Running Profinity as a Service","text":"<p>This guide provides instructions on how to run Profinity as a service on Windows and Unix-based systems, ensuring that it starts automatically on boot and restarts if it fails.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Installation/Running_As_Service.html#table-of-contents","title":"Table of Contents","text":"<ul> <li>Introduction</li> <li>Linux Setup</li> <li>macOS Setup</li> <li>Windows Setup</li> <li>Verification</li> <li>Troubleshooting</li> </ul>"},{"location":"Profinity_Software/Profinity_Version_2/Installation/Running_As_Service.html#introduction","title":"Introduction","text":"<p>Running Profinity as a service allows you to automate its startup and ensure continuous operation. This is particularly useful for production environments where reliability and uptime are critical.  </p> <p>As of version 2 Profinity is now available to run in server mode on Windows, Docker, MacOS and Linux (64 bit Intel and Arm chips only).  </p> <p>In this mode, the Profinity GUI is only available via the browser (there is no Desktop support) and is supported by our REST APIs, which is also available to your custom applications which you can host on the Profinity Server.</p> <p>Why Profinity Server?</p> <p>Do you have a CAN Bus based platform and want to provide modern API centric front ends to support user kiosks or other advanced user interfaces, sophisticated modern data analytics and reporting, remote logging or to run your solution in the cloud, desktop, or embedded hardware?  Profinity Server supports this need.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Installation/Running_As_Service.html#hardware-requirements","title":"Hardware Requirements","text":"<p>Profinity Server does not require any additional Prohelion Hardware to run. It can be used as a general purpose development framework for anyone writing modern web UI's for CAN Bus based architectures or wanting to provide a modern server style interface to your CAN infrastructure with native cloud connectivity.  </p> <p>However, if you are not using Prohelion hardware, you will still need some way to connect to your CAN Bus network, see the CAN Adapters page for information on supported CAN Bus adapters that you can use.</p> <p>Licensing for Production Environments</p> <p>Use of Profinity server in production environments on Windows, Docker, Linux or MacOS may require an additional license key depending on your commercial status with Prohelion.</p> <p>If you are interested in using the tools for your Production environments and do not currently have a Profinity Server arrangement with us, please contact Prohelion on the Contact Us Page of our website and we would be happy to assist with additional information.</p> <p>Running in Docker</p> <p>Note if you are running Profinity inside Docker, then it is Docker not Profinity that you need to setup as a service, you then need to configure Docker to automatically start the Profinity Docker container when it starts up.  See the Docker Documentation for more details.</p> <p>In the 'headless' service mode, Profinity continues to operate as normal with some minor differences in behaviour.</p> <ul> <li>There is no GUI, the server can only be accessed via the APIs and Web Interfaces.</li> <li>Profile files if they need to be chanced, are edited directly rather than through the GUI.  When a Profile file is changed Profinity detects this change and automatically reloads the Profile.</li> <li>Config files are also edited directly, changing a Config file requires a service restart.</li> <li>Profinity Logs are logged as normal and available in the Log directory under</li> </ul> <p><code>[user]/Documents/Prohelion/Profinity/Logs</code></p>"},{"location":"Profinity_Software/Profinity_Version_2/Installation/Running_As_Service.html#linux-setup","title":"Linux Setup","text":"<p>To run Profinity as a service on Linux, you can use <code>systemd</code>, a system and service manager for Linux operating systems.</p> <p>Things can vary on Linux from version to version</p> <p>These instructions are provided as a guide, but depending on your version of Linux, things might be different.  Check the documentation for your release on how to setup a daemon or service if these instructions are not working for you.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Installation/Running_As_Service.html#step-1-create-a-systemd-service-file","title":"Step 1: Create a systemd Service File","text":"<ol> <li> <p>Open a terminal and create a new service file:    <pre><code>sudo nano /etc/systemd/system/profinity.service\n</code></pre></p> </li> <li> <p>Add the following content to the file:    <pre><code>[Unit]\nDescription=Profinity Service\nAfter=network.target\n\n[Service]\nExecStart=/usr/bin/dotnet /path/to/Profinity.dll\nRestart=always\nUser=your-username\nGroup=your-group\nEnvironment=ASPNETCORE_ENVIRONMENT=Production\n\n[Install]\nWantedBy=multi-user.target\n</code></pre>    Replace <code>/path/to/Profinity.dll</code> with the actual path to your Profinity DLL file.</p> </li> </ol>"},{"location":"Profinity_Software/Profinity_Version_2/Installation/Running_As_Service.html#step-2-enable-and-start-the-service","title":"Step 2: Enable and Start the Service","text":"<ol> <li> <p>Reload the systemd manager configuration:    <pre><code>sudo systemctl daemon-reload\n</code></pre></p> </li> <li> <p>Enable the service to start on boot:    <pre><code>sudo systemctl enable profinity.service\n</code></pre></p> </li> <li> <p>Start the service:    <pre><code>sudo systemctl start profinity.service\n</code></pre></p> </li> </ol>"},{"location":"Profinity_Software/Profinity_Version_2/Installation/Running_As_Service.html#macos-setup","title":"macOS Setup","text":"<p>On macOS, you can use <code>launchd</code> to run Profinity as a service.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Installation/Running_As_Service.html#step-1-create-a-launchd-plist-file","title":"Step 1: Create a launchd Plist File","text":"<ol> <li> <p>Open a terminal and create a new plist file:    <pre><code>sudo nano /Library/LaunchDaemons/com.profinity.service.plist\n</code></pre></p> </li> <li> <p>Add the following content to the file:    <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"&gt;\n&lt;plist version=\"1.0\"&gt;\n&lt;dict&gt;\n    &lt;key&gt;Label&lt;/key&gt;\n    &lt;string&gt;com.profinity.service&lt;/string&gt;\n    &lt;key&gt;ProgramArguments&lt;/key&gt;\n    &lt;array&gt;\n        &lt;string&gt;/usr/local/bin/dotnet&lt;/string&gt;\n        &lt;string&gt;/path/to/Profinity.dll&lt;/string&gt;\n    &lt;/array&gt;\n    &lt;key&gt;RunAtLoad&lt;/key&gt;\n    &lt;true/&gt;\n    &lt;key&gt;KeepAlive&lt;/key&gt;\n    &lt;true/&gt;\n&lt;/dict&gt;\n&lt;/plist&gt;\n</code></pre>    Replace <code>/path/to/Profinity.dll</code> with the actual path to your Profinity DLL file.</p> </li> </ol>"},{"location":"Profinity_Software/Profinity_Version_2/Installation/Running_As_Service.html#step-2-load-and-start-the-service","title":"Step 2: Load and Start the Service","text":"<ol> <li> <p>Load the service:    <pre><code>sudo launchctl load /Library/LaunchDaemons/com.profinity.service.plist\n</code></pre></p> </li> <li> <p>Start the service:    <pre><code>sudo launchctl start com.profinity.service\n</code></pre></p> </li> </ol>"},{"location":"Profinity_Software/Profinity_Version_2/Installation/Running_As_Service.html#windows-setup","title":"Windows Setup","text":"<p>In the installation directory of Profinity you will find a file called ProfinityService.cmd.  If default configuration options have been selected for the installation directory, the file is typically found here.</p> <p><code>C:\\Program Files (x86)\\Prohelion\\Profinity\\ProfinityService.cmd</code></p> <p>In order to run the script, you will need to be an administrator.  Open a cmd window as an administrator by searching for cmd, right clicking on it, selecting 'Run As Administrator'.</p> <p>While a default installation of the service can be performed to install the service under the service user of LocalSystem.  We would generally recommend installing Profinity under a different user account, for two reasons.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Installation/Running_As_Service.html#security","title":"Security","text":"<p>By running Profinity as a user you are reducing the security level and hence exposure</p>"},{"location":"Profinity_Software/Profinity_Version_2/Installation/Running_As_Service.html#profile-files","title":"Profile files","text":"<p>When running as a service, the Prohelion home directory of the service user is</p> <p><code>C:\\Windows\\SysWOW64\\Prohelion\\Profinity</code></p> <p>This can be hard to work with in some environments and generally we would not want to be regularly modifying files stored in the Windows directory.  As such you are generally better off installing Profinity under a user account using a command such as.</p> <pre><code>ProfinityService.cmd install [Username to install under]\n</code></pre> <p>As the Profile files then get created in that users account directories.</p> <p>If you do wish to install Profinity under the LocalSystem user, then simply run.</p> <pre><code>ProfinityService.cmd install\n</code></pre> <p>Once this is done you will find Profinity in your Windows Services list and it can be managed as per any other service.</p> <p>Port Conflicts</p> <p>Once Profinity is started as a service, if you are serving API or Web content then there will be a conflict on those ports if you try to start another instance of Profinity on the machine with the same configuration.  If you want to both serve content and develop on one machine at the same time, we suggest installing Profinity under a separate user account to keep these instances from conflicting and use different ports for your development and production instances, by changing the port in the Config file.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Installation/Running_As_Service.html#uninstall-profinity-as-a-windows-service","title":"Uninstall Profinity as a Windows Service","text":"<p>To uninstall Profinity as a Windows Service, run the command below as an administrator from the cmd window.</p> <pre><code>ProfinityService.cmd uninstall\n</code></pre>"},{"location":"Profinity_Software/Profinity_Version_2/Installation/Running_As_Service.html#script-explanation","title":"Script Explanation","text":"<p>The batch script performs the following actions:</p> <ul> <li>Checks for Administrative Permissions: Ensures the script is run with the necessary permissions to manage services.</li> <li>Installs the Service: Uses the <code>sc create</code> command to install Profinity as a service. If a user account is provided, it configures the service to run under that account.</li> <li>Uninstalls the Service: Uses the <code>sc delete</code> command to remove the Profinity service.</li> <li>Error Handling: Provides feedback if the script is not run with administrative permissions or if incorrect parameters are provided.</li> </ul> <p>This script simplifies the process of managing Profinity as a service on Windows, ensuring it can start automatically and run with the necessary permissions.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Installation/Running_As_Service.html#verification","title":"Verification","text":"<p>To verify that the service is running correctly, you can use the following commands:</p>"},{"location":"Profinity_Software/Profinity_Version_2/Installation/Running_As_Service.html#linux","title":"Linux","text":"<ul> <li>Check the status of the service:   <pre><code>sudo systemctl status profinity.service\n</code></pre></li> </ul>"},{"location":"Profinity_Software/Profinity_Version_2/Installation/Running_As_Service.html#macos","title":"macOS","text":"<ul> <li>Check the status of the service:   <pre><code>sudo launchctl list | grep com.profinity.service\n</code></pre></li> </ul>"},{"location":"Profinity_Software/Profinity_Version_2/Installation/Running_As_Service.html#windows","title":"Windows","text":"<p>Check the state of the service in the Windows Service Manager.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Installation/Running_As_Service.html#troubleshooting","title":"Troubleshooting","text":"<ul> <li>Service Fails to Start: Check the logs for errors using <code>journalctl -u profinity.service</code> on Linux or <code>sudo launchctl log show</code> on macOS and the Event Log in Windows.</li> <li>Permission Issues: Ensure the service file has the correct permissions and the user/group settings are correct.</li> <li>Path Errors: Double-check the path to the Profinity DLL file in the service configuration.</li> </ul>"},{"location":"Profinity_Software/Profinity_Version_2/Installation/Windows_Installation.html","title":"Windows Installation","text":"<p>Profinity V2 IS NOW IN EARLY ADOPTER RELEASE</p> <p>Profinity V2 is available now in Early Adopter Release.  To support this release we are making the product available to our Early Adopter Community.  If you have any issues or feedback please report it via our support portal or via the Feedback form in the Profinity Admin menu.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Installation/Windows_Installation.html#installing-profinity-on-windows","title":"Installing Profinity On Windows","text":"<p>Available Profinity Releases</p> <p>Profinity is currently available on Windows machines as a standard desktop application, for selected Unix Platforms (including macOS and Linux) and as a Docker container for Docker enabled environments and Cloud setups.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Installation/Windows_Installation.html#installation-on-windows","title":"Installation on Windows","text":"<p>Installing Profinity on your Windows machine is relatively simple due to the Profinity Setup Wizard.</p> <p>Download Profinity V2 Early Adopter Release </p> <ol> <li>Contact support to get a copy of the Profinity V2 Early Adopter Installer</li> <li>Open the downloaded file <code>Profinity.Install.msi</code></li> <li>Follow the prompts in the Profinity Setup Wizard</li> </ol> <p>Launching the Profinity desktop client will take you directly to the Profinity homepage.</p> <p></p> Profinity homepage <p>Available Ports for Windows</p> <p>Even when Profinity is just being run as a Desktop application, it still connects to all available TCP interfaces on the running machine on port 18080 by default.  If you do not want your Profinity instance to be accessed remotely, change the default IP address that Profinity runs on to localhost (127.0.0.1) in the System Configuration.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Installation/Windows_Installation.html#starting-and-stopping-profinity","title":"Starting and Stopping Profinity","text":"<p>A a Windows Desktop application, Profinity is started by running the application from the Start Menu.  </p> <p>To stop Profinity, shutdown the Application.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Installation/Windows_Installation.html#accessing-a-desktop-application-instance-via-a-web-browser","title":"Accessing a Desktop Application Instance via a Web Browser","text":"<p>With Profinity Desktop running, you can also access the user interface as a web application if the Profinity instance is running on an address other than 127.0.0.1.  </p> <p>To do so open the URL defined in the Admin / System Configuration / Web panel (i.e., <code>http://profinity:18080</code>) to access the Profinity web client. For users that followed the default setup procedure, the default URL is <code>http://localhost:18080</code> on the local machine or the IP address of the machine and <code>http://[Your IP Address]:18080</code> if accessed remotely.</p> <p>Connecting to the Profinity web client will direct you to the Profinity login page. </p> <p></p> Profinity login page <p>A fresh install of Profinity will only have the administrator user active. To log in, use the following login details.</p> <p>Username: <code>admin</code></p> <p>Password: <code>password</code></p>"},{"location":"Profinity_Software/Profinity_Version_2/Installation/Zip_Installation.html","title":"Zip Installation (macOS and Linux)","text":"<p>Profinity V2 IS NOW IN EARLY ADOPTER RELEASE</p> <p>Profinity V2 is available now in Early Adopter Release.  To support this release we are making the product available to our Early Adopter Community.  If you have any issues or feedback please report it via our support portal or via the Feedback form in the Profinity Admin menu.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Installation/Zip_Installation.html#installing-profinity-on-macos-and-linux","title":"Installing Profinity On macOS and Linux","text":"<p>Available Profinity Releases</p> <p>Profinity is currently available on Windows machines as a standard desktop application, for selected Unix Platforms (including macOS and Linux) and as a Docker container for Docker enabled environments and Cloud setups.</p>"},{"location":"Profinity_Software/Profinity_Version_2/Installation/Zip_Installation.html#zip-installation","title":"Zip Installation","text":"<p>Profinity is available as a Zip installation file for Unix and MacOS platforms, this approach does not require any installer but simply requires the files to be run with a version of the Microsoft ASP.NET Core 9.0 runtime.</p> <p>To use this installation approach firstly download and install a ASP.NET Core 9 or above runtime (note we are currently only testing against .Net 9 releases so if you do use a more recent version you may have issues).  The ASP.NET Core runtime is the version of .Net that is required.</p> <p>Download ASP.NET Core 9 </p> <p>Once installed download the latest Profinity release .zip file from the  and unzip the file in to the folder that you wish to run Profinity on.</p> <p>Download Profinity V2 Early Adopter Release .Zip file </p>"},{"location":"Profinity_Software/Profinity_Version_2/Installation/Zip_Installation.html#starting-and-stopping-profinity","title":"Starting and Stopping Profinity","text":"<p>To start Profinity from a Zip installation, go to the folder where Profinity has been unzipped and simply run the command</p> <p><code>dotnet Profinity.dll</code></p> <p>The following or similar should then appear.</p> <pre><code>Prohelion Profinity - v2.1.0.0\nProfinity (c) 2023 - Prohelion Pty Ltd.\n------------------------------------------\nPress Ctrl-C to shut the application down.\n\nINFO: Starting Prohelion - Profinity\nINFO: Default Quartz.NET properties loaded from embedded resource file\nINFO: Initialized Scheduler Signaller of type: Quartz.Core.SchedulerSignalerImpl\nINFO: Quartz Scheduler created\nINFO: RAMJobStore initialized.\nINFO: Quartz Scheduler 3.13.1.0 - 'DefaultQuartzScheduler' with instanceId 'NON_CLUSTERED' initialized\nINFO: Using thread pool 'Quartz.Simpl.DefaultThreadPool', size: 10\nINFO: Using job store 'Quartz.Simpl.RAMJobStore', supports persistence: False, clustered: False\nINFO: Scheduler DefaultQuartzScheduler_$_NON_CLUSTERED started.\nINFO: Profinity Profile : Default 11\nINFO: Profinity Services Starting\nINFO: Now listening on: http://127.0.0.1:18080\n</code></pre> <p>With Profinity running, open the URL defined in the <code>Config.yaml</code> file (i.e., <code>http://profinity:18080</code>) to access the Profinity web client. </p> <p>Connecting to the Profinity web client will direct you to the Profinity login page. </p> <p></p> Profinity V2 login page <p>A fresh install of Profinity will only have the administrator user active. To log in, use the following login details.</p> <p>Username: <code>admin</code></p> <p>Password: <code>password</code></p> <p>After logging in, you will arrive at the Profinity homepage.</p> <p></p> Profinity V2 homepage <p>To stop Profinity, go to the terminal window running Profinity and press <code>Ctrl-C</code></p>"},{"location":"Solar_Car_Racing/index.html","title":"Solar Car Racing Solutions","text":"<p>Prohelion provides a comprehensive suite of products and solutions specifically designed for solar car racing teams. Our racing-proven technology combines high performance, reliability, and ease of use to help teams achieve their competitive goals.</p>"},{"location":"Solar_Car_Racing/index.html#overview","title":"Overview","text":"<p>Solar car racing demands the highest levels of efficiency, reliability, and performance from every component. Prohelion's solar racing solutions have been developed through years of real-world racing experience and continue to evolve with the sport. Our products are used by winning teams worldwide in competitions such as the World Solar Challenge, American Solar Challenge, and Formula Sun Grand Prix.</p>"},{"location":"Solar_Car_Racing/index.html#core-products","title":"Core Products","text":"<ul> <li> <p> Battery Management Systems</p> <p>Advanced lithium battery management for optimal safety, performance, and longevity in racing conditions. Precise cell monitoring and balancing with real-time telemetry.</p> <p> Learn More</p> </li> <li> <p> Motor Controllers</p> <p>WaveSculptor motor controllers deliver industry-leading efficiency (&gt;98%) and power density, crucial for maximizing range and performance in solar racing.</p> <p> Learn More</p> </li> <li> <p> Solar Charge Controllers</p> <p>Maximum Power Point Tracking (MPPT) controllers optimized for solar racing to extract maximum power from solar arrays with industry-leading efficiency.</p> <p> Learn More</p> </li> </ul>"},{"location":"Solar_Car_Racing/index.html#legacy-racing-products","title":"Legacy Racing Products","text":"<ul> <li> <p> CAN Ethernet Bridge</p> <p>Seamless integration between CAN bus networks and Ethernet-based systems, enabling advanced telemetry and data logging for race strategy optimization.</p> <p> Learn More</p> </li> <li> <p> EV Driver Controller</p> <p>Critical interface between driver and vehicle electrical systems, offering intuitive control and essential safety features for racing applications.</p> <p> Learn More</p> </li> <li> <p> Open Source Software</p> <p>Community-driven software tools including ArrowPoint Telemetry, Tablet apps, and CAN bus utilities to enhance vehicle development and racing performance.</p> <p> Learn More</p> </li> </ul>"},{"location":"Solar_Car_Racing/index.html#racing-support-services","title":"Racing Support &amp; Services","text":"<ul> <li> <p> Technical Support</p> <p>Experienced racing engineers provide system integration assistance, performance optimization consulting, and race preparation support.</p> <p> Contact Support</p> </li> <li> <p> Profinity Software Suite</p> <p>Advanced CAN bus management platform for real-time monitoring, cloud connectivity, and comprehensive vehicle data analysis.</p> <p> Learn More</p> </li> </ul>"},{"location":"Solar_Car_Racing/index.html#why-choose-prohelion-for-solar-racing","title":"Why Choose Prohelion for Solar Racing?","text":""},{"location":"Solar_Car_Racing/index.html#proven-track-record","title":"Proven Track Record","text":"<p>Our products have powered winning teams in major solar racing competitions worldwide, demonstrating their reliability and performance under the most demanding conditions.</p>"},{"location":"Solar_Car_Racing/index.html#continuous-innovation","title":"Continuous Innovation","text":"<p>We continuously develop and improve our products based on real racing feedback and the latest technological advances.</p>"},{"location":"Solar_Car_Racing/index.html#community-support","title":"Community Support","text":"<p>Prohelion is committed to supporting the global solar racing community through open source contributions, educational initiatives, and technical expertise.</p>"},{"location":"Solar_Car_Racing/index.html#racing-heritage","title":"Racing Heritage","text":"<p>Our team includes experienced solar racing engineers who understand the unique challenges and requirements of competitive solar vehicles.</p> <p>Ready to power your solar racing success? Contact our racing team to discuss your specific requirements and learn how Prohelion can help you achieve your competitive goals.</p>"},{"location":"Solar_Car_Racing/CAN_Ethernet_Bridge/index.html","title":"CAN Bus to Ethernet Bridge","text":"<ul> <li> <p> User Manual</p> <p>User Manual for the Prohelion CAN to Ethernet Bridge</p> <p> Getting started</p> </li> <li> <p> Ethernet Interface</p> <p>Information on how the Bridge represents CAN Bus data over TCP and UDP</p> <p> Reference</p> </li> <li> <p> Datasheet</p> <p>Datasheet for the Prohelion CAN to Ethernet Bridge</p> <p> Datasheet</p> </li> <li> <p> Profinity</p> <p>Our battery and CAN Bus management software solution</p> <p> Supporting Software</p> </li> </ul>"},{"location":"Solar_Car_Racing/CAN_Ethernet_Bridge/CAN_Ethernet_Fundamentals.html","title":"CAN & Ethernet Fundamentals","text":"<p>Unsurprisingly the fundamental purpose of the Can to Ethernet bridge is to connect CAN Bus networks to Ethernet based networks and support bi-directional communications.</p> <p>CAN Bus is a commonly used network protocol used to control vehicles and other systems that need a highly reliable, low latency, near real time control capability. </p> <p>Ethernet is the most common networking protocol found in general use today and underpins TCP and UDP which is used by PC or internet connected devices.</p> <p></p> Ethernet Cable <p>CAN Bus achieves its high levels of reliability by constantly sending packets of data where the packet contains an ID indicating the device and then a set of values. It has a clever mechanism that allows it to prioritise packets based on their importance using the ID. </p> <p>For example if you are sending a packet that contains the position of the accelerator in a car, that information will have an ID for the accelerator and might be send 10 times a second. Should a network glitch occur and a packet be lost, then largely that is not or any importance, as in most cases the next packet will arrive within 1/10 of a second, sufficient to retain control of the vehicle.</p> <p>Ethernet works somewhat differently and has two distinct modes that it can operate under, being TCP and UDP. </p> <p>Unlike CAN Bus which is a network protocol designed with vehicle control in mind, Ethernet is a general purpose protocol used for all modern internet communications. It\u2019s a lot more complex in its operation, here is some important concepts to understand before you read on.</p>"},{"location":"Solar_Car_Racing/CAN_Ethernet_Bridge/CAN_Ethernet_Fundamentals.html#udp-vs-tcp","title":"UDP vs TCP","text":"<p>Ethernet has two distinct modes in which it can be used and the CAN Bus bridge supports both. In both cases the CAN Bus bridge is having a \u2018conversation\u2019 with Profinity or the Tritium tools. But the way that conversation works is completely different. To make this a bit easier initially, lets just think of it in the same way we communicate as people.</p> <p>User Datagram Protocol (UDP)</p> <p>UDP is a network broadcast model. </p> <p>Think of it as being like a conversation where a CAN-Ethernet Bridge (in this case a person) is simply shouting out the CAN Bus packets as they fly past to anyone who wants to listen on the Ethernet side. Perhaps no one is listening, perhaps many people are. UDP is the default behaviour of the CAN Bus bridge, it detects a CAN Bus packet on the CAN Bus network side and shouts the values from the packet on to the Ethernet side using UDP.</p> <p>In some ways this is a great model. </p> <p>Just like CAN Bus, we don't need to worry about reliability. If a packet is lost on the network, a short time later it is resent via a new shout. But there are also issues, UDP is noisy, multiple CAN Bus bridges shouting on the same network can all be shouting at once, which would be like multiple people shouting in a room and this makes it hard to figure out who to listen to.</p> <p>Finally network routers need to make decisions on how far they want all this noise to travel in a network. </p> <p>Obviously we don't want all this shouting to go too far otherwise we are just going to flood the network with UDP packets, so networking devices (like WiFi access points) are often very aggressive about how far they will let UDP go in a network and will often drop the packets to prevent a network flood.</p> <p>Transmission Control Protocol (TCP)</p> <p>TCP is a point to point communication model. </p> <p>Its closet analogy in real life is to two people having a conversation. This has got some real benefits and some disadvantages. One of the key benefits is the communication can now be reliable, if one party misses part of the conversation it can ask for it to be repeated and hence not lost. </p> <p>Also it\u2019s a lot less noisy and because of that network routers are happy to allow the conversation to be transmitted long distances. Because of this TCP is the underlying protocol used to power things like the internet, where reliability and ability to transmit long distances is very important. </p> <p>On the downside, TCP is a one to one style communication model and the CAN-Ethernet Bridge works this way, talking to one TCP connection at a time. Also the reliability TCP provides is very useful at times, but can also be a bit of a challenge with fast moving protocols like CAN Bus which manage reliability via a completely different approach.</p>"},{"location":"Solar_Car_Racing/CAN_Ethernet_Bridge/CAN_Ethernet_Fundamentals.html#dhcp-vs-static-ip","title":"DHCP vs Static IP","text":"<p>In TCP mode, the setting of your IP address is the single thing most likely to determine the success or failure when setting up the bridge.</p> <p>All devices connected to a network are assigned an IP address. It\u2019s an address unique to that device on the network that allows the router to determine where to send traffic. Separately to their IP Address, all Ethernet connected devices also have a MAC address which is a unique address for that device globally. </p> <p>We will not deal with MAC addresses here is it is not particularly important for the purposes of the bridge, but if it comes up, that is what it does.</p> <p>IP Addresses are either dynamically set or statically set. </p> <p>In the dynamic configuration, when the Network Adapter or the bridge connects to a network it asks a DCHP server to provide it an IP address. The DCHP server which is generally contained inside your network router knows all the devices that are currently on the network and assigns the device an IP address from a valid and currently unused range. </p> <p>In the static IP approach you manually assign the device and IP address, basically doing the job of the DHCP server.</p> <p>Two things are very important here.</p> <ol> <li>The IP Address needs to be unique on your network</li> <li>The digits assigned to the IP address are important and will determine the behaviour of the network.</li> </ol> <p>You could write a whole book on networking and lots of people have but the key piece of information that you need to know is that for most situations the first three digits of your IP address are critical to its operation. </p> <p>For example, consider the following network</p> Device IP Address Comments <code>Router</code> 192.168.16.1 Your Wifi or ethernet router, the DHCP Server is probably running here <code>PC</code> 192.168.16.60 This is where Profinity or the Tritium tools are running <code>CAN-Ethernet Bridge</code> 192.168.16.90 This is where the Tritium or Prohelion CAN-Ethernet Bridge is running <p>This is a well setup network and will probably cause you no problems with either Profinity or the Tritium tools. </p> <p>The reason simply is that the first three digits of the IP addresses are the same or in networking terms the devices are all running in the same subnet.</p> <p>This means that the Router (192.168.16.1) does not need to do anything tricky to send information between these devices. </p> <p>However, lets consider another network setup.</p> Device IP Address Comments <code>Router</code> 192.168.16.1 Your Wifi or ethernet router, the DHCP Server is probably running here <code>PC</code> 192.168.16.60 This is where Profinity or the Tritium tools are running <code>CAN-Ethernet Bridge</code> 169.254.82.45 This is where the Tritium or Prohelion CAN-Ethernet Bridge is running <p>Here we can see we have a problem. </p> <p>The CAN-Ethernet Bridge is running with an IP address where the first three digits are completely different. For some scenarios this might still actually work, but it\u2019s going to cause you issues and ideally the system should never be setup this way.</p> <p>The fact that the IP address starts with 169.254 also indicates a key issue, that the device was not assigned a static IP address and when it asked a DHCP server for an address, no response was forthcoming. </p> <p>This is a fairly common scenario that causes problems.  This issue often happens when setting up the bridge with a direct connection to a PC and no router in the middle. In this scenario we would always recommend a static IP address be used.</p> <p>If you want to understand the scenario where this configuration could work see the Supported Network Setups section of this document and read about the configuration ADVANCED - Direct TCP Connection using a router or WiFi as there is a scenario where you might actually want this configuration, but it is fairly unusual and requires a very specific setup to work.</p> <p>If you take two things from this whole article it\u2019s should hopefully be the the subnet (the first three digits) is very critical to the reliable operation of the bridge and ideally don't leave your bridges running in the IP address range of 169.254.x.x that means they are not setup right.</p>"},{"location":"Solar_Car_Racing/CAN_Ethernet_Bridge/Common_Problems_And_Solutions.html","title":"Common Problems & Solutions","text":""},{"location":"Solar_Car_Racing/CAN_Ethernet_Bridge/Common_Problems_And_Solutions.html#firewall-requirements","title":"Firewall Requirements","text":"<p>The Tritium and Prohelion CAN-Ethernet Bridges need to have certain ports open on the firewall in order to receive traffic and heartbeats from the bridges without issues.</p> <p>Fix: Add the following ports to your firewall to allow the traffic through. The easiest way to actually do this is just to install Profinity as it does it automatically as part of the install process.</p> <pre><code>UDP: Port 4876\nTCP: Port 4876\n</code></pre> <p>If you are using SocketCanD which is also supported by Profinity then you need to also add</p> <pre><code>UDP: Port 42000\n</code></pre>"},{"location":"Solar_Car_Racing/CAN_Ethernet_Bridge/Common_Problems_And_Solutions.html#tcp-adapters-not-in-the-same-subnet-on-direct-connection-or-when-connected-via-a-hub","title":"TCP - Adapters not in the same subnet on direct connection or when connected via a hub.","text":"<p>If your PC and Bridge are not in the same subnet (they don't have the same first three digits) and you are on a direct wired connection or a hub. Then the networking stack does not know how to route traffic between the PC and the CAN-Ethernet Bridge.</p> <p>Fix: Adjust the IP addresses on either the PC or the CAN-Ethernet Bridge to get them on to the same subnet. Use Static IP addresses to ensure that this change remains in place after restarts.</p>"},{"location":"Solar_Car_Racing/CAN_Ethernet_Bridge/Common_Problems_And_Solutions.html#unable-to-set-the-bridge-ip-to-be-static-as-you-cannot-get-a-tcp-connection-to-it","title":"Unable to set the Bridge IP to be static as you cannot get a TCP connection to it","text":"<p>If the PC and the Bridge have a different subnet then it is often not possible to connect to the bridge via TCP.  Connecting to the bridge via TCP is required in order to set its IP address.  </p> <p>As such it is possible to end up in a situation where you cannot change the bridge IP address but need to in order to be able to change the bridge IP address!</p> <p>Fix: There are two ways to solve this issue</p> <ol> <li> <p>Use the direct cable connection configuration outlined in Supported Network Setups, resetting both the IP Address on the bridge (by pushing the reset button) and the IP Address on the PC by running ipconfig /release followed by ipconfig /renew in a command window.  You should now be able to AutoDiscover the adapter and change its IP Address to something you want using Profinity.</p> </li> <li> <p>Manually change the IP Address of the network adapter on your PC to a static IP address that matches the subnet of the bridge.  You can see the subnet of the bridge in the AutoDiscovery window.  Once the subnets are the same you should be able to connect to the bridge in Profinity and change its IP address to what you want it to be.  Once that is done, change your PC's IP address back.</p> </li> </ol>"},{"location":"Solar_Car_Racing/CAN_Ethernet_Bridge/Common_Problems_And_Solutions.html#wifi-that-does-not-span-udp-across-subnets","title":"WiFi that does not span UDP across subnets","text":"<p>Your CAN-Ethernet Bridge is connected to a router and your PC or laptop is connected via WiFi. The adapter cannot be auto discovered, or if it does get discovered it tends to work unreliably and packets seem to disappear.</p> <p>Fix: Your WiFi router is not handling broadcast UDP correctly. Make sure that your WiFi router supports broadcast UDP and if it does set it up to be enabled. Use UDP broadcast testing tools to ensure that it works as expected or the CAN-Ethernet Bridge and Profinity AutoDiscovery as outlined above in the networking section.</p>"},{"location":"Solar_Car_Racing/CAN_Ethernet_Bridge/Common_Problems_And_Solutions.html#the-can-packets-are-just-not-showing-up-in-the-tritium-tools","title":"The Can Packets are just not showing up in the Tritium tools","text":"<p>The bridge is connect the packet are showing up in WireShark but for some reason they are not showing up in the Tritium tools. </p> <p>This is a very common problem, that is usually caused by the fact that the Tritium tools have connected to the wrong network adapter on the PC. The Tritium tools will only connect to one network adapter and take direction from the OS which one to use. If they are provided the wrong network adapter by the OS then while traffic might be coming in on your ethernet connection, if the tool is connected to your WiFi connection, nothing is going to show up.</p> <p>Fix: Disable every network adapter on the PC apart from the one you want to use. This is achieved by right clicking on the adapter in the control panel and disabling it. By leaving just the correct adapter active, this forces the Tritium tools to use the right network adapter as there is only one option they can use. This is generally not an issue with Profinity as it works differently and uses the right adapter based on information provided during AutoDiscovery.</p>"},{"location":"Solar_Car_Racing/CAN_Ethernet_Bridge/Common_Problems_And_Solutions.html#virtualisation-software","title":"Virtualisation Software","text":"<p>Profinity is not working well or at all in a visualised environment such as VmWare Fusion.</p> <p>Fix: Virtualisation tools like VmWare fusion create virtual IP stacks to virtualise network adapters. All of this can be very problematic when trying to get UDP to work. If possible explicitly connect your virtual network adapter to a physical ethernet (not WiFi, that just complicates things even further) on your host machine.</p> <p>Profinity can work in this model, in fact we develop and test Profinity on visualised machines, but it\u2019s not the most reliable way to get it to work.*</p>"},{"location":"Solar_Car_Racing/CAN_Ethernet_Bridge/Common_Problems_And_Solutions.html#multiple-tcp-clients-on-one-bridge","title":"Multiple TCP clients on one bridge","text":"<p>The Tritium CAN-Ethernet Bridge can only support a single TCP connection at any one time, a second TCP connection will fail.</p> <p>Fix: If you need to have multiple connections to the CAN-Ethernet Bridge at once then use UDP, which can support this. The CAN-Ethernet Bridge will only support one TCP connection at a time.</p>"},{"location":"Solar_Car_Racing/CAN_Ethernet_Bridge/Common_Problems_And_Solutions.html#rapid-tcp-connect-disconnect","title":"Rapid TCP Connect / Disconnect","text":"<p>Rapidly connecting and disconnecting the CAN-Ethernet Bridge in TCP mode can cause the bridge to start rejecting TCP connection requests. This is a self preservation mechanism designed to prevent the bridge from being overloaded from a deliberate or accidental connection flood.</p> <p>Fix: If this occurs wait for a short period of time (30 seconds to a minute) and the bridge will start accepting connections again.</p>"},{"location":"Solar_Car_Racing/CAN_Ethernet_Bridge/Common_Problems_And_Solutions.html#windows-or-bridge-network-stack-issues","title":"Windows or Bridge Network Stack issues","text":"<p>Under very unusual circumstances the Windows network stack or bridge network stack can get in a tangle and just not accept packets or connections. This seems to mainly occur for us in visualised environments and may not be related to the OS network stack but rather the virtualisation stack.</p> <p>Fix: Power cycle the CAN-Ethernet Bridge and if that does not work reboot the PC. If you are doing this a lot it is likely not the primary issue and you should probably read the article end to end to see if you can find out what the root cause really is.</p>"},{"location":"Solar_Car_Racing/CAN_Ethernet_Bridge/Fundamentals.html","title":"Fundamentals","text":"<p>Here is a few fundamental concepts that are worth knowing when working with the Tritium or Prohelion CAN-Ethernet bridges.</p> <p></p> Prohelion CAN to Ethernet Bridge"},{"location":"Solar_Car_Racing/CAN_Ethernet_Bridge/Fundamentals.html#reset-button","title":"Reset Button","text":"<p>There is a reset button that you can see in the image above, just to the right of the Tritium or Prohelion logo.  Pressing and holding this button will reset the setup of the bridge back to default.</p>"},{"location":"Solar_Car_Racing/CAN_Ethernet_Bridge/Fundamentals.html#udp-mode-vs-tcp-mode","title":"UDP mode vs TCP mode","text":"<p>The CAN-Ethernet Bridges have the ability to send and receive packets in UDP mode or in TCP mode, they can even send and receive packets in a blended mode where both protocols are being used at once.</p> <p>UDP and TCP are fundamentally different and have different pros and cons, the CAN &amp; Ethernet section of this FAQ has much more detail on that.  </p>"},{"location":"Solar_Car_Racing/CAN_Ethernet_Bridge/Fundamentals.html#bus-id","title":"Bus Id","text":"<p>The Bus Id is used to uniquely identify a Bus on a network and is particularly important when using UDP. If you have two CAN-Ethernet Bridges on a network with the same Bus Id and you are using UDP then there is a significant risk that the traffic from those bridges will get mixed up and sending messages to one bridge will result in both bridges getting the message.</p> <p>This is obviously not ideal so it is important that if you have multiple Bus Ids on one network, they use be unique. Bus Ids are set on the firmware of the CAN-Ethernet Bridge, you can set this either via Profinity or the Tritium Can Bridge Config tool. We would recommend Profinity where possible.</p>"},{"location":"Solar_Car_Racing/CAN_Ethernet_Bridge/Fundamentals.html#v1-vs-v2-can-ethernet-bridges","title":"V1 vs V2 CAN-Ethernet Bridges","text":"<p>There are two major releases of the CAN-Ethernet Bridge firmware, we call them V1 and V2 bridges. </p> <p>V1 bridges can be updated to V2 bridges by refreshing their firmware. The main difference between V1 and V2 bridges is the number of Bus Ids (see below) that they can support. V1 bridges can support up to 16 Bus Ids, V2 bridges up to 32,767 different bus IDs.</p> <p>When configuring Profinity you need to make sure that your bridge version is correct as the protocol used by V1 bridges is different to V2. AutoDiscovery can identify the bridge version correctly and will set it up correctly, so wherever possible use AutoDiscovery.</p> <p>If you are using the Tritium tools there are V1 Tritium tools and V2 Tritium tools. V1 tools will not be able to work with V2 bridges, V2 tools should be able to manage both bridge, but regardless to limit issues we would recommend using the tools for your bridge version. Profinity works fine with both V1 and V2 bridges as long as you have it set correctly in your bridge settings in the Profile.</p>"},{"location":"Solar_Car_Racing/CAN_Ethernet_Bridge/Fundamentals.html#client-id","title":"Client Id","text":"<p>Each CAN Bus Bridge as well as Profinity or the Tritium Can Bus tools have a unique Id that identifies the end point and is generally the same as the Mac Address of the machine that the connection is running from. </p> <p>From the position of using the tools this is largely a behind the scenes capability, but if you are looking at the CAN Bus traffic in a tool like Wireshark you will see the Client Id in each packet transmitted and it is a useful way to determine which bridge sent what message.</p>"},{"location":"Solar_Car_Racing/CAN_Ethernet_Bridge/Fundamentals.html#single-messages-vs-bulk-messages","title":"Single Messages vs Bulk Messages","text":"<p>In TCP Mode, the bridge has the ability to transmit CAN Bus packets in bulk. The advantage of this mode is that if you are doing a firmware change or flash (both of which can occur in CAN Bus) then the order of the packets can be more guaranteed and the reliability can also be better.</p>"},{"location":"Solar_Car_Racing/CAN_Ethernet_Bridge/Overview.html","title":"Overview","text":"<p>The Tritium and Prohelion CAN Bus bridges are a widely used technology for Tritium and Prohelion customers. They bridge from CAN Bus to Ethernet, providing a reliable and scalable mechanism to easily connect a PC or Ethernet based device to a CAN Bus based device. </p> <p></p> CAN to Ethernet Bridge <p>They are also a common source of challenges, particularly for new users.</p> <p>This guide is designed to explain some of the fundamental concepts behind the bridges and how to get the most out of this very capable piece of hardware.</p> <p>Before diving in to the bridge itself it is work being familiar with some of the networking concepts involved. Even if you are very familiar with UDP, TCP, DCHP etc, it is worth skim reading the next section as some of the concepts  impact the most common issues encountered with the bridges in everyday use.</p> <p>Also it is important to note that while this guide covers both the Tritium and Profinity tools, we would recommend that if you are using the current Tritium tools have a look at Profinity and use Profinity  wherever possible, it gets regular updates and has a lot of features designed to make your life easier and this whole experience of using the bridges a lot more reliable. The Tritium CAN Bus tools while not End of Life are functionally stabilised and unlikely to see further updates.</p> <p>Prohelion is developing these tools in collaboration with Tritium so you will get access to the best of both worlds.</p> <p>If you are still having issues with your CAN-Ethernet Bridges after reading this guide then please feel free to get in Contact with us</p>"},{"location":"Solar_Car_Racing/CAN_Ethernet_Bridge/Quickstart.html","title":"Quickstart","text":"<p>There is a lot of information in this article, if you just want to get started quickly then here is the place to start. </p> <p>Just be aware, to get the most out of the bridge it\u2019s worth reading right through the other sections as well.</p>"},{"location":"Solar_Car_Racing/CAN_Ethernet_Bridge/Quickstart.html#getting-started","title":"Getting Started","text":"<p>Here is a simple guide to getting you started, you can also use these steps if you get in to trouble and need to reset your CAN-Ethernet Bridge for some reason.</p> <pre><code>1. Plug your CAN-Ethernet Bridge in to a 12v power source \n2. Install Profinity on your PC\n3. Connect the PC and bridge via one of the two approaches below\n4. Make sure the CAN-Ethernet Bridge and the PC are in the same subnet.\n</code></pre> <p>It really is that simple but it's worth pointing out that step 4 is where 95% of all issues come from.</p>"},{"location":"Solar_Car_Racing/CAN_Ethernet_Bridge/Quickstart.html#the-two-best-ways-to-connect-the-bridge-and-pc","title":"The two best ways to connect the Bridge and PC","text":"<p>This really depend on if you have a router with a DHCP server or not. Having a router with DHCP and a PC that can support wired ethernet is going to cause you less issues, so if you have this setup use it now.</p> <p>Option 1 - Direct Cable Connection, or using a network hub</p> <p>This is the most common setup that we see people attempt with the CAN-Ethernet bridge, but it is also the setup most fraught with potential problems.  </p> <p>Why?  Because to get this setup working with the bridge and the PC ending up in the same subnet, we are relying on IP allocation failing and things like networks do not always 'fail' in predicable ways.</p> <p>The 169.x.x.x address range is the IP range that network adapters use when they have no idea what IP address they should be using.  </p> <p>Both the CAN-Ethernet Bridge and your Windows PC will automatically assign themselves an IP address in this range if they do not have static IP addresses and can't reach a DHCP server.  This works a lot of the time as the PC and Bridge end up by default in the same subnet, but if either device already has an IP then you can end up with this approach not working, because in that case the bridge and the PC are not in the same subnet</p> <pre><code>1. Plug the PC and CAN-Ethernet Bridge together directly or via the hub\n2. Press the reset button on your CAN-Ethernet Bridge\n3. The bridge will get an IP in the 169.x.x.x or 168.x.x.x range\n4. Your PC should also get an IP in the same range if not ...\n5. Run ipconfig /release and ipconfig /renew in a command window\n6. Using AutoDiscovery in Profinity to locate the CAN-Ethernet Bridge\n</code></pre> <p>Once you have it working, we would generally recommend that you take this opportunity set a static IP address on your CAN-Ethernet Bridge and your PC network adapter. </p> <p>Both IP address should have the same first three digits and have their subnets set to 255.255.255.0. This will ensure they work reliably each time you connect them going forwards as they are now in the same subnet.</p> <p>You can use the automatic IP addresses assigned in step 3, but it\u2019s not going to give you reliable consistent behaviours.</p> <p>Option 2 - If you have a router with DHCP enabled and two ethernet cables</p> <p>This is another good option to use if you want reliable behaviours out of your configuration.</p> <pre><code>1. Plug your CAN Bus bridge and your PC in to the router with cables.\n2. Press the reset button on your CAN-Ethernet Bridge\n3. Both devices will be assigned an IP address from the DHCP server.\n4. Use Profinity and with AutoDiscovery locate the bridge.\n</code></pre> <p>If you are going to use this network all the time then this is all that is required. But we would again suggest taking this opportunity to set Static IPs on at least your bridge using Profinity, if for some reason you do not want to set static IPs then use UDP rather than TCP in your profile as in TCP mode as the DHCP server might assign your CAN-Ethernet Bridge a different IP address in the future.</p> <p>If you need a different configuration, there are other network configurations that will work and we have further information in the Supported Network Setups section.</p>"},{"location":"Solar_Car_Racing/CAN_Ethernet_Bridge/Supported_Network_Setups.html","title":"Supported Network Setups","text":"<p>The single most common issues we encounter with the CAN Bus bridges are network related. </p> <p>Here are the five possible setups we support and a quick guide to getting them going.  We have put them in recommended order based on what\u2019s going to be the most reliable.</p> <p>For all scenarios (apart from the last one), to confirm your bridge is correctly setup ensure that Profinity can Auto Discover your bridge.</p> <p>If you have issues see the section on Common Problems and Solutions section.</p> <p>Remember: Static IP addresses, particularly on the CAN-Ethernet bridge are the best way to achieving consistent, reliable behaviours on your bridge. Use them whenever possible.</p>"},{"location":"Solar_Car_Racing/CAN_Ethernet_Bridge/Supported_Network_Setups.html#direct-connect-recommended","title":"Direct Connect - RECOMMENDED","text":"<p>CAN Bus bridge directly connected to your PC (no router)</p> <p>Set the IP addresses on both your CAN Bus bridge and the PC network adapter that you are using to connect to your bridge to be Static and in the same subnet (first three digits are the same, last digit is different).</p> <p>For example PC: 192.168.16.60 (Subnet 255.255.255.0), CAN-Ethernet Bridge: 192.168.16.70 (Subnet: 255.255.255.0).</p> <p>Note this setup is only going to be reliable time after time if you use Static IPs for both the PC the CAN Bus Bridge, if either of your adapters are set to use DHCP, it will not be reliable.</p>"},{"location":"Solar_Car_Racing/CAN_Ethernet_Bridge/Supported_Network_Setups.html#wired-via-hub-recommended","title":"Wired via Hub - RECOMMENDED","text":"<p>CAN Bus bridge and PC connected via a wired network hub (no DHCP server)</p> <p>Use the same steps as having your bridge connected directly to your PC as above. In effect this is basically the same configuration. As above use static IP wherever possible to ensure reliable use.</p>"},{"location":"Solar_Car_Racing/CAN_Ethernet_Bridge/Supported_Network_Setups.html#wired-via-router-with-dhcp-recommended","title":"Wired via Router with DHCP - RECOMMENDED","text":"<p>CAN Bus Bridge and PC connected via a wired network router (with a DHCP server)</p> <p>Allow the PC and Bridge to get their IP addresses via DHCP. If the bridge ends up with a strange IP address, press the reset button and let it try again. If the PC has a strange IP, make sure the PC network adapter is running with DHCP switched on, the go to a command prompt run the commands</p> <pre><code>ipconfig /release\nipconfig /renew\n</code></pre> <p>Finally check that you now have a valid IP address by running the command for your network adapter</p> <pre><code>ipconfig\n</code></pre> <p>Even in this setup we would recommend using a Static IP for the CAN Bus bridge. It\u2019s less important here that you use Static IP for the PC. </p> <p>Why the bridge only? Because Profinity needs to know the IP address of the Bridge for TCP mode and that is set in the profile. If the bridge changes IP addresses which can occur with DHCP over time, then Profinity will find it in UDP mode, but not TCP mode as the IP address in the profile will be wrong.</p> <p>This setup is exactly what we use when developing Profinity, it works reliably if setup right. Just note when setting a Static IP address for the bridge that the DHCP server will have a range of addresses that it uses for DHCP (check your WiFi router for the range) you would set the static IP of the bridge to be outside that range so that you do not end up with the DHCP server setting another device to have the same IP as your bridge.</p>"},{"location":"Solar_Car_Racing/CAN_Ethernet_Bridge/Supported_Network_Setups.html#over-wifi-with-dhcp-advanced","title":"Over WiFi with DHCP - ADVANCED","text":"<p>CAN Bus Bridge connected via a router with WiFi (and a DHCP server)</p> <p>The CAN Bus bridge does not directly support connecting data via WiFi and must be connected via cable to a WiFi router, but it is possible to connect Profinity via WiFi using the WiFi adapter on your PC or laptop. If we are using our bridges in a mobile setup (for example motor sport), this is the setup we use.</p> <p>Be aware however that this configuration has various potential ways it can cause you grief.</p> <p>The behaviour of WiFi routers can vary wildly when it comes to broadcast UDP. Some will relay it, some will not. Some will relay on the ethernet cable side only and not on the WiFi side. Some will intermittently relay, creating a scenario where the bridge will appear to work intermittently.</p> <p>This is only a good setup if you have the right sort of WiFi equipment and your WiFi access point is setup to handle UDP Broadcasting reliably.</p> <p>Prohelion use Ubiquity and Juniper WiFi routers as these are commercial grade, highly configurable devices and are not particularly expensive. Everyday WiFi routers designed for home use, often do not have the necessary configuration options to get this setup working well.</p> <p>To test if your WiFi router works you can use approaches like those covered in this article or the bridge and Profinity.</p> <ol> <li>Plug in the CAN Bus bridge on the ethernet side of the router using a cable.</li> <li>Connect your PC to the WiFi point of the router</li> <li>Use Profinity with AutoDiscovery to connect to the router with a UDP connection</li> <li>Ensure that you get consistent UDP traffic from the CAN Bus bridge and no drop outs.</li> </ol> <p>If any of these steps don't work it is likely that your WiFi router is either not able to handle the UDP traffic in the manner required or is not configured to handle broadcast UDP in the right way.</p>"},{"location":"Solar_Car_Racing/CAN_Ethernet_Bridge/Supported_Network_Setups.html#tcp-via-router-or-wifi-advanced","title":"TCP via router or WiFi - ADVANCED","text":"<p>Direct TCP Connection using a router or WiFi</p> <p>It is possible to set up the CAN Bus Bridge to be on a different subnet to Profinity and use TCP connections to span subnets and connect to the bridge. </p> <p>This is particularly useful in scenarios where the CAN-Ethernet Bridge is remote to the PC, for example you are connecting to a remote site or over a VPN. Note, Profinity Cloud Connect could also be used in this scenario and may be a simpler solution.</p> <p>It is important to note that UDP will not work in this configuration as we are spanning subnets.   AutoDiscovery will also not work in this configuration as it is based on UDP heartbeats sent from the bridge and UDP is not going to work across subnets.</p> <p>If you know the IP address of your bridge and your network is setup correctly you can connect by manually setting the IP address of the CAN-Ethernet Bridge in Profinity and setting the connection mode to TCP. To check if this connection will work you can try pinging the bridge from the PC, if a Ping from the PC to the CAN-Ethernet Bridge works as expected, then TCP connection should be possible.</p> <p>Also check for green light on the TCP adapter in Profinity, this is also an indication that the connection is working and receiving data.</p>"},{"location":"Solar_Car_Racing/CAN_Ethernet_Bridge/Tritium_Tools_vs_Profinity.html","title":"Tritium Tools vs Prohelion Profinity","text":"<p>The Tritium tools and Profinity provide similar functionality, but work in fundamentally different ways, here are some important things to understand.</p>"},{"location":"Solar_Car_Racing/CAN_Ethernet_Bridge/Tritium_Tools_vs_Profinity.html#how-the-tools-are-similar","title":"How the tools are similar","text":"<p>Both the Tritium tools and Profinity use the same CAN Bus messages to achieve their outcomes, they both use UDP and TCP but the manner in which they use them is different. </p> <p>In many ways they are more similar than different, but some of the differences are important to understand if you are migrating from the Tritium tools to the Prohelion Profinity tools.</p>"},{"location":"Solar_Car_Racing/CAN_Ethernet_Bridge/Tritium_Tools_vs_Profinity.html#how-the-tritium-and-profinity-tools-are-different","title":"How the Tritium and Profinity tools are different","text":"<p>Profinity is a ground up rewrite of the Tritium tools and as such while the underlying functionality is similar, the technical code used to achieve the outcomes is completely different.</p> <p>The Tritium tools are in written in C++ and Prohelion tools in C#, the network libraries used to talk CAN Bus are also completely different. </p> <p>Even though the Prohelion libraries have a common heritage with some of the Tritium tools, they have been heavily modified for the use at Prohelion and little of the original code remains.</p> <p>There are also a couple of key ways in which the tools are completely different in their behaviours.</p>"},{"location":"Solar_Car_Racing/CAN_Ethernet_Bridge/Tritium_Tools_vs_Profinity.html#profinity-is-an-all-in-one-solution","title":"Profinity is an all in one solution","text":"<p>Tritiums uses multiple tools that operate independently. Why is this important? </p> <p>Say for example you are using the Tritium CAN Bus logger while updating your BMS. In the Tritium tools this is two different executables with two different network connections to the same device, running the Can Bridge Config tool as well, then you have a third connection. </p> <p>In Profinity, all the tools are sharing a single connection and running within a single executable. The different is subtle, but also has many flow on effects on how things operate, particularly around networking and the issues outlined in the next point.</p>"},{"location":"Solar_Car_Racing/CAN_Ethernet_Bridge/Tritium_Tools_vs_Profinity.html#tritium-tools-exclusively-lock-network-ports","title":"Tritium tools exclusively lock network ports","text":"<p>The Prohelion tools do no not. This means that it is often not possible to run multiple copies of the Tritium tools at once, but it is possible to run multiple copies of Profinity at once. If Profinity is running, a Tritium tool will often not work because it is trying to grab exclusive use of a port that is already in use. </p> <p>However, Profinity will generally run when a Tritium tool is already running as it is not concerned with exclusivity.</p>"},{"location":"Solar_Car_Racing/CAN_Ethernet_Bridge/Tritium_Tools_vs_Profinity.html#tritium-tools-have-the-concept-of-an-active-adapter","title":"Tritium tools have the concept of an \u2018Active Adapter\u2019","text":"<p>Profinity does not have active adapters, it uses all the active adapters configured in your current profile to operate.</p>"},{"location":"Solar_Car_Racing/CAN_Ethernet_Bridge/Tritium_Tools_vs_Profinity.html#the-tritium-tools-connect-to-one-pc-network-adapter","title":"The Tritium tools connect to one PC network adapter","text":"<p>Unfortunately, it's not always the right one. </p> <p>Ever used the Tritium tools and found that you just can\u2019t see data even though Profinity or WireShark can? </p> <p>The issue is usually that the Tritium tools connect to just one network adapter based on a OS level recommendation and if they select the wrong adapter then they will not see any traffic. </p> <p>For example if your CAN Bus traffic is coming in on Ethernet and the Tritium tools connect to your WiFi adapter, then they will not see any CAN Bus data. Profinity was written right from the start to try and address this issue and it does so in two ways.</p> <ol> <li>All UDP connections in Profinity connect to all Network Adapters until</li> <li>CAN Bus packets from the correct bridge are discovered. </li> </ol> <p>Through this discovery process the adapter is able to determine what Network adapter the traffic arrived from and hence is the correct one to talk to for that bridge. At which point it exclusively uses that adapter. </p> <p>All this occurs behind the scenes and is not visible to the user, but will usually occur very rapidly. By the time an adapter has been auto discovered this process has already occurred.</p>"},{"location":"Solar_Car_Racing/CAN_Ethernet_Bridge/Tritium_Tools_vs_Profinity.html#the-tritium-tools-focus-on-udp-primarily-and-use-tcp-when-they-must","title":"The Tritium tools focus on UDP primarily and use TCP when they must","text":"<p>Profinity treats both protocols as first class citizens and can use either interchangeably. The TCP performance of the Prohelion libraries is around 10x that of the Tritium C# libraries. While both protocols are treated as first class citizens, when doing updates we strongly recommend and in some cases insist on TCP as it is more reliable.</p> <p>Use Profinity wherever possible</p> <p>Profinity gets regular updates and has a lot of features designed to make your life easier and this whole experience of using the bridges a lot more reliable. The Tritium CAN Bus tools while not End of Life are functionally stabilised and unlikely to see further updates.</p>"},{"location":"Solar_Car_Racing/CAN_Ethernet_Bridge/Datasheet/index.html","title":"CAN-Ethernet Bridge Datasheet","text":"<p>This document describes the specifications, performance and properties of the Prohelion CAN\u2013Ethernet Bridge.</p> <p>For more details on communications, use, and software installation, please refer to the User's Manual document available on the Prohelion website.</p> <p>Operating the bridge beyond the limits specified in this document will result in the voiding of the bridge warranty.  Prohelion accepts no responsibility for events caused as a result of operating the bridge beyond the limits specified in this document. Note that the specifications in this document are subject to change at any time due to product improvement.</p> <p></p> CAN Ethernet Bridge - Ethernet Connector <p></p> CAN Ethernet Bridge - DB9 Connector"},{"location":"Solar_Car_Racing/CAN_Ethernet_Bridge/Datasheet/DB9_Connector.html","title":"DB9 Connector","text":"<p>The CAN bus and operating power for the bridge are connected through the male DB9 connector at one end of the bridge.  The pinout for this connector is shown below, as viewed when looking at the bridge, or when inserting crimps into the mating connector.</p> <p></p> DB9 Connector Diagram <p>The pinout for this connector follows the standard commonly used in industrial CAN Bus applications such as DeviceNET and CANOpen.</p> <p>The bridge does not contain any termination between the CAN H and CAN L lines.</p> <p>Pin 6 and Pin 3 (CAN Ground) are connected together internally to the bridge.</p> <p>The bridge must be supplied with DC power through the DB9 connector on Pin 9 (CAN Power), relative to CAN Ground.  </p> Supply Value Units Notes: <code>DC Supply Voltage Minimum:</code> 9 V Note <sup>1</sup> <code>DC Supply Voltage Maximum:</code> 30 V <code>DC Supply Voltage Nominal:</code> 13.8 V <code>Supply Current at Nominal Voltage:</code> 26 mA Note <sup>2</sup> <code>Supply Power Maximum:</code> 0.5 W Note <sup>3</sup> <code>Default CAN bit rate:</code> 500 kbit/sec <p>NOTES:</p> <ol> <li> <p>The CAN\u2013Ethernet bridge will operate successfully between these voltage limits.  Operation outside these voltages may damage the device.\u00a0\u21a9</p> </li> <li> <p>Since the CAN\u2013Ethernet bridge uses an internal DC/DC converter, power draw at the input remains approximately constant even as the supply voltage is changed, ie supply current will decrease with increasing supply voltage.\u00a0\u21a9</p> </li> <li> <p>Tested with CAN traffic at 20% bus utilisation running at 500kbps.  Higher data rates and utilisation will increase power consumption above this figure.\u00a0\u21a9</p> </li> </ol>"},{"location":"Solar_Car_Racing/CAN_Ethernet_Bridge/Datasheet/Ethernet.html","title":"Ethernet","text":"<p>The CAN\u2013Ethernet bridge provides a standard RJ-45 Ethernet jack, capable of operating at 10/100 Mbit/sec, with auto-crossover functionality.  It will operate either connected to a switch or hub, or directly connected to a PC for standalone applications.</p> <p>The bridge has two modes of IP address configuration:</p> <ul> <li> <p>Auto IP: The bridge tries to acquire an IP address from a DHCP server on startup.  If this fails, it reverts to the AutoConf range of IP addresses.  Thus the bridge will operate both in a standard network setup (with DHCP), or when connected directly to a PC (point-to-point) application (AutoConf).</p> </li> <li> <p>Static IP: The bridge uses its a static IP address which is configured through the bridge configuration tool. Use of the static IP address is recommended for point-to-point applications. The subnet mask of the bridge is automatically set to the default mask for the three classes of available IP ranges: A(255.0.0.0), B(255.255.0.0) and C(255.255.255.0)</p> </li> </ul> <p>By default, the bridge joins a multicast IP address at IP 239.255.60.60, and sends and receives UDP packets on port 4876.</p>"},{"location":"Solar_Car_Racing/CAN_Ethernet_Bridge/Datasheet/Mechanical.html","title":"Mechanical","text":"<p>The CAN\u2013Ethernet bridge is packaged in a black ABS plastic enclosure.  It is not environmentally sealed.</p> Value Units Notes: <code>Enclosure length:</code> 86 mm Note <sup>1</sup> <code>Enclosure width:</code> 43 mm <code>Enclosure height:</code> 24 mm <code>Device mass:</code> 45 g <code>Device IP Rating:</code> IP40 <p>NOTES:</p> <ol> <li> <p>Does not include mating connector dimensions at both ends of the box.\u00a0\u21a9</p> </li> </ol>"},{"location":"Solar_Car_Racing/CAN_Ethernet_Bridge/Ethernet_Interface/index.html","title":"CAN-Ethernet Bridge Ethernet Interface","text":"<p>This document describes the Ethernet interface to the Prohelion CAN-Ethernet bridge device.  This information is primarily aimed at advanced users who wish to communicate with the bridge using custom or 3<sup>rd</sup> party software.</p> <p>The bridge supports bi-directional CAN-Ethernet bridging using both UDP and TCP protocols.  UDP is the default protocol, and should be used for normal broadcast CAN packets.  TCP mode should be used when a reliable point-to-point connection is required between the bridge and a single network device, for example when exchanging a stream of data via the CAN-Ethernet network.  The bridge can only support a single TCP connection at any time.</p>"},{"location":"Solar_Car_Racing/CAN_Ethernet_Bridge/Ethernet_Interface/Bridge_Configuration.html","title":"Bridge Configuration","text":"<p>The bus number and CAN bitrate used by a bridge are user settable.  To set a parameter on a specific bridge, open a TCP connection and transmit a single packet with</p> <ul> <li>the S bit set in the flags bitfield,</li> <li>the length field set to 3 when setting bitrate, 8 when setting bus number,</li> <li>the upper two bits of the data field set to 10b,</li> <li>the remaining bits of the upper data byte set to 0x05 when setting the bitrate, or 0x0E when setting the bus number, and</li> <li>the following data bytes set to the desired parameter value, stored as an unsigned integer.  When setting the bus number, the full 7-byte bus identifier must be sent, consisting of either:<ul> <li>Protocol v1: the 52 bit protocol version with 4 bit bus number, or</li> <li>Protocol v2: the 40 bit protocol version with 16 bit bus number</li> </ul> </li> </ul> <p>as shown in Figure 2, see CAN-UDP Bridging. When setting the bitrate, the new rate in kbps should be sent as a two byte integer.</p>"},{"location":"Solar_Car_Racing/CAN_Ethernet_Bridge/Ethernet_Interface/Bridge_Heartbeat.html","title":"Bridge Heartbeat","text":"<p>In order to identify the presence of a CAN-Ethernet bridge on a network, the bridge sends periodic heartbeat datagrams over UDP.  These packets are identified by an active H bit in the flags bitfield, and an identifier of 0x000.  The contents of the data field of a heartbeat datagram is shown in figure 5.</p> <p></p> Figure 5: Heartbeat Data <p>The bitrate field is an unsigned 16-bit integer showing the current CAN bitrate of the bridge in kbps.</p> <p>The MAC field is a 48-byte value representing the MAC address of the bridge's Ethernet interface.</p> <p>Note that the heartbeat packets are always multicast via UDP, regardless of the identifier forwarding settings used in any existing TCP connection.</p>"},{"location":"Solar_Car_Racing/CAN_Ethernet_Bridge/Ethernet_Interface/CAN_TCP_Bridging.html","title":"CAN-TCP Bridging","text":"<p>When a higher level of reliability is required in the connection between a device and the CAN-Ethernet bridge, CAN packets can be communicated over a TCP/IP connection.  This connection should be made to the bridge on the same remote port as UDP communication occurs: 4876.  Data should then be sent to the bridge according to the structure shown in figure 4.  </p> <p>By setting the fwd identifier and fwd range fields (see below), it is possible to have the bridge use this TCP connection to forward on certain packets, rather than having them multicast via UDP.</p> <p></p> Figure 4: TCP Stream Structure <p>The fwd identifier represents the lowest CAN identifier that should be bridged from the physical CAN network and forwarded on via the TCP connection.</p> <p>The fwd range represents the size of the range of CAN identifiers that should be forwarded via TCP.  That is, the bridge will forward via TCP any packet with</p> <p>fwd identifier &lt;= packet CAN identifier &lt; ( fwd identifier + fwd range )</p> <p>The remaining fields in figure 4 are identical to those in figure 1, see CAN-UDP Bridging.  </p> <p>In effect, the TCP data stream consists of an initial TCP datagram with the forwarding information, followed by bus and client identifiers that are only sent once for the entire TCP stream. This initial information is followed by any number of CAN packets consisting of identifiers, flags, lengths and data which can be a part of the initial TCP datagram or any number of independent TCP datagrams afterwards.</p> <p>Just like with UDP bridging, multiple CAN packets are able to be bundled into a single TCP datagram, the only difference is that after the initial TCP datagram successive transmissions need only contain CAN packets.</p>"},{"location":"Solar_Car_Racing/CAN_Ethernet_Bridge/Ethernet_Interface/CAN_UDP_Bridging.html","title":"CAN-UDP Bridging","text":"<p>By default, CAN packets that are received by the bridge will be broadcast on the UDP group address/port, and data contained in UDP datagrams received by the bridge from this group address/port will be broadcast on the CAN network.</p> <p>The UDP group address is 239.255.60.60, and the port is 4876.  This port is assigned by the IANA and is not configurable.</p> <p>The UDP packet structure is shown in figure 1.  Unless otherwise noted, all values are transmitted in big-endian format.</p> <p></p> Figure 1: UDP Packet Structure <p>The bus identifier is a 56-bit value as shown in figure 2.  There are presently two protocol versions designated by the bus identifier. Version 1 identifiers allow 4 bits for the bus number (range 0-15), while Version 2 allows 16 bit bus numbers (range 0-65535).</p> <p>In protocol version 1, the first 52 bits encode the protocol version, and should read 0x5472697469756 in all packets.  The least significant 4 bits represent the bus number that the packet was transmitted on.</p> <p>In protocol version 2, the first 40 bits encode the protocol version and should read 0x547269FDD6 in all packets, with the least significant 16 bits representing the bus number. The bus number can be used to create separate virtual networks on the same Ethernet network, see Version Querying.</p> <p></p> Figure 2: Bus Identifier Structure - Version 1 (left) and Version 2 (right) <p>The client identifier is a 56-bit value that uniquely identifies the sender of the datagram.  Each device on the virtual CAN network should have a different client identifier; the CAN-Ethernet bridges use the MAC address of their Ethernet interface as their client id.  This is also the recommended setting for other devices to ensure uniqueness.</p> <p>The identifier represents the identifier of the packet on the physical CAN network.  The identifier is contained in the low 11 bits (29 in extended mode).</p> <p>The flags byte contains the bitfield shown in figure 3.</p> <p></p> Figure 3: Flags Bitfield <ul> <li> <p>H \u2013 Heartbeat / query response packet  Indicates that this datagram contains a message from the bridge itself, rather than a bridged CAN packet.  This will either be a bridge heartbeat packet, or a packet containing a response to a query request.</p> </li> <li> <p>S \u2013 Settings packet Indicates that this datagram contains a setting for the bridge itself, and should not be bridged on to the physical CAN network.</p> </li> <li> <p>R \u2013 RTR packet Indicates that the data contained in this datagram should be sent as an RTR packet on the physical CAN network.</p> </li> <li> <p>E \u2013 Extended id packet  Indicates that this packet should be sent with an extended CAN identifier.</p> </li> </ul> <p>The length byte indicates the length of the packet data, in bytes.  This length should not exceed eight bytes.</p> <p>The data section contains the data contained in the physical CAN packet.  If the length byte indicates less than 8 bytes of data, the remaining bytes of the data section should be zero.</p> <p>Multiple CAN packets are able to be bundled into a single UDP datagram as shown in figure 1, this circumvents the need to repeatedly send the same bus and client identifier along with each CAN packet. It is important to note that unlike CAN-TCP bridging of multiple CAN packets outlined in section 4, each new UDP datagram must start with the bus and client identifier.</p>"},{"location":"Solar_Car_Racing/CAN_Ethernet_Bridge/Ethernet_Interface/Version_Querying.html","title":"Version Querying","text":"<p>The hardware and firmware version of a given bridge can be queried via the Ethernet interface.  To query a given bridge, open a TCP connection and transmit a single packet with:</p> <ul> <li>the S bit set in the flags bitfield,</li> <li>the length field set to 8,</li> <li>the upper two bits of the data field set to 00b,</li> <li>the remaining bits of the upper data byte set to 0x16, and</li> <li>the remaining data bytes set to zero.</li> </ul> <p>Upon receipt of this packet, the bridge will respond with a UDP packet with:</p> <ul> <li>the H bit set in the flags bitfield,</li> <li>the length field set to 8,</li> <li>the upper two bits of the data field set to 01b,</li> <li>the remaining bits of the upper data byte set to 0x16, and</li> <li>the remaining data bytes containing version information as shown in figure 6, with the HW field containing the hardware version, the FW field the firmware version multiplied by ten, and the build number field the firmware build number.  All fields are little-ending unsigned integers.</li> </ul> <p></p> Figure 6: Version Information"},{"location":"Solar_Car_Racing/CAN_Ethernet_Bridge/User_Manual/index.html","title":"CAN-Ethernet Bridge User Manual","text":"<p>This document describes the usage of the Prohelion CAN\u2013Ethernet bridge, including the accompanying configuration software.</p> <p></p> CAN-Ethernet Bridge <p>The Prohelion CAN\u2013Ethernet bridge allows easy access to a CAN bus from a PC. No installation is required, so the device can be used with any PC with an Ethernet interface. Furthermore, an already present Ethernet network can be used to route CAN messages: with a bridge connected to a router on the network, all PCs attached to that router will become part of the virtual CAN bus. It is also possible to combine multiple physically separate CAN buses into one virtual bus, or use them as separate virtual buses on the same network.</p>"},{"location":"Solar_Car_Racing/CAN_Ethernet_Bridge/User_Manual/index.html#can-bridge-usage","title":"CAN Bridge Usage","text":"<p>The CAN\u2013Ethernet bridge is fully plug and play. When the bridge is connected to an Ethernet network it will acquire an IP address, either via DHCP or Auto IP, or by using a previously configured static IP. </p> <p>Once an address has been assigned the bridge will begin operating.</p>"},{"location":"Solar_Car_Racing/CAN_Ethernet_Bridge/User_Manual/index.html#user-interface","title":"User Interface","text":"<p>The CAN\u2013Ethernet bridge user interface consists of a single push-button and green LED in the front decal.  </p> <p>Holding down the button for more than 5 seconds when the bridge is running will reset the bridge configuration back to factory default settings, and this event is shown by illuminating the front-panel LED briefly.</p> <p>Holding down the button for at least 5 seconds while powering up the bridge will run the bootloader, allowing the bridge firmware to be updated.</p>"},{"location":"Solar_Car_Racing/CAN_Ethernet_Bridge/User_Manual/index.html#can-bridge-hardware","title":"CAN Bridge Hardware","text":"<p>The CAN-Ethernet bridge uses the standard CAN bus pinout on the male DB9 connector. Refer to the datasheet for the specifications on this connector.  </p>"},{"location":"Solar_Car_Racing/CAN_Ethernet_Bridge/User_Manual/index.html#protocols-and-security-considerations","title":"Protocols and Security Considerations:","text":"<p>By default, the bridge transmits CAN message over Ethernet via multicast UDP/IP packets. This protocol provides the best match with the broadcast architecture of physical CAN networks, whereby a packet sent by one node can be received by all other nodes connected to the network.  </p> <p>However, UDP is an unreliable protocol, which means that messages can get lost and the order of messages can change.  In general, given the relatively high bandwidth of most modern network connections, such transmission errors are rare; however, in certain applications when lossless communications are required (e.g. when transmitting data streams over CAN) the unreliable nature of UDP may not be acceptable.  In these situations, it is possible for a bi-directional TCP/IP connection to be made to a particular CAN\u2013Ethernet bridge, thereby ensuring the reliability of the virtual section of the CAN\u2013Ethernet network.  The downside of using this TCP/IP link is that by definition it is a point-to-point connection, and any data sent or received will not be visible to other nodes on the virtual network.  Also, each bridge supports only a single simultaneous TCP/IP connection.</p> <p>Both multicast UDP and TCP are insecure protocols.  If the appropriate steps are not taken in the configuration of the network that a bridge is attached to, this could result in a malicious party gaining access to devices connected to the physical CAN network. Therefore, it is important that you configure your network properly before connecting any device to your CAN bus. The most secure configuration procedures are:</p> <p>1.  Disconnect from the Internet. Ensure that there is no connection between any PC in your network and the Internet.</p> <p>2.  Configure your router. In most offices only one router has a connection to the Internet and all other traffic goes through this router. If this router is configured to block all traffic on the port used by the bridge  (default 4876), your CAN network will be separated from the Internet.</p>"},{"location":"Solar_Car_Racing/CAN_Ethernet_Bridge/User_Manual/Bridge_Configuration.html","title":"CAN Bridge Configuration","text":"<p>The CAN\u2013Ethernet bridge has three configurable settings:</p> <ul> <li> <p>Static IP: This setting determines whether the bridge should use a static IP address and also allows for the address to be set. This is useful for point-to-point connections where no DHCP server exists on the network. </p> </li> <li> <p>Bus Number: This is the setting that allows you to have multiple virtual CAN busses running simultaneously, with different CAN bridges on the same Ethernet segment</p> </li> <li> <p>CAN Bit rate: This is the Bit rate that the bridge should use to communicate on it's physical CAN bus.</p> </li> </ul> <p>These settings can be changed using the CAN\u2013Ethernet Bridge Configuration Tool described below.</p>"},{"location":"Solar_Car_Racing/CAN_Ethernet_Bridge/User_Manual/Bridge_Configuration.html#can-ethernet-bridge-configuration-software","title":"CAN-Ethernet Bridge Configuration Software","text":"<p>CAN-Ethernet Bridge Configuration is now included in Profinity</p> <p>Profinity is now the recommended approach for configuring your CAN-Ethernet Bridge, to do so add your bridge to a Profile then right mouse click configure it.  This documentation is  for client still using the old configuration software, but we would recommend upgrading if possible.</p> <p>The CAN\u2013Ethernet Bridge Configuration application provides three functions.  First, it enables users to modify the Bridge Configuration of the bridges connected to the network.  Secondly, it allows users to view the bridges connected to their network and select the bridge corresponding to the virtual network that they wish to use.  Third, it allows updating the bridge firmware.</p> <p>Figure 5 shows a screenshot of the configuration tool.  </p> <p></p> Figure 5: CAN-Ethernet Bridge Configuration Tool <p>The listbox on the left shows detected CAN\u2013Ethernet bridges. Details about the selected bridge are shown on the right. These details are:</p> <ul> <li> <p>Bridge MAC: The MAC address of the bridge.  This is unique for each bridge, and is fixed in the factory and cannot be changed. </p> </li> <li> <p>Bridge IP in use:  The IP address assigned to the bridge by your DHCP server, AutoConf, or manually (if a Static IP is set).  This is the IP address that TCP/IP connections will be made to.  If this IP address is not on the same subnet as the IP address of the local machine, TCP/IP connections will not be available and programs that rely on them will not work.</p> </li> <li> <p>IP of local interface: The IP address on the local machine assigned to the interface connected to the network on which the bridge resides.  This information is useful for identifying bridges when the PC has multiple network interfaces (eg, wired, wireless).  This IP address must be on the same subnet as the bridge in order for TCP/IP connections to be available.</p> </li> <li> <p>Bridge Static IP: The saved static IP address in the Bridge.  This is editable when using a Static IP, which is enabled by setting the adjacent check-box.  Upon storing the setting the bridge will restart using either the Static IP (when enabled) or an IP attained from the DHCP server (when disabled).  Note: the Static IP subnet is not configurable and is automatically set based on the class of the network (A, B or C).  The value is set in the bridge by pressing Store.</p> </li> <li> <p>Protocol Version: Ethernet communications protocol version.</p> </li> <li> <p>Bus Number:  The virtual CAN network that this bridge should connect to. This may be set by modifying the value in the edit box and pressing Store.</p> </li> <li> <p>Bit rate:  The bit rate of the CAN network that the bridge is connected to. This rate may be set by either selecting a value in the drop-down list, or directly entering the value in the edit box and pressing Store.</p> </li> <li> <p>Firmware Version: Bridge firmware version.  This can be obtained from the bridge by pressing the Query button.</p> </li> </ul> <p>When the Bridge Configuration is changed, the list of bridges will be refreshed.  This may take a few seconds. When a bridge is disconnected from the network, it is automatically removed from the list.</p> <p>The button labelled Set as active is used to register the selected bridge and virtual bus for use by all Prohelion programs on the machine.  Active bridges are identified by the local interface they are connected through (i.e. the local IP address) and their virtual bus number.  Thus, it is possible for multiple bridges to be active, e.g. in the network topology shown in Figure 2.  A bridge must be set as active when it is first used on a given PC, and again whenever the local IP address of the machine changes.  The currently active bridge(s) are labelled as ACTIVE in the list.</p> <p>It should be noted that the configuration tool uses a TCP/IP connection to modify the port, bit rate and Static IP settings on a bridge.  Therefore, if the bridge is on a different subnet as the local machine these settings cannot be modified, and this network arrangement is therefore not recommended. It is highly recommended to configure bridges on a LAN with a DHCP server or Static IP configured on the same subnet.</p>"},{"location":"Solar_Car_Racing/CAN_Ethernet_Bridge/User_Manual/Bridge_Configuration.html#can-ethernet-bridge-firmware-bootload-wizard","title":"CAN-Ethernet Bridge Firmware Bootload Wizard","text":"<p>The CAN\u2013Ethernet Bridge Loader wizard provides the ability to load updated firmware images into the bridge, to provide new features and functionality.   It is access by selecting the bridge you wish to load in the CanBridgeConfig utility, then clicking the Load Firmware button</p> <p>Figure 6 shows a screenshot of the loader tool.  </p> <p></p> Figure 6:CAN-Ethernet Bridge Loader Tool <p>To use the tool, complete the following steps:</p> <p>1. Get the latest firmware image file (.teb) from Prohelion (contact support)</p> <p>2. Run CanBridgeConfig, select the bridge to load, and click Load Firmware</p> <p>3. Browse to where the image file is saved and select the file</p> <p>4. Check that the temporary IP address that will be assigned is sensible. In most cases the utility will choose a valid address on the same subnet, and the default will not require changing</p> <p>5. Press the Load button, and the application will begin waiting for a bridge</p> <p>6. Hold down the button on the bridge front panel</p> <p>7. Apply or cycle power to the bridge while continuing to hold the button, until the loader utility finds the bridge.  The button can now be released.</p> <p>8. The loader application will load in the new firmware</p> <p>9. Once the load is complete, press and hold the button on the bridge until the status LED flashes briefly, in order to load factory default settings</p>"},{"location":"Solar_Car_Racing/CAN_Ethernet_Bridge/User_Manual/Network_Topologies.html","title":"Network Topologies","text":"<p>The most basic network is a single hardware bridge on the CAN bus with multiple applications connected to the UDP part of the bus, as shown in Figure 1.</p> <p></p> Figure 1: Setup With Hardware Bridge <p>When making more advanced networks, the easiest setup is using multiple CAN buses on the same network, as shown in Figure 2. In this case, messages sent on one CAN bus, will also be received by the devices listening on the other bus. In order to create this setup, both bridges should be configured with the same virtual bus, which is the default configuration. When a different virtual bus is given to the two bridges of Figure 2, the CAN buses will have no interaction, so two simple networks as shown in Figure 1 are created.</p> <p></p> Figure 2: Setup With Multiple CAN Buses <p>Another advanced configuration is using multiple bridges on one CAN bus, as shown in Figure 3. This network looks simple and can be quite useful when multiple persons are collecting information from the CAN bus, but it is very easy to create a cyclic network, which is not desired. This often happens because the two Ethernet parts shown in Figure 3 are actually connected, resulting in only one Ethernet part as shown in Figure 4. Having a cyclic network will cause problems, as explained below.</p> <p></p> Figure 3: Setup With Multiple Bridges on one CAN Bus <p>The problem with a cyclic network as shown in Figure 4 is that any message bridged by bridge A via UDP will be bridged back to the CAN bus by bridge B, to be bridged by A again. Therefore, any message will be resent infinitely and soon the CAN bus will be so loaded that most messages get lost. </p> <p>Watch out for Cyclic CAN Bus Networks</p> <p>Creating a cycle in your network causes that network to become unusable and should be avoided.</p> <p></p> Figure 4: Cyclic Setup With Multiple Bridges on one CAN Bus"},{"location":"Solar_Car_Racing/EV_Driver_Controller/index.html","title":"Prohelion Electric Vehicle Driver Controls","text":"<ul> <li> <p> User Manual</p> <p>User Manual for the Prohelion Driver Control</p> <p> Getting started</p> </li> <li> <p> Communications Protocol</p> <p>Information on the messages sent by the Driver Control</p> <p> Reference</p> </li> <li> <p> Profinity</p> <p>Our battery and CAN Bus management software solution</p> <p> Supporting Software</p> </li> </ul>"},{"location":"Solar_Car_Racing/EV_Driver_Controller/Communications_Protocol/index.html","title":"EV Driver Controls CAN Bus Communications Protocol Specification","text":"<p>This document describes the protocol used to communicate over a CAN bus connection to and from the Prohelion driver controls module.</p>"},{"location":"Solar_Car_Racing/EV_Driver_Controller/Communications_Protocol/index.html#can-configuration","title":"CAN Configuration","text":""},{"location":"Solar_Car_Racing/EV_Driver_Controller/Communications_Protocol/index.html#hardware","title":"Hardware","text":"<p>The CAN hardware interface used is compatible with the CAN 2.0B standard.  The supported bit rates (bits per second) are 1 Mbps (default), 500 kbps, 250 kbps, 125 kbps, 100 kbps and 50 kbps.</p>"},{"location":"Solar_Car_Racing/EV_Driver_Controller/Communications_Protocol/index.html#software","title":"Software","text":"<p>The CAN protocol uses data frames for most communication.  Remote frames are also enabled.  The identifier field uses the standard frame definition length of 11 bits. All measurement data is transmitted using IEEE single-precision 32-bit format (IEEE 754) with most significant byte (MSB) sent first.</p> <p></p> Figure 1. CAN Data frame"},{"location":"Solar_Car_Racing/EV_Driver_Controller/Communications_Protocol/index.html#identifier","title":"Identifier","text":"<p>The identifier field has been split into two sections for Prohelion devices. Bits 10-5 contain the device identifier and bits 4-0 contains the message identifier associated with that device, as shown in Figure 2. This means that there is a maximum of 63 Prohelion device that can be on the CAN bus at any one time. The 64th location is reserved for the bootloader. Each Prohelion device can have 31 different types of messages. The first message identifier is used by the device identification message. Two device slots could be used if more messages per device were required, however this has not been required yet.</p> <p></p> Figure 2. CAN Device Identifier Address Format"},{"location":"Solar_Car_Racing/EV_Driver_Controller/Communications_Protocol/index.html#data-field","title":"Data Field","text":"<p>The data field in all frames is fixed at 8 bytes (64 bits) and two IEEE 754 32-bit floating point variables as shown in Figure 3.  The data field is sent and expected to be received least significant bite first. This allows a direct overlay of a float[2] array and char[8] array on a little endian processor, such as, an Intel x86 (or clone) or the TI MSP430 in the driver controls.</p> <p></p> Figure 3. Format of the data field in a data frame"},{"location":"Solar_Car_Racing/EV_Driver_Controller/Communications_Protocol/index.html#units","title":"Units","text":"<p>Please note that variables described in the following packets with units of percent \u201c%\u201d should be sent with a minimum floating-point value of 0.0 and a maximum value of 1.0.  Do not send 100.0 as the maximum value.</p>"},{"location":"Solar_Car_Racing/EV_Driver_Controller/Communications_Protocol/index.html#broadcast-frames","title":"Broadcast Frames","text":"<p>These are data frames broadcast from the driver controls to any listening motor controller. These commands contain desired set points for the control software to operate the controller.  The commands are sent as required, however there is a maximum permissible delay between consecutive Motor Drive commands to prevent a timeout from occurring in the motor controller.</p> <p>The driver controls also provide a convenient interface for a variety of switches and push buttons, that are not used directly by the motor controller.  For example, another relay output module on the CAN bus may listen for the Switch Position frame and turn the indicator (blinker) lights on and off as appropriate.</p>"},{"location":"Solar_Car_Racing/EV_Driver_Controller/Communications_Protocol/index.html#remote-frames","title":"Remote Frames","text":"<p>All frame types sent by the driver controls may also be requested on demand by using the CAN bus remote frame transmit (RTR) mechanism.  This is accomplished by the remote device transmitting a frame containing the address (ID) of the frame request, with the RTR bit set.  The driver controls will reply with the requested packet after a short delay.  This mechanism is independent of the timer-based output of control frames from the driver controls.</p>"},{"location":"Solar_Car_Racing/EV_Driver_Controller/Communications_Protocol/Broadcast_Messages.html","title":"Broadcast Messages","text":""},{"location":"Solar_Car_Racing/EV_Driver_Controller/Communications_Protocol/Broadcast_Messages.html#identification-information","title":"Identification Information","text":"<p>EXAMPLE:</p> ID: Driver Controls Base Address ... - Interval ... <code>Variable</code> Bits Type/Units* Description <p><sup>* Either Type, ie. Uint32 or Units, ie. m/s</sup></p> ID: Driver Controls Base Address + 00 - Interval 1 second <code>Serial Number</code> 63..32 Uint32 Device serial number, allocated at manufacture. <code>Prohelion ID</code> 31..0 char[4] \u201cTRIb\u201d stored as a string. msg[0] = 'T', msg[1] = 'R'... <p>The periodic broadcast of this message cannot be disabled. It is needed to help find the driver controls on the network if the base address is lost or mis-configured by the user.</p>"},{"location":"Solar_Car_Racing/EV_Driver_Controller/Communications_Protocol/Broadcast_Messages.html#drive-commands","title":"Drive Commands","text":""},{"location":"Solar_Car_Racing/EV_Driver_Controller/Communications_Protocol/Broadcast_Messages.html#motor-drive-command","title":"Motor Drive Command","text":"ID: Driver Controls Base Address + 01 - Interval 100ms <code>Motor Current</code> 63..32 % Desired motor current set point as a percentage of maximum current setting. <code>Motor Velocity</code> 31..0 m/s Desired motor velocity set point in metres/second. <p>The WaveSculptor motor controller must receive a Motor Drive Command frame at least once every 250ms.  If this does not occur, the controller will assume that communications have failed and will halt all motor control functions, placing the system into neutral.</p>"},{"location":"Solar_Car_Racing/EV_Driver_Controller/Communications_Protocol/Broadcast_Messages.html#motor-power-command","title":"Motor Power Command","text":"ID: Driver Controls Base Address + 02 - Interval 100ms or as needed <code>Bus Current</code> 63..32 % Desired set point of current drawn from the bus by the controller as a percentage of absolute bus current limit. <code>Reserved</code> 31..0 - -"},{"location":"Solar_Car_Racing/EV_Driver_Controller/Communications_Protocol/Broadcast_Messages.html#reset-command","title":"Reset Command","text":"ID: Driver Controls Base Address + 03 - Interval no fixed interval, not used during normal operation <code>Unused</code> 63..32 - - <code>Unused</code> 31..0 - - <p>Send a command from this address to reset the WaveSculptor.</p>"},{"location":"Solar_Car_Racing/EV_Driver_Controller/Communications_Protocol/Broadcast_Messages.html#switch-commands","title":"Switch Commands","text":""},{"location":"Solar_Car_Racing/EV_Driver_Controller/Communications_Protocol/Broadcast_Messages.html#switch-position-activity","title":"Switch position / activity","text":"ID: Driver Controls Base Address + 05 - Interval 100ms <code>Switch Position</code> 63..32 Uint32 Current position of the switch inputs on the driver controls module DB37 connector: Bits Parameter 31..18  17  16  15  14  13  12  11  10  9  8  7  6  5  4  3  2  1  0 Unused  Right Indicator output (90 per minute)  Left indicator output (90 per minute ) Unused  Onboard (internal) debug button  Encoder 1 pushbutton  Encoder 2 pushbutton  Right indicator switch  Left indicator switch  Hazards switch  Horn switch  Ignition \u2013 Accessory position  Ignition \u2013 ON (Run) position  Direction (0 = Forward, 1 = Reverse)  Brake 1 switch  Brake 2 switch  Lights \u2013 Side / Running lights switch  Lights \u2013 Low Beam switch  Lights \u2013 High Beam switch <code>Switch Activity</code> 31..0 Uint32 Shows if the switch has changed state since the last time this CAN frame was sent  1 = switch has changed  0 = no change  Bit positions are identical to the Switch Position bitfield shown above."},{"location":"Solar_Car_Racing/EV_Driver_Controller/Communications_Protocol/DBC.html","title":"Prohelion Driver Control DBC File","text":"<p>The following DBC file can be used to decode the CAN Packets transmitted by this device.</p> <pre><code>VERSION \"\"\n\n\nNS_ : \n    NS_DESC_\n    CM_\n    BA_DEF_\n    BA_\n    VAL_\n    CAT_DEF_\n    CAT_\n    FILTER\n    BA_DEF_DEF_\n    EV_DATA_\n    ENVVAR_DATA_\n    SGTYPE_\n    SGTYPE_VAL_\n    BA_DEF_SGTYPE_\n    BA_SGTYPE_\n    SIG_TYPE_REF_\n    VAL_TABLE_\n    SIG_GROUP_\n    SIG_VALTYPE_\n    SIGTYPE_VALTYPE_\n    BO_TX_BU_\n    BA_DEF_REL_\n    BA_REL_\n    BA_DEF_DEF_REL_\n    BU_SG_REL_\n    BU_EV_REL_\n    BU_BO_REL_\n    SG_MUL_VAL_\n\nBS_:\n\nBU_: DriverControl\n\n\nBO_ 1280 IDInfo: 8 DriverControl\n SG_ TritiumID : 0|32@1+ (1,0) [0|0] \"\" Vector__XXX\n SG_ SerialNumber : 32|32@1+ (1,0) [0|0] \"\" Vector__XXX\n\nBO_ 1281 Drive: 8 DriverControl\n SG_ SetpointMotorVelocity : 0|32@1- (1,0) [0|0] \"rpm\" Vector__XXX\n SG_ SetpointMotorCurrent : 32|32@1- (100,0) [0|0] \"%\" Vector__XXX\n\nBO_ 1282 Power: 8 DriverControl\n SG_ Reserved : 0|32@1- (1,0) [0|0] \"\" Vector__XXX\n SG_ SetpointBusCurrent : 32|32@1- (100,0) [0|0] \"%\" Vector__XXX\n\nBO_ 1283 Reset: 8 DriverControl\n SG_ Unused : 0|32@1- (1,0) [0|0] \"\" Vector__XXX\n SG_ Unused : 32|32@1- (1,0) [0|0] \"\" Vector__XXX\n\nBO_ 1285 Switch: 8 DriverControl\n SG_ IgnitionRun : 5|1@1+ (1,0) [0|0] \"Selected\" Vector__XXX\n SG_ Flags : 48|8@1+ (1,0) [0|0] \"\" Vector__XXX\n SG_ State : 56|8@1+ (1,0) [0|0] \"\" Vector__XXX\n SG_ Brake : 7|1@1+ (1,0) [0|0] \"On / Off\" Vector__XXX\n SG_ ModeRegen : 2|1@1+ (1,0) [0|0] \"Selected\" Vector__XXX\n SG_ ChargePort : 8|1@1+ (1,0) [0|0] \"Connected / Disconnected\" Vector__XXX\n SG_ IgnitionStart : 6|1@1+ (1,0) [0|0] \"Selected\" Vector__XXX\n SG_ IgnitionAccesories : 4|1@1+ (1,0) [0|0] \"Selected\" Vector__XXX\n SG_ ModeDrive : 3|1@1+ (1,0) [0|0] \"Selected\" Vector__XXX\n SG_ ModeNetural : 1|1@1+ (1,0) [0|0] \"Selected\" Vector__XXX\n SG_ ModeReverse : 0|1@1+ (1,0) [0|0] \"Selected\" Vector__XXX\n\n\n\nCM_ SG_ 1280 TritiumID \"Device identifier. 0x00004003\";\nCM_ SG_ 1280 SerialNumber \"Device serial number, allocated at manufacture.\";\nCM_ SG_ 1281 SetpointMotorVelocity \"Desired motor velocity set point in rpm\";\nCM_ SG_ 1281 SetpointMotorCurrent \"Desired motor current set point as a percentage of maximum current setting.\";\nCM_ SG_ 1282 SetpointBusCurrent \"Desired set point of current drawn from the bus by the controller  as a percentage of absolute bus current limit.\";\nCM_ SG_ 1285 IgnitionRun \"Ignition key is in the run position\";\nCM_ SG_ 1285 Flags \"Flags currently being reported by the Driver Controller, check the code for more details.\";\nCM_ SG_ 1285 State \"Latest state as being reported by the Driver Controller, check the code for more detail on valid states\";\nCM_ SG_ 1285 Brake \"Brake pedal is currently being pressed if flag is set (1 set / 0 unset)\";\nCM_ SG_ 1285 ModeRegen \"Car is regerating power from the motor if set (1 set / 0 unset)\";\nCM_ SG_ 1285 ChargePort \"Charge point is currently open if set (1 set / 0 unset), port must be closed for car to drive.\";\nCM_ SG_ 1285 IgnitionStart \"Ignition key is in the start position\";\nCM_ SG_ 1285 IgnitionAccesories \"Ignition key is in the accesories position\";\nCM_ SG_ 1285 ModeDrive \"Car is in drive mode if set (1 set / 0 unset)\";\nCM_ SG_ 1285 ModeNetural \"Car is in netural if set (1 set / 0 unset)\";\nCM_ SG_ 1285 ModeReverse \"Car is in reverse if set (1 set / 0 unset)\";\nBA_DEF_ BO_  \"GenMsgCycleTime\" INT 2 50000;\nBA_DEF_ BU_  \"GenNodAutoGenSnd\" ENUM  \"No\",\"Yes\";\nBA_DEF_ BU_  \"GenNodAutoGenDsp\" ENUM  \"No\",\"Yes\";\nBA_DEF_  \"GenEnvVarEndingDsp\" STRING ;\nBA_DEF_  \"GenEnvVarEndingSnd\" STRING ;\nBA_DEF_  \"GenEnvVarPrefix\" STRING ;\nBA_DEF_DEF_  \"GenMsgCycleTime\" 100;\nBA_DEF_DEF_  \"GenNodAutoGenSnd\" \"Yes\";\nBA_DEF_DEF_  \"GenNodAutoGenDsp\" \"Yes\";\nBA_DEF_DEF_  \"GenEnvVarEndingDsp\" \"Dsp\";\nBA_DEF_DEF_  \"GenEnvVarEndingSnd\" \"Snd\";\nBA_DEF_DEF_  \"GenEnvVarPrefix\" \"Env\";\nBA_ \"GenMsgCycleTime\" BO_ 1280 1000;\nBA_ \"GenMsgCycleTime\" BO_ 1281 200;\nBA_ \"GenMsgCycleTime\" BO_ 1282 200;\nBA_ \"GenMsgCycleTime\" BO_ 1283 200;\nBA_ \"GenMsgCycleTime\" BO_ 1285 200;\nSIG_VALTYPE_ 1281 SetpointMotorVelocity : 1;\nSIG_VALTYPE_ 1281 SetpointMotorCurrent : 1;\nSIG_VALTYPE_ 1282 Reserved : 1;\nSIG_VALTYPE_ 1282 SetpointBusCurrent : 1;\nSIG_VALTYPE_ 1283 Unused : 1;\n</code></pre>"},{"location":"Solar_Car_Racing/EV_Driver_Controller/Communications_Protocol/Operation.html","title":"Operation","text":""},{"location":"Solar_Car_Racing/EV_Driver_Controller/Communications_Protocol/Operation.html#torque-control-mode","title":"Torque Control Mode","text":"<p>This control mode is analogous to the way a normal vehicle is operated, with the accelerator (gas) pedal controlling the motor\u2019s torque output.  To drive in this mode, the driver controls should send a Motor Drive Command frame at least once every 200ms containing:</p> <ul> <li>Desired motor current setting in percent, corresponding to pedal position</li> <li>Maximum velocity (eg 100m/s)</li> </ul> <p>With these settings, the motor controller will never be able to reach the setpoint velocity, so the operation of the vehicle will be limited by the motor current, which is proportional to torque.</p>"},{"location":"Solar_Car_Racing/EV_Driver_Controller/Communications_Protocol/Operation.html#speed-control-mode","title":"Speed Control Mode","text":"<p>This control mode is analogous to cruise control in a normal vehicle.  To drive in this mode, the driver controls should send a Motor Drive Command frame at least once every 200ms containing:</p> <ul> <li>Maximum motor current (100%)</li> <li>Desired vehicle velocity in metres per second</li> </ul> <p>With these settings, the motor controller will use the maximum available current to reach the desired setpoint velocity.</p> <p>The usual method of setting the target speed would be to monitor \u201cVelocity Measurement\u201d frames from the WaveSculptor, and when the driver wishes to set the target velocity (using some combination of input switches) then the driver controls should begin to transmit the last known velocity measurement as the target velocity.  </p> <p>Of course, any pre-programmed speed could also be used, however care must be taken when engaging speed control mode under these circumstances, as the vehicle will use the maximum allowable torque to reach the target velocity setpoint as fast as possible.</p>"},{"location":"Solar_Car_Racing/EV_Driver_Controller/Communications_Protocol/Operation.html#combination-control-modes","title":"Combination Control Modes","text":"<p>Any combination of the above two modes can be implemented, as desired by the user. For example, in speed control mode, while setting the target vehicle velocity, a motor current setting of 50% could be sent, resulting in the motor controller only using half of it\u2019s torque capability to try and reach the velocity setpoint.  </p>"},{"location":"Solar_Car_Racing/EV_Driver_Controller/Communications_Protocol/Operation.html#power-control","title":"Power Control","text":"<p>The driver controls can also dynamically limit the maximum current that can be drawn by the WaveSculptor from the vehicle\u2019s power bus (battery).  This may be useful in some applications to minimise high-current events when operating with a discharged main battery pack, or as part of an overall vehicle control strategy during racing.</p> <p>To limit the power, the driver controls should send a Motor Power Command frame, containing the desired bus current as a percentage of maximum.  This frame may be sent as often as desired, however please note that a Motor Drive Command frame must still be sent at least once every 200ms to prevent the WaveSculptor from shutting down.</p>"},{"location":"Solar_Car_Racing/EV_Driver_Controller/User_Manual/index.html","title":"EV Driver Controls User Manual","text":"<p>This document describes the interface, installation, and usage requirements for the Prohelion EV Driver Controls product.  It also provides information on programming the device to implement custom functionality.</p> <p>The EV Driver Controls provide an easy way to control a Prohelion WaveSculptor motor controller.  The driver controls come programmed from the factory configured with sensible default values that will work in a plug-and-play manner with a motor controller.</p> <p>The EV Driver Controls provide analog and digital inputs, used to generate commands to the motor controller.  It also provides both analog and digital outputs to drive dashboard gauges and error and status LEDs.</p> <p>The microcontroller firmware for the device (written in 'C') is available on the Prohelion website under an open-source BSD license, as are the hardware schematics and component overlays.</p>"},{"location":"Solar_Car_Racing/EV_Driver_Controller/User_Manual/index.html#layout","title":"Layout","text":"<p>The following illustration shows the connections and indicators on the front panel of the EV Driver Controls.  A CAN bus connection, 12V in and out, and two status LEDs are present.</p> <p></p> EV Driver Controls Physical Layout <p>The rear panel contains a single DB37 connector, connecting all the analog and digital I/O connections required to drive a vehicle.</p>"},{"location":"Solar_Car_Racing/EV_Driver_Controller/User_Manual/CAN_Bus.html","title":"CAN Bus","text":"<p>The CAN bus is structured as a linear network, with short stubs branching from 'T' connectors on the main bus backbone to each device.  The CAN bus data lines must be terminated at each end of the main bus with 120 ohm resistors between the CAN-H and CAN-L signals.</p> <p>In the range of Prohelion EV products, including the WaveSculptor 200, EV Driver Controls, and BMS Pack Master, the CAN connections are implemented with an 'in' and an 'out' connector, therefore placing the 'T' on the device, resulting in a very short fixed-length stub on the circuit board of each device.  This is ideal from a signal integrity and network performance point of view.</p> <p></p> CAN Bus Topology <p>The WaveSculptor motor controller uses the CAN bus to receive commands and transmit telemetry, as well as to provide low-voltage DC power to operate the controller electronics.</p> <p>Therefore, a basic system consists of three major components:</p> <ol> <li>WaveSculptor motor controller</li> <li>Driver controls interface to pedals, switches &amp; gauges</li> <li>Power supply (nominally 12V DC) to operate the system</li> </ol> <p>Other components can also be added to the network. Items typically found in an electric vehicle would include: 4.  LCD and other driver information displays 5.  Battery management system 6.  Multiple motor controllers 7.  Datalogging</p>"},{"location":"Solar_Car_Racing/EV_Driver_Controller/User_Manual/CAN_Bus.html#can-wiring","title":"CAN Wiring","text":"<p>The CAN data lines (CAN-H and CAN-L) must be implemented with twisted-pair wire for proper data integrity.  The wire should have a characteristic impedance of 120 ohms. </p> <p>Power should also be provided along the CAN cable, ideally with another twisted pair to minimise noise pickup.  An overall shield can also be advantageous.  </p> <p>From a performance perspective, the optimal choice of cable is 7mm Devicenet CANbus 'thin' cable, with 24AWG (data) + 22AWG (power) twisted pairs and a braided shield.  Using this cable will result in a robust installation.  However, it is not cheap, and using it for a large network with many devices will quickly add up to a significant cost. </p> <p>For those on a budget, standard CAT5 network cabling (which has an impedance of 100 ohms) can be used, but may become unreliable in longer networks or in the presence of electrical noise from DC/DC converters and other electrical devices in the system \u2013 use this type of cable at your own risk.  </p>"},{"location":"Solar_Car_Racing/EV_Driver_Controller/User_Manual/CAN_Bus.html#can-connector","title":"CAN Connector","text":"<p>The connector used on the EV Driver Controls and other Prohelion devices is a 6-way 3mm pitch Molex MicroFit connector.  The pinout is shown below, as viewed from the wire side \u2013 as you would look at it while inserting crimps.  The colours shown match those in the standard DeviceNet CAN cabling pairs.</p> <p></p> 6-way 3mm pitch Molex MicroFit connector pinout"},{"location":"Solar_Car_Racing/EV_Driver_Controller/User_Manual/CAN_Bus.html#can-shielding","title":"CAN Shielding","text":"<p>If the recommended braided shield is used in the cable, then terminate it to the SHIELD pin (lower-left corner on the connector) on both CAN IN and CAN OUT connectors on each device. </p> <p>On one device only in the network, instead of using the SHIELD pin, terminate the shield to the SHIELD GROUND pin (upper-left corner on the connector) on both CAN IN and CAN OUT connectors, to ground the shield for the entire network at this single point.  The usual place to do this is where power is fed into the network, typically at Prohelion 's EV Driver Controls product.</p>"},{"location":"Solar_Car_Racing/EV_Driver_Controller/User_Manual/CAN_Bus.html#can-termination","title":"CAN Termination","text":"<p>To implement the required 120 Ohm termination resistor at each end of the CAN bus, plug a connector into the unused CAN connector on the last device at each end of the network with a resistor crimped into the appropriate locations.</p>"},{"location":"Solar_Car_Racing/EV_Driver_Controller/User_Manual/CAN_Bus.html#communications","title":"Communications","text":"<p>The CAN standard does not specify high-level message protocols. Prohelion devices use a custom protocol, outlined in the communication specification document for each device.</p> <p>By default, each device operates at 500 kbits/second, one step below the maximum possible data rate of 1 Mbit/second, and comes programmed from the factory with a CAN base address that will allow it to work without problems with other Prohelion devices. Currently, modifying the driver controls data rate or CAN base address requires reprogramming the microcontroller, although hardware support is provided to allow updates over the CAN bus in the future.</p> <p>The WaveSculptor motor controller expects regular messages from the driver controls device.  If a message is not received within a set timeout period then the controller will change to a safe mode and will stop driving the motor. This protects against faults where either a connector is loose or broken, the cable has been damaged, or the driver controls have failed.</p>"},{"location":"Solar_Car_Racing/EV_Driver_Controller/User_Manual/CAN_Bus.html#power-supply","title":"Power Supply","text":"<p>The EV Driver Controls provides a means to connect power from the 12V car battery into the CAN bus, to power other devices on the network.  The default software switches power to the CAN bus based on the state of the ignition key \u2013 the CAN bus will be powered if the key is in either the Accessories or the Run position.</p>"},{"location":"Solar_Car_Racing/EV_Driver_Controller/User_Manual/CAN_Bus.html#system-expansion","title":"System Expansion","text":"<p>Prohelion can provide a CAN bus LCD display capable of showing up to four different telemetry values (one at a time) on a 3.5 digit sunlight-readable screen.  Multiple displays can be used if desired.  </p>"},{"location":"Solar_Car_Racing/EV_Driver_Controller/User_Manual/CAN_Bus.html#multiple-motors","title":"Multiple Motors","text":"<p>Multiple motors/controllers are accommodated easily with the CAN bus system. All that is required is for each WaveSculptor controller to be programmed to receive messages from the same driver controls base address, and then to run the vehicle in current-control mode (the default setup). Each motor will now operate at the same current, thus giving automatic wheel speed differences for cornering, with the system acting as an electronic differential.</p>"},{"location":"Solar_Car_Racing/EV_Driver_Controller/User_Manual/Inputs_and_outputs.html","title":"Inputs and Outputs","text":""},{"location":"Solar_Car_Racing/EV_Driver_Controller/User_Manual/Inputs_and_outputs.html#12v-input-power-supply","title":"12V Input: Power Supply","text":"<p>The Driver Controls requires a 12V power connection to the spade terminals on the front panel.  This connection should be capable of supplying enough current to run all devices on the CAN bus, plus the expected current draw of the brake and reversing lights (if connected).  It should be fused externally to the driver controls. </p> <p>This power can be from an 'always on' connection, however the driver controls draws around 30mA continuously, so will drain your accessory battery if your DC/DC converter from the high voltage traction pack does not operate continuously.   This current draw will be lower in the future, however sleep mode functions are not implemented in the default software at this point.</p> <p>Supplying the driver controls from a relay activated by the 'Run' position of the ignition key is a good compromise.</p> <p>Supplying the driver controls from the 'Accessories' position of the ignition key is not recommended as this power is usually cut when the key is moved to the start position.  </p>"},{"location":"Solar_Car_Racing/EV_Driver_Controller/User_Manual/Inputs_and_outputs.html#12v-output-bulb-drive-outputs","title":"12V Output: Bulb Drive Outputs","text":"<p>The driver controls has two 12V 3A outputs, and the default software is suitable for connecting these two outputs to your brake lights and your reversing lights.  </p> <p>This is so that the brake lights can activate if regenerative braking is used, and the reversing lights can be activated if you are using a fixed ratio gearbox and are performing vehicle reversing by changing the motor rotation direction.</p> <p>If you are not using regen braking then you can leave the brake output from the driver controls disconnected, and leave the vehicle wiring untouched.</p> <p>If you are using a conventional gearbox to perform reversing, then you can leave the reversing output from the driver controls disconnected, and leave the vehicle wiring untouched.</p>"},{"location":"Solar_Car_Racing/EV_Driver_Controller/User_Manual/Inputs_and_outputs.html#vehicle-control-connector","title":"Vehicle Control Connector","text":"<p>The vehicle control connector is a female DB37 socket.  The following illustration shows the pinout as viewed when looking into the driver controls, the same view you have when soldering or inserting crimps into the rear of a mating connector housing.</p> <p></p> Vehicle Control Connector <p>All ground pins on the connector are identical, and connected together internally to the driver controls.  They are provided separately on the connector to simplify wiring, as a ground can be run out from the driver controls along with the bundle of other wires going to each input or output device.</p>"},{"location":"Solar_Car_Racing/EV_Driver_Controller/User_Manual/Inputs_and_outputs.html#vehicle-control-connections-analog-inputs","title":"Vehicle Control Connections: Analog Inputs","text":"<p>The driver controls provide three analog inputs.  These are suitable for connecting to a potentiometer (1k to 10k linear recommended), with the driver controls supplying a stable 5V supply, capable of up to 75mA shared between all three outputs.</p> <p>They are also suitable for connection to a voltage output device such as a hall-effect 'drive by wire' pedal assembly, as long as it is capable of operating from 5V and has outputs that do not go below ground or above 5V.  Most pedals meet these requirements.</p> <p>The default software uses the Analog A channel as the motor current input, suitable for connection to your accelerator (gas) pedal.  It has a small dead-band at either end of the pedal travel, but basically maps 0 to 100% throttle to the full range of potentiometer movement.  </p> <p>Analog B and Analog C are planned to be used for the 2nd cross-check output from a hall pedal, and the regenerative braking strength slider control, respectively.  However neither is currently implemented in the default software.</p>"},{"location":"Solar_Car_Racing/EV_Driver_Controller/User_Manual/Inputs_and_outputs.html#vehicle-control-connections-digital-inputs","title":"Vehicle Control Connections: Digital Inputs","text":"<p>Multiple digital switch or voltage inputs are provided.  Each input accepts a voltage between ground and the 12V supplied to the driver controls.  Inputs have a wide hysteresis band to provide noise immunity, and a 10k pull-up resistor to avoid floating inputs.  </p> <p>Inputs can be connected to a signal that will either be 12V or ground, such as the ignition switch position outputs. </p> <p>Inputs can also be connected to a toggle or pushbutton switch to ground, with the internal pull-up resistor providing the alternative logic level.</p> <p>Inputs are configured in four groups, but they are all identical in hardware and can be re-mapped as desired by modifying the device software.</p> <p>The default firmware is configured with the input polarity suitable for the following inputs:</p> <ul> <li>Ignition Accessories, Run, and Start positions (voltages: 12V = active)</li> <li>Brake Status (voltage: 12V = brakes on)</li> <li>Fuel Door switch (switch to ground: closed to drive, open to charge)</li> <li>Gear selection (switches to ground: closed to select specific mode)</li> </ul> <p>The default software provides power to the CAN bus if the ignition switch Accessories or Run inputs are active.</p> <p>The default software will only issue commands to the motor controller if the ignition switch Run input is active, and the fuel door is closed.</p> <p>The default software will send 0% torque commands to the motor controller if the brake switch is active.</p> <p>The default software will drive in the forwards direction if Gear Switch 1 or 2 is selected, will switch to Neutral if Gear Switch 3 is selected, and will drive in reverse if Gear Switch 4 is selected.  Do not select multiple gears simultaneously.</p>"},{"location":"Solar_Car_Racing/EV_Driver_Controller/User_Manual/Inputs_and_outputs.html#vehicle-control-connections-analog-outputs","title":"Vehicle Control Connections: Analog Outputs","text":"<p>Four analog outputs are provided to drive dashboard gauges or other devices in the vehicle.  All hardware is functionally identical, and capable of providing either a 0-12V pulse train output, or a 'variable resistance' to ground.  This allows driving either a tachometer type gauge, or a fuel type gauge.</p> <p>The default software drives Gauge outputs 1 and 2 as pulse outputs, with Gauge 1 showing engine RPM, and Gauge 2 showing system power.  </p> <p>The default software drives Gauge outputs 3 and 4 as resistance outputs, with Gauge 3 showing battery voltage, and Gauge 4 showing motor controller temperature.</p>"},{"location":"Solar_Car_Racing/EV_Driver_Controller/User_Manual/Inputs_and_outputs.html#vehicle-control-connections-digital-outputs","title":"Vehicle Control Connections: Digital Outputs","text":"<p>Eight digital outputs are provided, each capable of driving to either Ground or 12V, and capable of up to 100mA per output.  These outputs are not protected against overcurrent, and are designed to drive current-limited LED loads or small relays.  Take care to avoid overloading these outputs, and make sure to use a diode clamp across the coil if driving a relay.</p> <p>If used, each output should be connected through a LED and a current-limiting resistor to Ground.  Select the resistor value to set the LED current to the brightness required in your situation.  For a typical LED, a 560 Ohm resistor will give approximately 20mA LED current, giving high brightness from a standard 3mm or 5mm LED.</p> <p>The default software shows the currently selected gear mode by illuminating one of the Gear LED 1-4 outputs.  The Gear LED backlight is illuminated if either the ignition Accessories or Run positions are active.</p> <p>The Fault LED outputs are unused by the default software.</p>"},{"location":"Solar_Car_Racing/EV_Driver_Controller/User_Manual/Software_Programming.html","title":"Software Programming","text":"<p>The driver controls are based around a Texas Instruments (TI) MSP430 16-bit embedded low-power microcontroller, operating from a 16 MHz clock as default.  CAN bus support is provided via a Microchip MCP2515 CAN controller and TI SN65HVD234 CAN transceiver.  The driver controls are not isolated from the CAN bus.</p>"},{"location":"Solar_Car_Racing/EV_Driver_Controller/User_Manual/Software_Programming.html#basic-software-connection-diagram","title":"Basic Software Connection Diagram","text":"<p>The following schematic shows the simplest possible connection, when using the default software.</p> <p></p> Basic Connection Diagram"},{"location":"Solar_Car_Racing/EV_Driver_Controller/User_Manual/Software_Programming.html#schematics-source-code","title":"Schematics &amp; Source Code","text":"<p>Schematics and PCB component position overlays in PDF format are available for download on the Prohelion website.  A zip file is also provided containing the default source code for the microcontroller, written in 'C' and available under a BSD open-source license.</p> <p>Please refer to these references if developing custom firmware for the driver controls.</p>"},{"location":"Solar_Car_Racing/EV_Driver_Controller/User_Manual/Software_Programming.html#toolchain","title":"Toolchain","text":"<p>The example default code provided is configured to work with the freely-available open-source MSP430 GCC toolchain, which provides a command-line driven compiler, binutils, download, and real-time debug capability through a JTAG header present on the driver controls PCB.  The debug functionality requires purchase of a USB programmer from Texas Instruments.  Please refer to the README file with the source code for download and installation instructions.</p>"},{"location":"Solar_Car_Racing/EV_Driver_Controller/User_Manual/Software_Programming.html#code-download","title":"Code Download","text":"<p>The EV Driver Controls contains a facility to load new software into the device via the CAN bus.  This works in conjunction with our CAN-Ethernet bridge.  The bootloader utility is available on the Prohelion website.  Using this method of programming means that a debugger is not possible, but it works immediately and does not require the purchase of additional hardware.</p>"},{"location":"Solar_Car_Racing/Open_Source_Software/index.html","title":"Open Source Software","text":"<p>Prohelion has Open Sourced some of it's tools developed during racing to help provide a platform for learning and development.  For our commercially supported software systems, please see Profinity.</p> <ul> <li> <p> ArrowPoint Telemetry</p> <p>A web based platform for the capture and management of CAN Bus data in a racing environment.</p> <p> Getting started</p> </li> <li> <p> ArrowPoint Tablet</p> <p>An example Android app that can display data and alerts from Prohelion's BMS and WaveSculptors.</p> <p> Getting Started</p> </li> <li> <p> ArrowPoint CAN bus Tools</p> <p>Our very first attempt at creating a desktop application for managing CAN bus data</p> <p> Getting Started</p> </li> <li> <p> Contributing</p> <p>How to contribute to the development of these tools</p> <p> How to Contribute </p> </li> <li> <p> Troubleshooting</p> <p>Common troubleshooting approaches with these tools</p> <p> Troubleshooting</p> </li> </ul>"},{"location":"Solar_Car_Racing/Open_Source_Software/Contributing.html","title":"Contributing","text":"<p>First off, thank you for considering contributing to the Prohelion ArrowPoint Telemetry tools. Prohelion is made up of former  and current electric vehicle racers from around the world and we have always enjoyed the support of the community in the events  we have been involved with.  By open sourcing our software we are hoping to support other teams based on our learnings and experience, by contributing to the code we appreciate you helping as well.</p>"},{"location":"Solar_Car_Racing/Open_Source_Software/Contributing.html#where-do-i-go-from-here","title":"Where do I go from here?","text":"<p>If you've noticed a bug or have a question search the issue tracker to see if someone else in the community has already created a ticket. If not, go ahead and make one!</p>"},{"location":"Solar_Car_Racing/Open_Source_Software/Contributing.html#fork-create-a-branch","title":"Fork &amp; create a branch","text":"<p>If this is something you think you can fix, then fork the Prohelion software and create a branch with a descriptive name.</p> <p>A good branch name would be (where issue #325 is the ticket you're working on):</p> <pre><code>git checkout -b 325-add-japanese-translations\n</code></pre>"},{"location":"Solar_Car_Racing/Open_Source_Software/Contributing.html#get-the-test-suite-running","title":"Get the test suite running","text":"<p>Not all of our software has test cases or test coverage (feel free to contribute!), but where there  are test cases please make sure you have a 100% pass rates before trying to contribute code back to us.</p>"},{"location":"Solar_Car_Racing/Open_Source_Software/Contributing.html#did-you-find-a-bug","title":"Did you find a bug?","text":"<ul> <li> <p>Ensure the bug was not already reported by searching all issues.</p> </li> <li> <p>If you're unable to find an open issue addressing the problem,   open a new one. Be sure to include a title and clear   description, as much relevant information as possible, and a code sample   or an executable test case demonstrating the expected behavior that is not   occurring.</p> </li> </ul>"},{"location":"Solar_Car_Racing/Open_Source_Software/Contributing.html#implement-your-fix-or-feature","title":"Implement your fix or feature","text":"<p>At this point, you're ready to make your changes! Feel free to ask for help; everyone is a beginner at first </p>"},{"location":"Solar_Car_Racing/Open_Source_Software/Contributing.html#view-your-changes-in-across-multiple-browsers-or-tablets","title":"View your changes in across multiple browsers or tablets","text":"<p>One of the biggest challenges we have with our code is making sure that it works across a range of tablets / PCs / phones and the various technologies that people bring in to race environments.</p> <p>Please try and test as much as possible across multiple platforms.</p>"},{"location":"Solar_Car_Racing/Open_Source_Software/Contributing.html#get-the-style-right","title":"Get the style right","text":"<p>Your patch should follow the same conventions &amp; pass the same code quality checks as the rest of the project. </p>"},{"location":"Solar_Car_Racing/Open_Source_Software/Contributing.html#make-a-pull-request","title":"Make a Pull Request","text":"<p>At this point, you should switch back to your master branch and make sure it's up to date with the Prohelion ArrowPoint-Tablet master branch:</p> <pre><code>git remote add upstream git@github.com:Prohelion/ArrowPoint-Telemetry.git\ngit checkout master\ngit pull upstream master\n</code></pre> <p>Then update your feature branch from your local copy of master, and push it!</p> <pre><code>git checkout 325-add-japanese-translations\ngit rebase master\ngit push --set-upstream origin 325-add-japanese-translations\n</code></pre> <p>Finally, go to GitHub and make a Pull Request :D</p>"},{"location":"Solar_Car_Racing/Open_Source_Software/Contributing.html#keeping-your-pull-request-updated","title":"Keeping your Pull Request updated","text":"<p>If a maintainer asks you to \"rebase\" your PR, they're saying that a lot of code has changed, and that you need to update your branch so it's easier to merge.</p> <p>To learn more about rebasing in Git, there are a lot of good [resources][interactive rebase] but here's the suggested workflow:</p> <pre><code>git checkout 325-add-japanese-translations\ngit pull --rebase upstream master\ngit push --force-with-lease 325-add-japanese-translations\n</code></pre>"},{"location":"Solar_Car_Racing/Open_Source_Software/Contributing.html#merging-a-pull-request-maintainers-only","title":"Merging a Pull Request (maintainers only)","text":"<p>A Pull Request can only be merged into master by a maintainer if:</p> <ul> <li>It is passing all test cases</li> <li>It has been approved by at least two maintainers. If it was a maintainer who   opened the Pull Request, only one extra approval is needed.</li> <li>It has no requested changes.</li> <li>It is up to date with current master.</li> </ul> <p>Any maintainer is allowed to merge a Pull Request if all of these conditions are met.</p>"},{"location":"Solar_Car_Racing/Open_Source_Software/Contributing.html#shipping-a-release-maintainers-only","title":"Shipping a release (maintainers only)","text":"<p>Maintainers need to do the following to push out a release:</p> <ul> <li>Make sure all pull requests are in and that changelog is current</li> <li>Update <code>version.rb</code> file and changelog with new version number</li> <li>If it's not a patch level release, create a stable branch for that release,   otherwise switch to the stable branch corresponding to the patch release you   want to ship:</li> </ul> <pre><code>git checkout master\ngit fetch ArrowPoint-Telemetry\ngit rebase ArrowPoint-Telemetry/master\n# If the release is 2.1.x then this should be: 2-1-stable\ngit checkout -b N-N-stable\ngit push ArrowPoint-Tablet N-N-stable:N-N-stable\n</code></pre>"},{"location":"Solar_Car_Racing/Open_Source_Software/Troubleshooting.html","title":"Troubleshooting","text":""},{"location":"Solar_Car_Racing/Open_Source_Software/Troubleshooting.html#can-bus-data-is-not-appearing-in-the-applications-or-tablet","title":"CAN Bus data is not appearing in the applications or tablet","text":"<p>This is by far the most common issue that we experience with the code and is unfortunately due to the nature of CAN Bus and particularly Windows OS.</p> <p>CAN Bus is based on the UDP protocol, which is fire and forget and does not guarantee delivery, as such the packets often get 'lost'.  The best solution we have generally found to this is to disable any network adapter that is not required to run the system, this is particularly critical in a race environment.  Ideally your PC and tablets should only be connected or able to connect to one network which is tested and you know works.</p> <p>To do this in Windows find your Network Connection and disable anything that is not required.  For example below this PC has both WiFi, Ethernet 5 (which is actually a docking station ethernet connection via USB) and Ethernet 2 a TAP or VPN connection.  Having all these connections running increases the chance that you UDP traffic is coming down or going up the wrong link.  Be careful disabling vEthernet connections as these are part of Docker and are required for it to run.</p> <p></p> CAN Bus Troubleshooting"},{"location":"Solar_Car_Racing/Open_Source_Software/Troubleshooting.html#getting-help-with-an-issue","title":"Getting help with an Issue","text":"<p>If you are having an issue please let us know.  The best option is via GitHub where you can log a bug against the product that is giving you an issue.</p> <ul> <li>https://github.com/Prohelion/ArrowPoint-Telemetry/issues</li> <li>https://github.com/Prohelion/ArrowPoint-Android/issues</li> <li>https://github.com/Prohelion/ArrowPoint-Android/issues</li> </ul> <p>If you know the solution to your issue, please help us by forking the code and creating a fix.  You can find information on contributing to the code in the Contributing.md file that is located in the root directory of each product, here is a link to the ArrowPoint Telemetry one https://github.com/Prohelion/ArrowPoint-Telemetry/blob/master/CONTRIBUTING.md</p>"},{"location":"Solar_Car_Racing/Open_Source_Software/ArrowPoint_CANBus_Tools/index.html","title":"ArrowPoint CAN bus Tools","text":"<p>ArrowPoint CAN bus Tools is a Windows based platform designed to receive and display telemetry information from an WiFi access point in real time.  Its functionality has been replaced by Prohelion's Profinity tools, so we are providing it to the community as an Open Source solution to help you learn more about CAN Bus development and approaches.</p> <p>The out of the box implementation is designed for use in Solar or Electric racing cars that use technology from Prohelion or Tritium. This solution was originally developed by TeamArrow and has been used in racing environments since 2015.</p> <p>If you are interested in contributing to the solution, please see our Contribution File </p> <p>The application provides</p> <ul> <li>The ability to view and transmit CAN Bus packets</li> <li>The ability to log CAN Bus packets and replay them</li> <li>Simulate a driver controller</li> <li>Simulate a motor controller</li> </ul> <p>The application is compatible with</p> <ul> <li>Prohelion Battery Packs</li> <li>Prohelion and Tritium Driver Controllers</li> <li>Prohelion and Tritium WaveSculptors</li> <li>Prohelion and Tritium BMUs and CMUs</li> </ul> <p>The Wifi connection should be broadcasting CAN Bus data using the Tritium CAN Bus identifiers.</p> <p>Any issues please or question, please raise them on our GitHub account at https://github.com/Prohelion/ArrowPoint-CANbus-Tools</p>"},{"location":"Solar_Car_Racing/Open_Source_Software/ArrowPoint_CANBus_Tools/Development.html","title":"Development","text":""},{"location":"Solar_Car_Racing/Open_Source_Software/ArrowPoint_CANBus_Tools/Development.html#compilation-and-development","title":"Compilation and Development","text":"<p>If you are planning to contribute to the development of this tool, please see our Contribution File on GitHub.</p> <p>Compiling the solution requires Visual Studio 2017 with the C# modules installed. The community edition of Visual Studio works fine for building this code.</p> <p>You have two options to build the code, either load the project in Visual Studio 2017 and build normally or execute a build on the command line by opening the Developer Command Prompt for Visual Studio 2017 and then running</p> <p>in the root level source code directory. Information on running msbuild can be found on the Microsoft Visual Studio Website.</p> <pre><code>msbuild;\n</code></pre>"},{"location":"Solar_Car_Racing/Open_Source_Software/ArrowPoint_CANBus_Tools/Development.html#issues-or-suggestions","title":"Issues or Suggestions","text":"<p>If you have any issues with the code or discover bugs then we would encourage you to log them on the issues page here https://github.com/Prohelion/ArrowPoint-CANbus-Tools/issues or have a go at fixing them and then send us a pull request with details of what you have done. If you are fixing a bug, please log it as per the Contribution File instructions so that we have an idea on what you are attempting to do. Also check out the Software Troubleshooting page.</p>"},{"location":"Solar_Car_Racing/Open_Source_Software/ArrowPoint_CANBus_Tools/Setup.html","title":"Setup","text":""},{"location":"Solar_Car_Racing/Open_Source_Software/ArrowPoint_CANBus_Tools/Setup.html#installation","title":"Installation","text":"<p>Installation of the ArrowPoint-CAN Bus tools can be achieved simply by running the ArrowPointDiagnosticTool.exe in the following directory: </p> <p>\\ArrowWareDiagnosticTool\\bin\\Debug </p> <p>or </p> <p>\\ArrowWareDiagnosticTool\\bin\\Run directories</p>"},{"location":"Solar_Car_Racing/Open_Source_Software/ArrowPoint_CANBus_Tools/Setup.html#usage","title":"Usage","text":"<p>The tool is relatively simple to use. Log in and connect to the CAN Bus network, typically the default settings will work fine.</p> <p></p> CAN Bus Settings <p>You can then access a range of tools on the menu for logging / recording or replaying CAN Bus traffic as well as sending and simulating data in the system.</p> <p></p> CAN Bus Tools"},{"location":"Solar_Car_Racing/Open_Source_Software/ArrowPoint_Tablet/index.html","title":"ArrowPoint for Android","text":"<p>The ArrowPoint for Android Solution is an Android App designed to receive and display telemetry information from an WiFi access point in real time. It is a very useful tool in a race environment as every team member can have a copy installed on their own phone or tablet and get instant insights in to the performance of the vehicle.</p> <p></p> ArrowPoint Dashboard <p>The out of the box implementation is designed for use in Solar or Electric racing cars that use technology from Prohelion or Tritium. This solution was originally developed by TeamArrow and has been used in racing environments since 2015. TeamArrow continue to use this application both as the in car dashboard as well as a solution for the entire fleet to communicate and monitor the car.</p> <p>Examples of the software in use can be seen here - https://www.youtube.com/watch?reload=9&amp;v=lWkXEb8v1tk</p>"},{"location":"Solar_Car_Racing/Open_Source_Software/ArrowPoint_Tablet/index.html#features","title":"Features","text":"<p>The application provides</p> <ul> <li>A Driver Dashboard showing all key information for the driver (we use this as our in car dashboard in the Arrow1)</li> <li>A Solar Energy Dashboard showing key solar data and battery information</li> <li>Customizable Alerts that can be used to alert the team or driver to systems going out of range or offline</li> <li>Private Messaging for inter-fleet communications that does not require the radio</li> <li>A Graphing Dashboard that can be used to graph information over time</li> <li>Basic GPS tracking system to track the car location</li> </ul> <p>The application is compatible with</p> <ul> <li>Prohelion Battery Packs</li> <li>Prohelion &amp; Tritium WaveSculptors</li> <li>Prohelion &amp; Tritium BMUs and CMUs</li> </ul> <p>The Wifi connection should be broadcasting CAN Bus data using the Prohelion and Tritium CAN Bus identifiers.</p> <p>Any issues please or question, please raise them on our GitHub account at https://github.com/Prohelion/ArrowPoint-Android</p>"},{"location":"Solar_Car_Racing/Open_Source_Software/ArrowPoint_Tablet/Dashboard.html","title":"Dashboard","text":"<p>The Driver Dashboard as the name suggests is designed to provide information to the driver. In the Arrow1 TeamArrow used this system as the actual dashboard in the car. If Customizable Alerts are triggered in the App software these are also shown on the screen so the driver has instant notification of an issue.</p> <p></p> ArrowPoint Dashboard <p>In racing environments TeamArrow found it very useful to not just have the app installed on a tablet in the solar car but also in the chase and lead cars as well on the dash. That way the whole fleet could track current speed of the car which made running as a fleet much smoother. If there was an issue in the car everyone was aware immediately across the entire fleet.</p>"},{"location":"Solar_Car_Racing/Open_Source_Software/ArrowPoint_Tablet/Development.html","title":"Development","text":"<p>If you are planning to contribute to the development of this tool, please see our Contribution File on GitHub.</p> <p>As mentioned above, compilation and development requires Android Studio.</p>"},{"location":"Solar_Car_Racing/Open_Source_Software/ArrowPoint_Tablet/Development.html#known-issues","title":"Known Issues","text":"<p>Not all Android hardware is able to receive UDP packets and typically this capability is only available in mid tier to high tier Android tablets and Phone. TeamArrow have been racing with this solution for a number of years and we have typically found that Samsung products provide the most reliability in this space. It is worth checking that your tablet or phone can handle UDP broadcast traffic before attempting to use this application.</p> <p>This applications receives 100's of CAN Bus packets per second and as such puts significant strain on the battery, also the screen runs all the time. We have typically found that we need a tablet per sector when running an event like World Solar Challenge. TeamArrow carries multiple tablets in the fleet and always has a few on charge at any time.</p>"},{"location":"Solar_Car_Racing/Open_Source_Software/ArrowPoint_Tablet/Development.html#issues-or-suggestions","title":"Issues or Suggestions","text":"<p>If you have any issues with the code or discover bugs then we would encourage you to log them on the issues page here https://github.com/Prohelion/ArrowPoint-Android/issues or have a go at fixing them and then send us a pull request with details of what you have done.</p>"},{"location":"Solar_Car_Racing/Open_Source_Software/ArrowPoint_Tablet/Fleet_Messaging.html","title":"Fleet Messaging","text":"<p>The private messaging system works in collaboration with the Fleet Private Messaging system in the Telemetry system to allow you to send private messages from App to App or Telemetry to App in the fleet over the TCP / CAN Bus network</p> <p>The application has been designed to try and make it easy to use while driving by having pre set messages.</p> <p>Having a solution like this is important for two reasons.</p> <p>Radio communication in solar car racing is typically done on public channels and as such other teams can overhear your messages</p> <p>Losing radio communications is a really common problem when your driver is in a carbon fibre based vehicle and often overworked. The number of flat batteries, disconnected or pulled out headphones, accidentally changed channels and channel sharing issues that TeamArrow has had over the years is too numerous to count.</p> <p>By having a solution like this it allows you to communicate with your driver, even if you are just sending messages to them. We use the horn at times to signal that the driver has received the message, on the System Details &amp; Customizable Alerts page you can see if they are pressing the horn, we included that switch, because it is often hard to hear from 100 meters behind in the case car.</p> <p></p>"},{"location":"Solar_Car_Racing/Open_Source_Software/ArrowPoint_Tablet/GPS.html","title":"GPS","text":"<p>The GPS tracking function is still a work in progress at this point, but we intend in the longer term for this to be used for lap tracking or position information (for example distance to next stop).</p> <p>At the moment, it simply shows your current latitude and longitude.</p> <p></p>"},{"location":"Solar_Car_Racing/Open_Source_Software/ArrowPoint_Tablet/Graphing.html","title":"Graphing","text":"<p>The graphing dashboard allows you to do basic graphing of key attributes on the tablet, this is generally useful when team members want to know something but do not want to be bothering the strategy or telemetry teams.</p> <p>Because the ArrowPoint Telemetry application is written to be mobile friendly, if a team member needs more information they can also use their phone or tablet to log in to the Telemetry Reporting or use the Integration with Splunk to do more complex reporting.</p> <p></p>"},{"location":"Solar_Car_Racing/Open_Source_Software/ArrowPoint_Tablet/Setup.html","title":"Setup","text":""},{"location":"Solar_Car_Racing/Open_Source_Software/ArrowPoint_Tablet/Setup.html#installation-on-the-tablet-or-phone","title":"Installation on the Tablet or Phone","text":"<p>Installation of the ArrowPoint App requires the installation of the Android Studio tools, we would suggest version 3.1.4 or above. Place the tablet or phone that you wish to install the application on to in to development mode by following the Development Mode instructions on the android web site. Connect a USB cable from the PC where you are running Android Studio to the tablet or phone and then run the application on the tablet from the Development Studio. Once the application has been installed it will appear as an arrow icon and can be run without the PC attached via the cable.</p>"},{"location":"Solar_Car_Racing/Open_Source_Software/ArrowPoint_Tablet/Setup.html#running-the-solution","title":"Running the Solution","text":"<p>The tablet will look to get CAN Bus information from a WiFi Connection point. TeamArrow has used this solution in the past by running three Wifi Access points, one in the solar car and one in the chase and lead car, allowing the tablet to connect to whichever one has the strongest signal. Because the solar car is typically made out of carbon fibre, which does a great job of blocking Wifi signals, we would suggest taking care where you install the Wifi access points to maximise the stability of the connection in the vehicle.</p>"},{"location":"Solar_Car_Racing/Open_Source_Software/ArrowPoint_Tablet/Solar.html","title":"Solar","text":"<p>The solar energy dashboard show the current performance of the solar array as well as the net power position to the battery.</p> <p>In the example below the array is currently generating almost no power as there is a Total Input (W) of 1.56w (probably not a great example sorry!) and the controller is consuming 2673w, hence the current net power position on the car is -2672w.</p> <p></p>"},{"location":"Solar_Car_Racing/Open_Source_Software/ArrowPoint_Tablet/SystemDetails.html","title":"System Details & Alerts","text":"<p>This screen shows information on key systems that may go out of range as well as the current state of the vehicle (Neutral / Drive / Reverse) is regen being used (it currently is in the picture below as it's red), is the driver braking (no) and are they using the Horn (no).</p> <p>The ArrowPoint App also features a stand alone alerting system that will display alerts on the screen when various Can packets pass set thresholds. The alerts are then shown in the bottom panel.</p> <p></p> ArrowPoint Android Alerts <p>Alerts are configured by modifying the alerts.csv file located in /app/src/main/res/raw/alerts.csv below is an example file</p> Data Min Threshold Max Threshold <code>MinimumCellV</code> 2.9 - <code>MotorTemp</code> - 100 <code>MaxCellTemp</code> - 60 <code>ControllerTemp</code> - 50 <p>If any of these thresholds are passed then the tablet will display an alert on the screen. This is very useful in race environment as if you have any communication failure between the chase car and solar car (which has happened to TeamArrow a lot) the driver can operate the car with confidence that they will be alerted to a major issue.</p>"},{"location":"Solar_Car_Racing/Open_Source_Software/ArrowPoint_Telemetry/index.html","title":"ArrowPoint Telemetry","text":"<p>The ArrowPoint Telemetry Solution is designed to provide telemetry capture and management information for managing a race car.</p> <p>The out of the box implementation is designed for use in Solar or Electric racing cars that use technology from Prohelion or Tritium. This solution was originally developed by TeamArrow and has been used in racing environments since 2013. TeamArrow continue to use this application as the heart of its telemetry and strategy management solutions.</p> <p>The solution captures and stores all telemetry data in a race environment and has been used to capture over 60,000,000 data points in previous events and testing and can manage, track and store around 400 data points a second when running on a i7 laptop. It provides reporting (via Splunk) across full data sets via a web interface and allows teams to build and track massive data sets via dashboards and dynamically modifiable searches.</p> <p></p> Example of the ArrowPoint Dashboard <p>The ArrowPoint-Telemetry system is very light weight (considering what it is doing!) and TeamArrow have historically run it on a single CPU laptop, which we tuck on the seat in the chase car or can be run in the cloud (we use Amazon EC2) when coupled with the ArrowPoint-Tablet for data relay.</p> <p>Examples of the software in use can be seen here - https://www.youtube.com/watch?reload=9&amp;v=lWkXEb8v1tk</p>"},{"location":"Solar_Car_Racing/Open_Source_Software/ArrowPoint_Telemetry/index.html#features","title":"Features","text":"<p>For the full feature list see the Telemetry System Features section, but at a high level the application provides</p> <ul> <li>CAN Bus data capture and reporting either directly off the car, via the ArrowPoint-Tablet or a JSON stream</li> <li>Alerting via a visual signals (USB light), when key data points go out of range</li> <li>Storage of CAN Bus data in a relational data set for later reporting against very large datasets</li> <li>Relaying of data to other ArrowPoint-Telemetry instances</li> <li>Integration with SPLUNK for larger scale data capture and real time reporting</li> <li>Mechanisms to visualise your position and strategy in Google Earth</li> </ul> <p>The application is compatible with</p> <ul> <li>Prohelion Battery Packs</li> <li>Prohelion and Tritium WaveSculptors</li> <li>Prohelion and Tritium BMUs and CMUs</li> </ul> <p>Any issues please or question, please raise them on our GitHub account at https://github.com/Prohelion/ArrowPoint-Telemetry or see the Software Troubleshooting page.</p>"},{"location":"Solar_Car_Racing/Open_Source_Software/ArrowPoint_Telemetry/Alerting.html","title":"Alerting","text":"<p>The Telemetry system has the ability to be connected to an external light that can alert you when CANbas based items go out of range.</p> <p>Alerting is done via a visual cue using USB HID Visual Signal Indicators from Delcom Products</p> <p>https://www.delcomproducts.com/productdetails.asp?PartNumber=904007</p> <p></p> Beacon Black Side"},{"location":"Solar_Car_Racing/Open_Source_Software/ArrowPoint_Telemetry/Alerting.html#configuration-of-the-alerting-system","title":"Configuration of the Alerting System","text":"<p>Configuration of the Alerting system is done by setting up a CSV file with thresholds that when crossed trigger Warnings, Alerts and then Shutdowns.  See the core for more details.  The Alert Type specifies if the threshold is crossed when it goes High, Low or a over a Percentage of a value.</p> Device Measurement CanId dataPointCanId Warning Threshold Alert Threshold Shutdown Threshold Alert Type BMS Min Cell Voltage 6F80 28544 2900 2750 2600 Low BMS Max Cell Temp 6F92 28562 500 550 600 High BMS CMU 1 PCB Temp 6014 24596 750 800 850 High BMS CMU 2 PCB Temp 6044 24644 750 800 850 High BMS CMU 3 PCB Temp 6074 24692 750 800 850 High BMS CMU 4 PCB Temp 60A4 24740 750 800 850 High BMS CMU 5 PCB Temp 60D4 24788 750 800 850 High BMS Overvoltage 6F82 28546 4100 4150 4200 High WaveSculptor Motor Temp 40B0 16560 90 100 120 High WaveSculptor Heatsink Temp 40B4 16564 60 65 80 High WaveSculptor DSP Operating Temp 40C0 16576 80 90 100 High Arrays Array 1 Power 3410 13328 0.1 1.2 1.2 Percentage Arrays Array 2 Power 3420 13344 0.1 1.2 1.2 Percentage Arrays Array 3 Power 3430 13360 0.1 1.2 1.2 Percentage Arrays Total Array Power 3440 13376 100 10 0 Low BMS-DC_DC BMS-DC_DC Max Cell Temp 1030 4144 50 55 60 High BMS-DC_DC Min Cell 1 Voltage 1040 4160 2900 2750 2600 Low BMS-DC_DC Min Cell 2 Voltage 1042 4162 2900 2750 2600 Low BMS-DC_DC Min Cell 3 Voltage 1044 4164 2900 2750 2600 Low BMS-DC_DC Min Cell 4 Voltage 1046 4166 2900 2750 2600 Low BMS-DC_DC Max Cell 1 Voltage 1040 4160 4100 4150 4200 High BMS-DC_DC Max Cell 2 Voltage 1042 4162 4100 4150 4200 High BMS-DC_DC Max Cell 3 Voltage 1044 4164 4100 4150 4200 High BMS-DC_DC Max Cell 4 Voltage 1046 4166 4100 4150 4200 High <p>Each CanId is set a range of values which if exceeded trigger a visual alert to notify the chase car that there are systems moving out of range. The system can look for values that are high or low.</p> <p>For example if</p> <ul> <li> <p>BMS-DC_DC Max Cell 4 Voltage goes beyond 4100 mv or 4.1 volts then the light will change colour from green to orange</p> </li> <li> <p>If the total array power drops below 100w the system will start to throw warnings</p> </li> </ul>"},{"location":"Solar_Car_Racing/Open_Source_Software/ArrowPoint_Telemetry/Bulk_Importing.html","title":"Bulk Importing","text":"<p>The system provides the ability for CAN Bus files that have been recorded by either Profinity the ArrowPoint CAN Bus Tools or the Tritium Can Logger to be bulk loaded in to the telemetry system.</p> <p>This is particularly useful if you want to analyse previously recorded CAN Bus files in the reporting tools such as Splunk.  An example canlog.csv file can be found in the root directory of the source code for the Telemetry system.</p> <p>To load a file place it in the </p> <pre><code>[Install Dir]/CAN Bus_bulkloaddirectory.\n</code></pre>"},{"location":"Solar_Car_Racing/Open_Source_Software/ArrowPoint_Telemetry/Capture.html","title":"Telemetry Capture","text":"<p>Telemetry information is constantly captured by the Telemetry system via CAN Bus messages on the network.  The information is then stored in the database and via the Integration with Splunk you are also able to report on it from there.</p> <p>The Telemetry system filters and manages the telemetry data to balance performance vs data quality, not all data is stored, typically we store one of each CAN Bus packet per second as a typical vehicle is producing around 400 packets per second, which will generally exceed a HDD ability to keep up.</p>"},{"location":"Solar_Car_Racing/Open_Source_Software/ArrowPoint_Telemetry/Cloud.html","title":"Cloud Configuration","text":"<p>A single Telemetry instance can forward data on a regular basis to other Telemetry instances, this allows you to create Hybrid configurations with a Primary Instance forwarding to a Secondary Instance for backup and redundancy or to enable offsite management and monitoring.</p> <p>For the European Solar Challenge in 2018, TeamArrow used this feature to enable a Hybrid Cloud Architecture where a local instance of the Telemetry system at the track was used to store and manage data before it was forwarded to a second instance running in the Amazon Elastic Cloud (EC2) in Europe.  This cloud based instance was used by a second team based in Australia to under take strategy planning and system monitoring.</p> <p>The forwarding feature is enabled by setting the enable.data.forward option inside the application.properties file.  Information on setting this file up can be found on the Configuration page.</p> <p>The telemetry solution also runs using Docker which means that it can be simply and easily configured in to new environments as required.</p>"},{"location":"Solar_Car_Racing/Open_Source_Software/ArrowPoint_Telemetry/Config.html","title":"Configuration","text":"<p>There are two main ways that the Telemetry system is configured. Firstly the actual application itself is configured via the use of an application.properties file that is located in the source code. This file is loaded by Spring Boot as part of the application initialization and used to configure the application behaviours. The second way the application is configured is to change the CAN Bus ids that are used to track devices in your vehicle, this change is documented separately below.</p>"},{"location":"Solar_Car_Racing/Open_Source_Software/ArrowPoint_Telemetry/Config.html#changing-the-applicationproperties","title":"Changing the application.properties","text":"<p>The Telemetry system is configured via the use of a properties file which is stored in the telemetry code based under the directory <pre><code>[Install Directory]\\ArrowPoint-Telemetry\\src\\main\\resources\\application.properties\n</code></pre></p> Telemetry Configuration Details Application telemetry.username=admin Username for the login page telemetry.password=password Password for the login page Splunk enable.splunk.connector = true Enable the splunk connector to relay telemetry information to Splunk (true / false) splunk.host=splunkenterprise Name of the host running Splunk, in the Docker configuration this container is called splunkenterprise. If you have installed Splunk separately this should be the hostname of your host splunk.port=8089 Port that the Splunk API interface is running on, by default this is 8089 splunk.username=admin Splunk admin username splunk.password=password Splunk admin password splunk.owner=admin Splunk data owner typically also admin splunk.scheme=https Protocol used to relay data to Splunk, by default this should be https splunk.tcpwriter.port=9999 Data is relayed by the Splunk TCP writer, this is the default port for that component Weather Data Connection enable.weather.connector = false Enable the weather station data connector weather.host = 192.168.1.42 IP address of the weather station TCP to Serial Bridge weather.port = 100 Telnet port for connecting to the weather station weather.timeout = 1000 Timeout value for the Telnet Connection weather.poll.interval = 5000 Poll interval for the weather station in milli-seconds GPS Connection Listener enable.gps.connector = false Enable the GPS connection gps.host = 192.168.1.60 Host for the GPS connection (this is typically the IP address of the server running the telemetry application) gps.port = 11123 Port that the connector run on (note that this port should be setup to handle inbound connections) Telemetry Data Forwarder enable.data.forward = false Enable the telemetry data forwarder, which will forward telemetry data to another telemetry instance data.forward.cron = 0 * * * * * CRON schedule on which the latest data will be forwarded data.forward.url = URL to which the data should be forwarded, the url should end in the url forward-data.json for example http://ec2-33-159-9-132.eu-central-1.compute.amazonaws.com:9000/forward-data.json Alerting and Lights enable.alerts = true Enable the external lighting system for alerting alerts.dir = C:/config/alerts/ Directory to find the alert script files alerts.values.file = C:/config/alerts/Alert_Values.csv Values to alert on alerts.flags.file = C:/config/alerts/Flag_Values.csv CAN Bus Flag Messages Route enable.route = false Enable the routing functionality for tracking vehicle progress route.file = C:/config/route/routedata.csv Route file containing the route information UDP Receive and Broadcast udp.host = 239.255.60.60 Host IP address used to broardcast UDP packets for transmitting sourced data like the weather data and placing it on to the CAN Bus IP network udp.port = 4876 What port should the UDP traffic be broardcast on udp.local.address = 127.0.0.1 Local address use for UDP broadcasts Can File Loader can.loader.directory = file:///tmp Directory where CAN Bus files that you want to bulk load should be placed can.loader.pattern = *.csv Extension of the CAN Bus files Infrastructure Configuration These settings should only be changed if you are looking to change how the application itself behaves, they do not change the functional behaviour of the application. The Spring Boot Documentation is the best source of information on these settings spring.application.name=Prohelion Telemetry spring.mvc.favicon.enabled = false server.port = 9000 server.servlet.contextPath=/ server.servlet.session.timeout=3600 Thymeleaf Configuration spring.thymeleaf.cache=false spring.thymeleaf.enabled=true spring.thymeleaf.prefix=classpath:/templates/ spring.thymeleaf.suffix=.md DataSource Configuration jdbc.driverClassName=org.postgresql.Driver jdbc.url = jdbc:postgresql://timescaledb:5432/teamarrow jdbc.user = teamarrow jdbc.pass =REMOVE init-db = false Hibernate Configuration hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect hibernate.show_sql=false hibernate.hbm2ddl.auto=validate Debugging Configuration logging.level.org.springframework.web=INFO logging.level.org.hibernate=ERROR Use for SQL debugging #logging.level.org.hibernate.SQL=INFO #logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE #logging.level.org.springframework.transaction.interceptor=TRACE"},{"location":"Solar_Car_Racing/Open_Source_Software/ArrowPoint_Telemetry/Config.html#changing-the-can-bus-ids-in-the-telemetry-application","title":"Changing the CAN Bus ID's in the Telemetry Application","text":"<p>Changing the CAN Bus IDs is currently a bit complex and requires a few steps. The actual IDs are stored and managed from the Timescale DB (postgres) instance that runs behind the Telemetry system in docker. The docker system automatically runs the setup scripts to create these IDs when the instance is first created. You will find those setup scripts in /docker/TimescaleDB directory.</p> <p>The build script builds an init.sql file based on a DDL stored elsewhere in the code <pre><code>del init.sql\ntype ..\\..\\data_model\\ddl\\postgres.sql &gt; init.sql\ntype ..\\..\\data_model\\ddl\\functions.sql &gt;&gt; init.sql\ntype ..\\..\\data_model\\ddl\\referencedata.sql &gt;&gt; init.sql\n\ndocker build --no-cache -t prohelion/timescaledb-with-data:0.4 .\n\nrem del *.sql\n</code></pre></p> <ul> <li>postgres.sql sets up the structures, this generally should not need to be changed</li> <li>functions.sql set up a set of functions in the database to help us manage the data, again this should not need to be changed</li> <li>referencedata.sql is where all the CAN Bus ID's are setup and defined. This file will likely need to change for your configuration</li> </ul> <p>The following example show how a single CAN Bus data_pnt 'Flash Serial' is configured. *  The device type sets up if the device is analog or digital *  The device itself is defined (in this case it is the BMS DC2DC board) *  The device has a thing that can be measured, this will have CanId (in this case it is 100 hex) *  The measurement has two components, both are integers, one 'Flash Serial' exists at CAN_DATA_OFFST 0 and the other 'Device Id' at CAN_DATA_OFFST 4</p> <pre><code>insert into dev_type(DEV_TYPE_ID, DEV_TYPE) values (1, 'Analog');\ninsert into dev_type(DEV_TYPE_ID, DEV_TYPE) values (2, 'Binary');\n\ninsert into dev(DEV_ID, DEV_NAME, DEV_ABBREV) values (10, 'BMS DC-DC Board', 'BMS-DC-DC');\n\ninsert into msrmnt(MSRMNT_ID, MSRMNT_NAME, MSRMNT_TYPE, CAN_ID, DEV_ID_FK, DEV_TYPE_ID_FK, REPRTNG_FRQ) values (80, 'BMS DC-DC Heartbeat', 'DC-DC_Heartbeat', hex_to_int('100'), 10, 1, 1);\n\n-- DC-DC\ninsert into data_pnt(DATA_PNT_ID, DATA_PNT_CAN_ID, NAME, DESCR, DATA_LEN, CAN_DATA_OFFST, DATA_TYPE, LOW_ERR_THRHLD, LOW_WRNG_THRHLD, HIGH_WRNG_THRHLD, HIGH_ERR_THRHLD, MSRMNT_ID_FK, UNITS) values (1, hex_to_int('1004'), 'Flash Serial', 'Flash Serial', 4,  4 ,'int', 0, 0, 0, 0, 80, 'NA');\ninsert into data_pnt(DATA_PNT_ID, DATA_PNT_CAN_ID, NAME, DESCR, DATA_LEN, CAN_DATA_OFFST, DATA_TYPE, LOW_ERR_THRHLD, LOW_WRNG_THRHLD, HIGH_WRNG_THRHLD, HIGH_ERR_THRHLD, MSRMNT_ID_FK, UNITS) values (2, hex_to_int('1000'), 'Device Id', 'Device Id', 4,  0 ,'int', 0, 0, 0, 0, 80, 'NA');\n</code></pre> <p>Once the changes have been made, you will need to rebuild your docker file using /docker/TimescaleDB/build.cmd and then restart the application. What we should now see is that the information shows up in the menu and options like so.</p>"},{"location":"Solar_Car_Racing/Open_Source_Software/ArrowPoint_Telemetry/Config.html#changing-the-can-bus-ids-in-splunk","title":"Changing the CAN Bus ID's in Splunk","text":"<p>Splunk uses a lookup table to convert raw CAN Bus Ids to text names. Currently if you change your CAN Bus IDs then you will need to regenerate this lookup file and provide it to Splunk. You can do this buy running the following SQL against the timescaledb database from within PgAdmin which you can access via</p> <pre><code>http://localhost:5080\n</code></pre> <p>The run the following SQL</p> <pre><code>SELECT data_pnt_can_id, data_pnt_name, dev_name, msrmnt_name FROM public.splunk_lookup_data;\n</code></pre> <p>The resulting file should be exported saved as DataPoint_CanID.csv and then loaded in to Splunk in the data lookup table files menu </p> <pre><code>http://localhost:8000/en-GB/manager/launcher/data/lookup-table-files\n</code></pre> <p>An example file is included with the code in the directory \\ArrowPoint-Telemetry\\config\\lookups if you are looking for an example of how this file should appear.</p> <p>Once the file has been loaded, Spunk should work as expected.</p>"},{"location":"Solar_Car_Racing/Open_Source_Software/ArrowPoint_Telemetry/Development_APIs.html","title":"Development & APIs","text":"<p>If you are interested in contributing to the solution, please see our contribution file here:</p> <p>https://github.com/Prohelion/ArrowPoint-Telemetry/blob/master/CONTRIBUTING.md</p> <p>The Telemetry system is based around Microservice based architecture based on Spring Boot.</p> <p>The services are not extensively documented at this time but can be located in the following package in the code com.prohelion.web.controller and we will attempt to improve the documentation over the coming months.</p>"},{"location":"Solar_Car_Racing/Open_Source_Software/ArrowPoint_Telemetry/Fleet_Broadcasting.html","title":"Fleet Broadcasting","text":"<p>The Telemetry system acts as a base station to re-broadcast non CAN Bus data as CAN Bus for example</p> <ul> <li>Weather data from the Weather Systems Integration</li> <li>GPS data from the GPS Integration</li> <li>Privates Messages from the Private Messaging system </li> </ul> <p>Are all relayed to CAN Bus packets by the Telemetry system.</p>"},{"location":"Solar_Car_Racing/Open_Source_Software/ArrowPoint_Telemetry/Fleet_Messaging.html","title":"Fleet Messaging","text":"<p>Under the Fleet Management menu item in the Telemetry system you will find a Fleet Message Management box.  From here you can chose to send private messages via the Wifi network to other vehicles in the fleet.</p> <p></p> Example of the Fleet Messaging system <p>This system works with the ArrowPoint Tablet application, allowing messages to be sent to Tablets in the fleet.  Messages are sent via CAN Bus.</p>"},{"location":"Solar_Car_Racing/Open_Source_Software/ArrowPoint_Telemetry/GPS_GoogleEarth.html","title":"GPS & Google Earth","text":"<p>The Telemetry system can track your current location which can then be displayed on Google Maps.</p> <p>We us the iPhone app GPS2IP to capture the GPS data and push it to the telemetry system</p> <p>https://apps.apple.com/us/app/gps-2-ip/id408625926</p> <p></p> Iphone GPS Coordinate example <p>The reason we use an iPhone app is simply redundancy and ease of development. The iPhone is typically mounted on the dash of the chase car and connected to the in car Wifi network. It captures GPS data and then transmits it to the Telemetry application which is listening on a socket for the GPS data. The Telemetry application then broadcasts the GPS data as CAN Bus packets for other devices to receive.</p> <p>The Telemetry system integrates with Google Earth to allow you to visualize your strategy and plan landing spots later in the day. For this feature to work you need to have Google Earth installed and then go to the Fleet Management page in the telemetry system </p> <pre><code>http://localhost:9000/fleet.html\n</code></pre> <p>and click the strategy speed predictions link. The system will then produce a KML file and Google Earth (or whatever KML visualization tool you use will load).</p> <p></p> Example of the Google Earth Pro interface <p>Selecting current speed on the menu shows where the car will be on the road using your current speed. By selecting current speed (+1) you will see where you will be if you were to go 1kph faster etc.</p> <p>When GPS Integration is enabled, the car itself will appear on the map showing your current location.</p> <p>However, as the vehicle is not currently on the route, it\u2019s not showing in the image above.</p>"},{"location":"Solar_Car_Racing/Open_Source_Software/ArrowPoint_Telemetry/Reporting.html","title":"Reporting","text":"<p>The telemetry system allows you to do basic reporting by selecting the device that you want to report on off the menu</p> <p></p> Example of the Telemetry Reporting <p>Note that for more advanced reporting we would suggest using the Integration with Splunk which allows you to do very complex and rich reporting.</p>"},{"location":"Solar_Car_Racing/Open_Source_Software/ArrowPoint_Telemetry/Setup.html","title":"Setup","text":""},{"location":"Solar_Car_Racing/Open_Source_Software/ArrowPoint_Telemetry/Setup.html#setup-requirements","title":"Setup Requirements","text":"<p>The ArrowPoint Telemetry system is designed to very light weight in terms of physical infrastructure.</p> <p>In a race environment TeamArrow runs the entire system on a single i7 laptop with an SSD hard drive. However, since the solution does store substantial amounts of information we would recommend at a minimum a 256GB SSD with 100GB free storage for a race environment.</p> <p>The system has been tested on Windows 10 and Amazon EC2 Unix, but should run on any form of Unix that supports Docker (including Apple Laptops). As the system is passive apart from a couple of key features, it is possible to run two instances of the solution on two laptops and achieve high availability. Laptops make much more sense than dedicated hardware or PCs in a race environment as the battery in a laptop is fundamentally built in and the power supply problems are much simpler in a chase car when running low power electronics.</p>"},{"location":"Solar_Car_Racing/Open_Source_Software/ArrowPoint_Telemetry/Setup.html#pre-requirements","title":"Pre-requirements","text":"<ul> <li>Windows 10 or Linux OS</li> <li>Docker Desktop\u2013 If you are planning to use the Docker container model<ul> <li>If you are not using docker you will also need to install Postgres 10, PgAdmin and optionally Splunk</li> </ul> </li> <li>Java 8 or higher we would suggest you download the Java Development Kit or JDK</li> <li>Apache Maven</li> <li>Git \u2013 We would suggest Atlassian SourceTree if you are new to Git as it is a bit easier to use than Git on the command line</li> <li>Spring Tool Suite \u2013 If you want to change the code or contribute to the project</li> </ul>"},{"location":"Solar_Car_Racing/Open_Source_Software/ArrowPoint_Telemetry/Setup.html#docker-based-install","title":"Docker based Install","text":"<p>The software infrastructure required to run the ArrowPoint Telemetry system is complex and the simplest way to install the solution is using Docker. Docker is a container management solution designed to provide containers for applications or in our case application components such as a database or Splunk. The containers then run on a docker instance which is installed on your PC. Prohelion has prepared Docker containers with the right setup for your database and Splunk configuration. While you can setup these manually, it\u2019s complex and we would not recommended it. If you are not wanting to use Docker then please see the Docker Free Installation information below.</p> <p>To install the ArrowPoint Telemetry system download a copy of the code from the GitHub repository by cloning the code or downloading a release zip.</p> <p>In the root directory of your download you will find a file called</p> <pre><code>docker-compose.yml\n</code></pre> <p>This file contains the configuration information to run the software in Docker.</p>"},{"location":"Solar_Car_Racing/Open_Source_Software/ArrowPoint_Telemetry/Setup.html#known-issue","title":"Known Issue","text":"<p>Docker does not support UDP traffic on its virtual network. As such the telemetry system cannot receive traffic from the CAN Bus devices such as the WaveSculptor. To get around this issue the infrastructure required to run the Telemetry system runs in Docker apart from the core application which runs as a stand alone Spring Boot Application and hence can access the UDP network directly.</p>"},{"location":"Solar_Car_Racing/Open_Source_Software/ArrowPoint_Telemetry/Setup.html#installation-steps","title":"Installation Steps","text":"Step Action 1 Install Docker. 2      Modify the hosts file on your machine to include the name of the three hosts used in the system. Information on how to modify your host file can be found on the following [article from how to geek](https://www.howtogeek.com/howto/27350/beginner-geek-how-to-edit-your-hosts-file/).  If you are just running the whole configuration on one machine then the hosts file should look like this  <pre><code>127.0.0.1   timescaledb\n127.0.0.1   splunkenterprise\n127.0.0.1   telemetry\n</code></pre>  If you are running the different components on different machines then the host file change should occur on the machine that you are running the telemetry system on (the one you start in step 4 below) and should reflect the IP addresses of the machines where docker (as started in step 3 below) is running.  3 Run the Docker configuration. Note the first time you run this command the system will need to download a lot of images from docker. It's worthwhile doing this on a high speed network as you are probably going to be downloading 100's of MBs worth of images. <code> docker-compose up </code> Once this command is complete the back end of the system ([timescaledb](https://www.timescale.com/), [splunk](https://www.splunk.com/), [pgadmin](https://www.pgadmin.org/)) will be up and running locally on your machine.  4 Run the main application, note again the first time you run this application a bunch of files will need to be downloaded from maven repositories, this is a one off event. <code> StartTelemetry.cmd  </code> Or you can run the command below in the same directory as the pom.xml file <code> mvn spring-boot:run </code> 5 To simulate some CAN Bus traffic to see the system operating you can run the command <code> carUtilities.cmd </code> Select option 3 to replay a log file and then use the canlog.csv file which is included in the home directory of the project and say Y for yes to loop the file <code> Prohelion Car Testing Utilities  What utility would you like to run?  0) Exit 1) Cruise Control Test 2) Cruise Control Step Test 3) CAN Bus Log Replayer  Make your selection &gt; 3  Prohelion Log Replayer V1.0 Note: Filenames should entered using Java form D:/temp/car-park-test.csv Enter the log you wish to replay &gt; canlog.csv Do you wish to loop the file (Y/N) &gt; Y </code> You should then see the CAN Bus log being replayed with many items like this <code> Delay = 0 : CanPackey time = 09:23:58.792   , id =  0x501 , data= 0x3F0B17E5457A0000 </code> 6 Open the appropriate console by going to the following URL:  ArrowPoint Console : http://localhost:9000 - Login: admin / passw0rd!  Splunk Console: http://localhost:8000 - Login: admin / passw0rd!  PgAdmin Console: http://localhost:5080 - Login: admin@prohelion.com / passw0rd!"},{"location":"Solar_Car_Racing/Open_Source_Software/ArrowPoint_Telemetry/Splunk.html","title":"Splunk","text":"<p>If enabled in the Configuration the Telemetry system will send data to splunk for reporting and management. From here you can undertake complex data analysis using tools like the Long Term Analysis tool, which allows you to view any data points across any time range</p> <p></p> Example of the ArrowPoint Dashboard <p>Splunk is a commercial product and typically requires a commercial license for larger data sets. TeamArrow applied for the Splunk 4 Good program, which provided free Splunk licenses to organisations that are seeing to do non commercial based activities, contact Splunk for more information.</p>"},{"location":"Solar_Car_Racing/Open_Source_Software/ArrowPoint_Telemetry/Usage.html","title":"Basic Usage","text":"<p>The core telemetry system can be accessed by going to </p> <pre><code>http://localhost:9000\n</code></pre> <p>If the system is running you will see a page that looks like this.</p> <p></p> Telemetry Login <p>If you see the screen then you will able to log in with the default account</p> <p>Username: admin</p> <p>Password: passw0rd!</p> <p>At which point you should be presented with the dashboard that looks like this.</p> <p></p> Telemetry Dashboard"},{"location":"Solar_Car_Racing/Open_Source_Software/ArrowPoint_Telemetry/Usage.html#splunk","title":"Splunk","text":"<p>Complex reporting is handled in the Telemetry system by splunk, which can be accessed by going to the url </p> <pre><code>http://localhost:8000\n</code></pre> <p>If everything is running correctly, you should see a screen that looks like this</p> <p></p> Splunk Login <p>If you see the screen then you will able to log in with the default account</p> <p>Username: admin</p> <p>Password: passw0rd!</p> <p></p> Splunk Dashboard <p>Click on the Prohelion Telemetry Application and then the Dashboards menu item to see that available reporting dashboards</p> <p></p> Splunk Report"},{"location":"Solar_Car_Racing/Open_Source_Software/ArrowPoint_Telemetry/Usage.html#pgadmin","title":"PgAdmin","text":"<p>PgAdmin allows you direct access to the underlying TimescaleDB (Postgres) database that runs the Telemetry System. You can access it on the URL </p> <pre><code>http://localhost:5080\n</code></pre> <p>Click the menu on the left to display the available connections and then use the default accounts to connect to the database.</p> <p>Username: admin@prohelion.com</p> <p>Password: passw0rd!</p> <p></p> PgAdmin Login <p>Once you have logged in, connect to the database instance in the menu on the left and reenter the database password.</p> <p>Password: passw0rd!</p> <p></p> PgAdmin Database <p>You are now connected to the database instance, the tables for the application are stored in the public schema.</p>"},{"location":"Solar_Car_Racing/Open_Source_Software/ArrowPoint_Telemetry/Weather.html","title":"Weather Integration","text":"<p>The Telemetry system can connect to weather stations to collect information in real time on the weather including wind speeds and solar irradiance. We use and recommend Lufft weather sensors such as the WS700-UMB, which are mounted on pole on top of the chase car. These devices can monitor wind speeds as well as solar radiation levels, air temperatures and humidity.</p> <p>https://www.lufft.com/products/compact-weather-sensors-293/ws700-umb-smart-weather-sensor-1830/</p> <p></p> Smart Weather Sensor <p>Lufft sensors are connected to the Telemetry system via a Serial to Ethernet bridge such as this one</p> <p>https://www.jaycar.com.au/serial-to-ethernet-converter/p/XC4134</p> <p></p> Serial to Ethernet Converter <p>The telemetry system then uses telnet to poll the device at regular intervals and extract the current weather data. That information is then broadcast on the network as CAN Bus packets for other devices to receive.</p>"},{"location":"Solar_Charge_Controllers/index.html","title":"Solar Charge Controllers by Elmar","text":"<ul> <li> <p> Elmar 3A MPPT</p> <p>Datasheet and User guide for the 3A Solar MPPT</p> <p> Datasheet</p> </li> <li> <p> Elmar Race MPPT</p> <p>A Solar Power Tracker designed for solar racing and mobile applications</p> <p> Datasheet</p> </li> <li> <p> Elmar Best MPPT</p> <p>The highest performance MPPT in the Elmar solar power tracker range</p> <p> Datasheet</p> </li> <li> <p> Elmar MPPT DBC</p> <p>DBC File to Support the Elmar MPPT Devices</p> <p> DBC </p> </li> <li> <p> Profinity</p> <p>Our MPPT and CAN Bus management software solution</p> <p> Supporting Software</p> </li> </ul>"},{"location":"Solar_Charge_Controllers/DBC.html","title":"Elmar Solar DBC File","text":"<p>The following DBC file can be used to decode the CAN Packets transmitted by this device.</p> <pre><code>VERSION \"\"\n\n\nNS_ : \n    NS_DESC_\n    CM_\n    BA_DEF_\n    BA_\n    VAL_\n    CAT_DEF_\n    CAT_\n    FILTER\n    BA_DEF_DEF_\n    EV_DATA_\n    ENVVAR_DATA_\n    SGTYPE_\n    SGTYPE_VAL_\n    BA_DEF_SGTYPE_\n    BA_SGTYPE_\n    SIG_TYPE_REF_\n    VAL_TABLE_\n    SIG_GROUP_\n    SIG_VALTYPE_\n    SIGTYPE_VALTYPE_\n    BO_TX_BU_\n    BA_DEF_REL_\n    BA_REL_\n    BA_DEF_DEF_REL_\n    BU_SG_REL_\n    BU_EV_REL_\n    BU_BO_REL_\n    SG_MUL_VAL_\n\nBS_:\n\nBU_: ElmarSolarMPPT\n\n\nBO_ 1536 PowerInput: 8 ElmarSolarMPPT\n SG_ InputVoltage : 0|32@1- (1,0) [0|0] \"V\" Vector__XXX\n SG_ InputCurrent : 32|32@1- (1,0) [0|0] \"A\" Vector__XXX\n\nBO_ 1537 PowerOutput: 8 ElmarSolarMPPT\n SG_ OutputVoltage : 0|32@1- (1,0) [0|0] \"V\" Vector__XXX\n SG_ OutputCurrent : 32|32@1- (1,0) [0|0] \"A\" Vector__XXX\n\nBO_ 1538 Temperature: 8 ElmarSolarMPPT\n SG_ MosfetTemperature : 0|32@1- (1,0) [0|0] \"C\" Vector__XXX\n SG_ ControllerTemperature : 32|32@1- (1,0) [0|0] \"C\" Vector__XXX\n\nBO_ 1539 AuxillaryPowerSupply: 8 ElmarSolarMPPT\n SG_ TwelveVolt : 0|32@1- (1,0) [0|0] \"V\" Vector__XXX\n SG_ ThreeVolt : 32|32@1- (1,0) [0|0] \"V\" Vector__XXX\n\nBO_ 1540 Limits: 8 ElmarSolarMPPT\n SG_ MaxOutputVoltage : 0|32@1- (1,0) [0|0] \"V\" Vector__XXX\n SG_ MaxInputCurrent : 32|32@1- (1,0) [0|0] \"A\" Vector__XXX\n\nBO_ 1541 Status: 8 ElmarSolarMPPT\n SG_ ErrorReserved : 29|1@1+ (1,0) [0|1] \"On / Off\" Vector__XXX\n SG_ ErrorMosfetOverheat : 25|1@1+ (1,0) [0|1] \"On / Off\" Vector__XXX\n SG_ ErrorLowArrowPower : 24|1@1+ (1,0) [0|1] \"On / Off\" Vector__XXX\n SG_ ErrorHwOverVoltage : 31|1@1+ (1,0) [0|1] \"On / Off\" Vector__XXX\n SG_ ErrorHwOverCurrent : 30|1@1+ (1,0) [0|1] \"On / Off\" Vector__XXX\n SG_ ErrorBatteryLow : 26|1@1+ (1,0) [0|1] \"On / Off\" Vector__XXX\n SG_ ErrorBatteryFull : 27|1@1+ (1,0) [0|1] \"On / Off\" Vector__XXX\n SG_ Error12vUndervoltage : 28|1@1+ (1,0) [0|1] \"On / Off\" Vector__XXX\n SG_ LimitOutputVoltageMax : 34|1@1+ (1,0) [0|1] \"On / Off\" Vector__XXX\n SG_ LimitMosfetTemperature : 35|1@1+ (1,0) [0|1] \"On / Off\" Vector__XXX\n SG_ LimitLocalMPPT : 38|1@1+ (1,0) [0|1] \"On / Off\" Vector__XXX\n SG_ LimitInputCurrentMin : 32|1@1+ (1,0) [0|1] \"On / Off\" Vector__XXX\n SG_ LimitInputCurrentMax : 33|1@1+ (1,0) [0|1] \"On / Off\" Vector__XXX\n SG_ LimitGlobalMPPT : 39|1@1+ (1,0) [0|1] \"On / Off\" Vector__XXX\n SG_ LimitDutyCycleMax : 37|1@1+ (1,0) [0|1] \"On / Off\" Vector__XXX\n SG_ LimitDuryCycleMin : 36|1@1+ (1,0) [0|1] \"On / Off\" Vector__XXX\n SG_ CanRXErrorCounter : 0|8@1+ (1,0) [0|0] \"\" Vector__XXX\n SG_ CanTXErrorCounter : 8|8@1+ (1,0) [0|0] \"\" Vector__XXX\n SG_ CanTXOverflowCounter : 16|8@1+ (1,0) [0|0] \"\" Vector__XXX\n SG_ Mode : 40|8@1+ (1,0) [0|1] \"\" Vector__XXX\n SG_ Reserved : 48|8@1+ (1,0) [0|0] \"\" Vector__XXX\n SG_ TestCounter : 56|8@1+ (1,0) [0|0] \"\" Vector__XXX\n\nBO_ 1542 PowerConnector: 8 ElmarSolarMPPT\n SG_ OutputVoltageBatterySide : 0|32@1- (1,0) [0|0] \"V\" Vector__XXX\n SG_ PowerConnectorTemp : 32|32@1- (1,0) [0|0] \"C\" Vector__XXX\n\n\n\nCM_ BU_ ElmarSolarMPPT \"MPPT created by Elmar solar, either Series A or B\";\nCM_ SG_ 1536 InputVoltage \"Input Voltage on the MPPT\";\nCM_ SG_ 1536 InputCurrent \"Input Current on the MPPT\";\nCM_ SG_ 1537 OutputVoltage \"Output Voltage from the MPPT\";\nCM_ SG_ 1537 OutputCurrent \"Output Current from the MPPT\";\nCM_ SG_ 1538 MosfetTemperature \"Temperature as measured at the Mosfet\";\nCM_ SG_ 1538 ControllerTemperature \"Temperature as measured at the controller\";\nCM_ SG_ 1539 TwelveVolt \"Voltage as measured at the 12v power auxillary supply\";\nCM_ SG_ 1539 ThreeVolt \"Voltage as measured at the 3v power supply\";\nCM_ SG_ 1540 MaxOutputVoltage \"Maximim Output voltage configured for the device\";\nCM_ SG_ 1540 MaxInputCurrent \"Maximum Input current configured for the device\";\nCM_ SG_ 1542 OutputVoltageBatterySide \"Output Voltage (Battery side of fuse)\";\nCM_ SG_ 1542 PowerConnectorTemp \"Power connector temperature\";\nSIG_VALTYPE_ 1536 InputVoltage : 1;\nSIG_VALTYPE_ 1536 InputCurrent : 1;\nSIG_VALTYPE_ 1537 OutputVoltage : 1;\nSIG_VALTYPE_ 1537 OutputCurrent : 1;\nSIG_VALTYPE_ 1538 MosfetTemperature : 1;\nSIG_VALTYPE_ 1538 ControllerTemperature : 1;\nSIG_VALTYPE_ 1539 TwelveVolt : 1;\nSIG_VALTYPE_ 1539 ThreeVolt : 1;\nSIG_VALTYPE_ 1540 MaxOutputVoltage : 1;\nSIG_VALTYPE_ 1540 MaxInputCurrent : 1;\nSIG_VALTYPE_ 1542 OutputVoltageBatterySide : 1;\nSIG_VALTYPE_ 1542 PowerConnectorTemp : 1;\n</code></pre>"}]}